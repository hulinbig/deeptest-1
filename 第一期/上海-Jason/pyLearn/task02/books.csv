书名,作者,描述,出版社,价格
Python编程：从入门到实践,[美]埃里克·马瑟斯,本书是一本针对所有层次的Python 读者而作的Python 入门书。全书分两部分：第一部分介绍用Python 编程所必须了解的基本概念，包括matplotlib、NumPy 和Pygal 等强大的Python 库和工具介绍，以及列表、字典、if 语句、类、文件与异常、代码测试等内容；第二部分将理论付诸实践，讲解如何开发三个项目，包括简单的Python 2D 游戏开发如何利用数据生成交互式的信息图，以及创建和定制简单的Web 应用，并帮读者解决常见编程问题和困惑。,人民邮电出版社,CNY 89.00
A Byte of Python,Swaroop C H,|'A Byte of Python' is a book on programming using the Python language. It serves as a tutorial or guide to the Python language for a beginner audience. If all you know about computers is how to save text files, then this is the book for you.|,Lulu Marketplace,USD 27.98
Head First Python（中文版）,巴里（Barry.P.）,你想过可以通过一本书就学会Python吗？《Head First Python(中文版)》超越枯燥的语法和甩法手册，通过一种独特的方法教你学习这种语言。你会迅速掌握Python的基础知识，然后转向持久存储、异常处理、Web开发、SQLite、数据加工和lGoogle App Engine。你还将学习如何为Android编写移动应用，这都要归功于Python为你赋予的强大能力。本书会提供充分并且完备的学习体验，帮助你成为一名真正的Python程序员。    作者巴里觉得你的时间相当宝贵，不应当过多地花费在与新概念的纠缠之中。通过应用认知科学和学习理论的最新研究成果，《Head First Python(中文版)》可以让你投入一个需要多感官参与的学习体验，这本书采用丰富直观的形式使你的大脑真正开动起来，而不是长篇累牍地说教，让你昏昏欲睡。,中国电力出版社,68.00元
Python灰帽子,[美] Justin Seitz,《Python灰帽子》是由知名安全机构Immunity Inc的资深黑帽Justin Seitz主笔撰写的一本关于编程语言Python如何被广泛应用于黑客与逆向工程领域的书籍。老牌黑客，同时也是Immunity Inc的创始人兼首席技术执行官（CTO）Dave Aitel为这本书担任了技术编辑一职。书中绝大部分篇幅着眼于黑客技术领域中的两大经久不衰的话题：逆向工程与漏洞挖掘，并向读者呈现了几乎每个逆向工程师或安全研究人员在日常工作中所面临的各种场景，其中包括：如何设计与构建自己的调试工具，如何自动化实现烦琐的逆向分析任务，如何设计与构建自己的fuzzing工具，如何利用fuzzing 测试来找出存在于软件产品中的安全漏洞，一些小技巧诸如钩子与注入技术的应用，以及对一些主流Python安全工具如PyDbg、 Immunity Debugger、Sulley、IDAPython、PyEmu等的深入介绍。作者借助于如今黑客社区中备受青睐的编程语言 Python引领读者构建出精悍的脚本程序来一一应对上述这些问题。出现在书中的相当一部分Python代码实例借鉴或直接来源于一些优秀的开源安全项目，诸如Pedram Amini的Paimei，由此读者可以领略到安全研究者们是如何将黑客艺术与工程技术优雅融合来解决那些棘手问题的。,电子工业出版社,39.00元
Python网络编程基础,John Goerzen,《Python网络编程基础》可以作为各层次Python、Web和网络程序的开发人员的参考书，在实际工作中使用书中的技术，效果更佳。,电子工业出版社,68.00元
Python基础教程,Magnus Lie Hetland,本书是经典教程的全新改版，作者根据Python 3.0版本的种种变化，全面改写了书中内容，做到既能“瞻前”也能“顾后”。本书层次鲜明、结构严谨、内容翔实，特别是在最后几章，作者将前面讲述的内容应用到了10个引人入胜的项目中，并以模板的形式介绍了项目的开发过程。本书既适合初学者夯实基础，又能帮助Python程序员提升技能，即使是 Python方面的技术专家，也能从书里找到令你耳目一新的东西。,人民邮电出版社,69.00元
Python Algorithms,Magnus Lie Hetland,|Python Algorithms explains the Python approach to algorithm analysis and design. Written by Magnus Lie Hetland, author of Beginning Python, this book is sharply focused on classical algorithms, but it also gives a solid understanding of fundamental algorithmic problem-solving techniques. * The book deals with some of the most important and challenging areas of programming and computer science, but in a highly pedagogic and readable manner. * The book covers both algorithmic theory and programming practice, demonstrating how theory is reflected in real Python programs. * Well-known algorithms and data structures that are built into the Python language are explained, and the user is shown how to implement and evaluate others himself. What you'll learn * Transform new problems to well-known algorithmic problems with efficient solutions, or show that the problems belong to classes of problems thought not to be efficiently solvable. * Analyze algorithms and Python programs both using mathematical tools and basic experiments and benchmarks. * Prove correctness, optimality, or bounds on approximation error for Python programs and their underlying algorithms. * Understand several classical algorithms and data structures in depth, and be able to implement these efficiently in Python. * Design and implement new algorithms for new problems, using time-tested design principles and techniques. * Speed up implementations, using a plethora of tools for high-performance computing in Python. Who this book is for The book is intended for Python programmers who need to learn about algorithmic problem-solving, or who need a refresher. Students of computer science, or similar programming-related topics, such as bioinformatics, may also find the book to be quite useful. Table of Contents * Introduction * The Basics * Counting 101 * Induction and Recursion ...and Reduction * Traversal: The Skeleton Key of Algorithmics * Divide, Combine, and Conquer * Greed Is Good? Prove It! * Tangled Dependencies and Memoization * From A to B with Edsger and Friends * Matchings, Cuts, and Flows * Hard Problems and (Limited) Sloppiness|,Apress,USD 49.99
父与子的编程之旅,|桑德 (Warren Sande),桑德 (Carter Sande)|,|本书是一本家长与孩子共同学习编程的入门书。作者是一对父子，他们以Python语言为例，详尽细致地介绍了Python如何安装、字符串和操作符等程序设计的基本概念，介绍了条件语句、函数、模块等进阶内容，最后讲解了用Python实现游戏编程。书中的语言生动活泼，叙述简单明了。 为了让学习者觉得编程有趣，本书编排了很多卡通人物及场景对话，让学习者在轻松愉快之中跨入计算机编程的大门。
第 2 版新增内容
首先，我们来说说第 2 版中有哪些内容没有改变，那就是我们决定在第 2 版中继续使用 Python 2，而不是转换到 Python 3。我们会在第 1 章解释其中的原因。
下面是第 2 版与第 1 版的不同之处
增加了一些说明，解释 Python 2 和 Python 3 的区别。
第 12 章增加了一节关于 Python 字典的内容。
在第 20 章的 GUI 编程部分，我们将不再被支持的 PythonCard 换成了应用更广泛的 PyQt。PyQt 也用在第 22 章的 Hangman 程序和第 24 章的电子宠物程序中。
增加了第 25 章，用来详细解释第 10 章中的 Skier 程序。
增加了第 26 章，讲述在简单的对战游戏中，如何编写一个有人工智|,人民邮电出版社,CNY 69.00
利用Python进行数据分析,Wes McKinney,|【名人推荐】
“科学计算和数据分析社区已经等待这本书很多年了：大量具体的实践建议，以及大量综合应用方法。本书在未来几年里肯定会成为Python领域中技术计算的权威指南。”
——Fernando Pérez　加州大学伯克利分校 研究科学家， IPython的创始人之一
【内容简介】
还在苦苦寻觅用Python控制、处理、整理、分析结构化数据的完整课程？本书含有大量的实践案例，你将学会如何利用各种Python库（包括NumPy、pandas、matplotlib以及IPython等）高效地解决各式各样的数据分析问题。
由于作者Wes McKinney是pandas库的主要作者，所以本书也可以作为利用Python实现数据密集型应用的科学计算实践指南。本书适合刚刚接触Python的分析人员以及刚刚接触科学计算的Python程序员。
•将IPython这个交互式Shell作为你的首要开发环境。
•学习NumPy（Numerical Python）的基础和高级知识。
•从pandas库的数据分析工具开始。
•利用高性能工具对数据进行加载、清理、转换、合并以及重塑。
•利用matplotlib创建散点图以及静态或交互式的可视化结果。
•利用pandas的groupby功能对数据集进行切片、切块和汇总操作。
•处理各种各样的时间序列数据。
•通过详细的案例学习如何解决Web分析、社会科学、金融学以及经•济学等领域的问题。|,机械工业出版社,89.00
Python核心编程（第二版）,[美]Wesley J. Chun（陳仲才）,|本书是Python开发者的完全指南——针对 Python 2.5全面升级
·学习专业的Python风格、最佳实践和好的编程习惯；
·加强对Python对象、内存模型和Python面向对象特性的深入理解；
·构建更有效的Web、CGI、互联网、网络和其他客户端\/服务器架构应用程序及软件；
·学习如何使用Python中的Tkinter和其他工具来开发自己的GUI应用程序及软件；
·通过用C等语言编写扩展来提升Python应用程序的性能，或者通过使用多线程增强I\/0相关的应用程序的能力；
·学习Python中有关数据库的API，以及如何在Python中使用各种不同的数据库系统，包括MySQL、Postgres和 SQLite。|,人民邮电出版社,89.00元
贝叶斯思维,[美]Allen B. Downey（艾伦·唐尼）,|这本书帮助那些希望用数学工具解决实际问题的人们，仅有的要求可能就是懂一点概率知识和程序设计。而贝叶斯方法是一种常见的利用概率学知识去解决不确定性问题的数学方法，对于一个计算机专业的人士，应当熟悉其应用在诸如机器翻译，语音识别，垃圾邮件检测等常见的计算机问题领域。
可是本书实际上会远远扩大你的视野，即使不是一个计算机专业的人士，你也可以看到在战争环境下（二战德军坦克问题），法律问题上（肾肿瘤的假设验证），体育博彩领域（棕熊队和加人队NFL比赛问题）贝叶斯方法的威力。怎么从有限的信息判断德军装甲部队的规模，你所支持的球队有多大可能赢得冠军，在《龙与地下城》勇士中，你应当对游戏角色属性的最大值有什么样的期望，甚至在普通的彩弹射击游戏中，拥有一些贝叶斯思维也能帮助到你提高游戏水平。
除此以外，本书在共计15章的篇幅中讨论了怎样解决十几个现实生活中的实际问题。在这些问题的解决过程中，作者还潜移默化的帮助读者形成了建模决策的方法论，建模误差和数值误差怎么取舍，怎样为具体问题建立数学模型，如何抓住问题中的主要矛盾（模型中的关键参数），再一步一步的优化或者验证模型的有效性或者局限性。在这个意义上，这本书又是一本关于数学建模的成功样本。|,人民邮电出版社,49.00
Django Web开发指南,|Jeff Forcier,Paul Bissex|,本书讲述如何用Python框架Django构建出强大的Web解决方案，本书讲解了使用新的Django 1.0版的各种主要特性所需要的技术、工具以及概念。 全书分为12章和6个附录，内容包括，Django Python实战，Django速成：构建一个Blog，起始，定义和使用模型，URL、HTTP机制和视图，模板和表单处理，Photo Gallery，内容管理系统，Liveblog，Pastebin，高级Django编程，高级Django部署。附录内容包括命令行基础，安装运行Django，实用Django开发工具，发现、评估、使用Django应用程序，在Google App Engine上使用Django，参与Django项目。 本书适用于Python框架Django初学者，Django Web开发技术人员。,机械工业出版社,49.00元
Python源码剖析,陈儒,|作为主流的动态语言，Python不仅简单易学、移植性好，而且拥有强大丰富的库的支持。此外，Python强大的可扩展性，让开发人员既可以非常容易地利用C\/C++编写Python的扩展模块，还能将Python嵌入到C\/C++程序中，为自己的系统添加动态扩展和动态编程的能力。.
为了更好地利用Python语言，无论是使用Python语言本身，还是将Python与C\/C++交互使用，深刻理解Python的运行原理都是非常重要的。本书以CPython为研究对象，在C代码一级，深入细致地剖析了Python的实现。书中不仅包括了对大量Python内置对象的剖析，更将大量的篇幅用于对Python虚拟机及Python高级特性的剖析。通过此书，读者能够透彻地理解Python中的一般表达式、控制结构、异常机制、类机制、多线程机制、模块的动态加载机制、内存管理机制等核心技术的运行原理，同时，本书所揭示的动态语言的核心技术对于理解其他动态语言，如 Javascript、Ruby等也有较大的参考价值。..
本书适合于Python程序员、动态语言爱好者、C程序员阅读|,电子工业出版社,69.80元
Python学习手册,Mark Lutz,|《Python学习手册(第3版)》讲述了：Python可移植、功能强大、易于使用，是编写独立应用程序和脚本应用程序的理想选择。无论你是刚接触编程或者刚接触Python，通过学习《Python学习手册(第3版)》，你可以迅速高效地精通核心Python语言基础。读完《Python学习手册(第3版)》，你会对这门语言有足够的了解，从而可以在你所从事的任何应用领域中使用它。
《Python学习手册(第3版)》是作者根据过去10年用于教学而广为人知的培训课程的材料编写而成的。除了有许多详实说明和每章小结之外，每章还包括一个头脑风暴：这是《Python学习手册(第3版)》独特的一部分，配合以实用的练习题和复习题，让读者练习新学的技巧并测试自己的理解程度。
《Python学习手册(第3版)》包括：
类型和操作——深入讨论Python主要的内置对象类型：数字、列表和字典等。
语句和语法——在Python中输入代码来建立并处理对象，以及Python一般的语法模型。
函数——Python基本的面向过程工具，用于组织代码和重用。
模块——封装语句、函数以及其他工具，从而可以组织成较大的组件。
类和OOP——Python可选的面向对象编程工具，可用于组织程序代码从而实现定制和重用。
异常和工具——异常处理模型和语句，并介绍编写更大程序的开发工具。
讨论Python 3.0。
《Python学习手册(第3版)》让你对Python语言有深入而完整的了解，从而帮助你理解今后遇到的任何Python应用程序实例。如果你准备探索Google和YouTube为什么选中了Python，《Python学习手册(第3版)》就是你入门的最佳指南。|,机械工业出版社,89.00元
Python入门经典,(美)William F. Punch\/Richard Enbody,《Python入门经典:以解决计算问题为导向的Python编程实践》是一本系统而科学的Python入门教程，美国密歇根州立大学等多所美国知名高校采用其作为编程语言的入门教材，被奉为经典。它不仅从计算机教学和计算机科学的角度讲解了初学者如何才能更有效地去学习Python，而且特别强调用Python解决生活中的实际问题，精心组织了大量来源于生活中不同领域的与数值计算和数据处理相关的案例。通过《Python入门经典:以解决计算问题为导向的Python编程实践》，读者不仅能系统掌握Python编程相关的知识，而且还能掌握利用Python处理各种与数据相关的问题。《Python入门经典:以解决计算问题为导向的Python编程实践》分为五部分，第一部分介绍计算机设备的一般概念和一些计算机术语；第二部分开始介绍编程的基本知识，包括入门知识和控制语句，为后续内容做铺垫；第三部分讲述数据结构和函数，包括字符串、列表和元组、字典和集合、文件、函数、算法和程序等进阶内容，有助于读者提升编程技能；第四部分重点介绍如何使用类定义数据结构和算法、开发程序等，培养读者运用Python语言来实现基本的计算思想和策略的能力；第五部分主要介绍异常、测试和递归，旨在使读者成为更好的程序员。《Python入门经典:以解决计算问题为导向的Python编程实践》深入浅出，每一章节均给出了大量的实例、示范代码和自测练习，便于读者理解和掌握相关知识。读者通过学习《Python入门经典:以解决计算问题为导向的Python编程实践》，不仅能掌握Python语言的基本知识，还能学习如何在实践中运用该语言解决问题。,机械工业出版社,79.00元
学习Python,|Mark Lutz,David Ascher|,|Python是流行、开源、面向对象的编程语言，既可以用于编写单机运行的程序也可以编写脚本程序，具有可移植、强大、易用等特点。跟随专业教师学习是最快捷的掌握此语言的方式。新版的《学习Python》把你带到Mark Lutz和David Ascher面前，他们是著名的Python专家和培训师，他们的用语亲切、组织良好的文章已经指导了许多编程者精通这种语言。
《学习Python（第二版）》给程序员提供了一个学习Python和面向对象编程的综合学习工具。它根据1999年该书第一版发布以来Python语言的大量变化做了更新。本书介绍了最近发布的Python 2.3的基本要素并涵盖了新的特性，如列表内涵，嵌套作用域和迭代器\/产生器。
除了语言特性，《学习Python（第二版）》还为初级程序员提供了新的内容，包括新的面向对象编程和动态类型回顾，新的关于编程起步和配置选项的讨论，新的关于文档的内容等等。全书用新的实例使得语言特性的应用更加具体。
《学习Python（第二版）》首先给出了理解和构造Python程序必需的所有信息，包括类型、运算符、表达式、类、函数、模块和异常。然后，作者给出了更高级的内容，通过真实的应用和可用扩展库说明如何用Python完成一般的任务。全书提供了练习以检验自己的新技能。
《学习Python（第二版）》是本可灵活选读的图书，它让读者能够集中深入Python语言的核心。随着通读全书，你将获得对Python深入而完整的理解，这将帮助你自己开发大型的应用程序。本书适合于任何不仅仅想停留于了解Python而且想更好地掌握它的人。
对本书第一版的褒奖：
“这本书最优之处是作者在提供有用的实例与详细解释说明之间取得近乎完美的平衡。无论你是有经验的计算机程序员还是初学者，这本书对于学习Python语言都是非常适合的。”
——Andrew Morrison, CedarLug|,东南大学出版社,68.00元
python绝技：运用python成为顶级黑客,[美] TJ O'Connor,|Python 是一门常用的编程语言，它不仅上手容易，而且还拥有丰富的支持库。对经常需要针对自己所 处的特定场景编写专用工具的黑客、计算机犯罪调查人员、渗透测试师和安全工程师来说，Python 的这些 特点可以帮助他们又快又好地完成这一任务，以极少的代码量实现所需的功能。《Python绝技：运用Python成为顶级黑客》结合具体的场景和真 实的案例，详述了 Python 在渗透测试、电子取证、网络流量分析、无线安全、网站中信息的自动抓取、 病毒免杀等领域内所发挥的巨大作用。
《Python绝技：运用Python成为顶级黑客》适合计算机安全管理人员、计算机犯罪调查和电子取证人员、渗透测试人员，以及所有对计算机 安全感兴趣的爱好者阅读。同时也可供计算机、信息安全及相关专业的本\/专科院校师生学习参考。|,电子工业出版社,79.00元
Expert Python Programming,Tarek Ziadé,|Python is a dynamic programming language, used in a wide range of domains by programmers who find it simple, yet powerful. From the earliest version 15 years ago to the current one, it has constantly evolved with productivity and code readability in mind.
Even if you find writing Python code easy, writing code that is efficient and easy to maintain and reuse is not so straightforward. This book will show you how to do just that:  it will show you how Python development should be done. Python expert Tarek Ziadé takes you on a practical tour of Python application development, beginning with setting up the best development environment, and along the way looking at agile methodologies in Python, and applying proven object-oriented principles to your design.|,Packt,45
"笨办法"学Python,肖 (Zed A.Shaw),|本书是一本Python入门书籍，适合对计算机了解不多，没有学过编程，但对编程感兴趣的读者学习使用。这本书以习题的方式引导读者一步一步学习编程，从简单的打印一直讲到完整项目的实现，让初学者从基础的编程技术入手，最终体验到软件开发的基本过程。
本书结构非常简单，共包括52个习题，其中26个覆盖了输入\/输出、变量和函数三个主题，另外26个覆盖了一些比较高级的话题，如条件判断、循环、类和对象、代码测试及项目的实现等。每一章的格式基本相同，以代码习题开始，按照说明编写代码，运行并检查结果，然后再做附加练习。
Zed Shaw完善了这个堪称世上最好的Python学习系统。只要跟着学习，你就会和迄今为止数十万Zed教过的初学者一样获得成功。
在这本书中，你将通过完成52个精心设计的习题来学会Python。阅读这些习题，把习题的代码精确地写出来（禁止复制和粘贴！），修正你的错误，观察程序的运行。在这个过程中，你将了解软件是如何工作的，好的程序看起来是什么样子，怎样阅读、编写、思考代码，以及如何用专业程序员的技巧来找出并修正错误。最重要的是，你将学到下面这些编写优秀的Python软件必需的初始技能。
这本书会让你的每一分钟投入都有回报。Python是世界上最强大、最受欢迎的编程语言之一，很快你就会成为一名Python程序员。
你还可以看Zed的视频！随书附赠的DVD中包含5个多小时激情挥洒的教学内容：一部完整的Python视频教程！|,人民邮电出版社,CNY 49.00
Effective Python,布雷特·斯拉特金（Brett Slatkin）,|用Python编写程序，是相当容易的，所以这门语言非常流行。但若想掌握Python所特有的优势、魅力和表达能力，则相当困难，而且语言中还有很多隐藏的陷阱，容易令开发者犯错。
本书可以帮你掌握真正的Pythonic编程方式，令你能够完全发挥出Python语言的强大功能，并写出健壮而高效的代码。Scott Meyers在畅销书《Effective C++》中开创了一种以使用场景为主导的精练教学方式，本书作者Brett Slatkin就以这种方式汇聚了59条优秀的实践原则、开发技巧和便捷方案，并以实用的代码范例来解释它们。
Slatkin根据自己在Google公司多年开发Python基础架构所积累的经验，揭示Python语言中一些鲜为人知的微妙特性，并给出了能够改善代码功能及运行效率的习惯用法。通过本书，你能够了解到解决关键编程任务所用的最佳方式，并学会编写易于理解、便于维护且利于改进的代码。
本书核心内容包括：
涵盖Python 3.x及Python 2.x主要应用领域的实用指南，以及与之配套的详细解释及代码范例。
与函数相关的编程建议，这些建议有助于我们写出意图清晰、便于复用且缺陷较少的函数。
如何准确地表达类与对象的行为。
在使用元类和动态属性时，如何避免错误的用法。
更为高效的并发及并行方式。
与Python内置模块相关的编程技巧和习惯用法。
多人协作时所用的开发工具和最佳实践方式。
旨在改善代码质量和程序性能的调试、测试与优化方案。|,机械工业出版社,59
A Byte of Python,Swaroop C H,|'A Byte of Python' is a book on programming using the Python language. It serves as a tutorial or guide to the Python language for a beginner audience. If all you know about computers is how to save text files, then this is the book for you.|,Lulu Marketplace,USD 27.98
Head First Python（中文版）,巴里（Barry.P.）,你想过可以通过一本书就学会Python吗？《Head First Python(中文版)》超越枯燥的语法和甩法手册，通过一种独特的方法教你学习这种语言。你会迅速掌握Python的基础知识，然后转向持久存储、异常处理、Web开发、SQLite、数据加工和lGoogle App Engine。你还将学习如何为Android编写移动应用，这都要归功于Python为你赋予的强大能力。本书会提供充分并且完备的学习体验，帮助你成为一名真正的Python程序员。    作者巴里觉得你的时间相当宝贵，不应当过多地花费在与新概念的纠缠之中。通过应用认知科学和学习理论的最新研究成果，《Head First Python(中文版)》可以让你投入一个需要多感官参与的学习体验，这本书采用丰富直观的形式使你的大脑真正开动起来，而不是长篇累牍地说教，让你昏昏欲睡。,中国电力出版社,68.00元
Python灰帽子,[美] Justin Seitz,《Python灰帽子》是由知名安全机构Immunity Inc的资深黑帽Justin Seitz主笔撰写的一本关于编程语言Python如何被广泛应用于黑客与逆向工程领域的书籍。老牌黑客，同时也是Immunity Inc的创始人兼首席技术执行官（CTO）Dave Aitel为这本书担任了技术编辑一职。书中绝大部分篇幅着眼于黑客技术领域中的两大经久不衰的话题：逆向工程与漏洞挖掘，并向读者呈现了几乎每个逆向工程师或安全研究人员在日常工作中所面临的各种场景，其中包括：如何设计与构建自己的调试工具，如何自动化实现烦琐的逆向分析任务，如何设计与构建自己的fuzzing工具，如何利用fuzzing 测试来找出存在于软件产品中的安全漏洞，一些小技巧诸如钩子与注入技术的应用，以及对一些主流Python安全工具如PyDbg、 Immunity Debugger、Sulley、IDAPython、PyEmu等的深入介绍。作者借助于如今黑客社区中备受青睐的编程语言 Python引领读者构建出精悍的脚本程序来一一应对上述这些问题。出现在书中的相当一部分Python代码实例借鉴或直接来源于一些优秀的开源安全项目，诸如Pedram Amini的Paimei，由此读者可以领略到安全研究者们是如何将黑客艺术与工程技术优雅融合来解决那些棘手问题的。,电子工业出版社,39.00元
Python网络编程基础,John Goerzen,《Python网络编程基础》可以作为各层次Python、Web和网络程序的开发人员的参考书，在实际工作中使用书中的技术，效果更佳。,电子工业出版社,68.00元
Python基础教程,Magnus Lie Hetland,本书是经典教程的全新改版，作者根据Python 3.0版本的种种变化，全面改写了书中内容，做到既能“瞻前”也能“顾后”。本书层次鲜明、结构严谨、内容翔实，特别是在最后几章，作者将前面讲述的内容应用到了10个引人入胜的项目中，并以模板的形式介绍了项目的开发过程。本书既适合初学者夯实基础，又能帮助Python程序员提升技能，即使是 Python方面的技术专家，也能从书里找到令你耳目一新的东西。,人民邮电出版社,69.00元
Python Algorithms,Magnus Lie Hetland,|Python Algorithms explains the Python approach to algorithm analysis and design. Written by Magnus Lie Hetland, author of Beginning Python, this book is sharply focused on classical algorithms, but it also gives a solid understanding of fundamental algorithmic problem-solving techniques. * The book deals with some of the most important and challenging areas of programming and computer science, but in a highly pedagogic and readable manner. * The book covers both algorithmic theory and programming practice, demonstrating how theory is reflected in real Python programs. * Well-known algorithms and data structures that are built into the Python language are explained, and the user is shown how to implement and evaluate others himself. What you'll learn * Transform new problems to well-known algorithmic problems with efficient solutions, or show that the problems belong to classes of problems thought not to be efficiently solvable. * Analyze algorithms and Python programs both using mathematical tools and basic experiments and benchmarks. * Prove correctness, optimality, or bounds on approximation error for Python programs and their underlying algorithms. * Understand several classical algorithms and data structures in depth, and be able to implement these efficiently in Python. * Design and implement new algorithms for new problems, using time-tested design principles and techniques. * Speed up implementations, using a plethora of tools for high-performance computing in Python. Who this book is for The book is intended for Python programmers who need to learn about algorithmic problem-solving, or who need a refresher. Students of computer science, or similar programming-related topics, such as bioinformatics, may also find the book to be quite useful. Table of Contents * Introduction * The Basics * Counting 101 * Induction and Recursion ...and Reduction * Traversal: The Skeleton Key of Algorithmics * Divide, Combine, and Conquer * Greed Is Good? Prove It! * Tangled Dependencies and Memoization * From A to B with Edsger and Friends * Matchings, Cuts, and Flows * Hard Problems and (Limited) Sloppiness|,Apress,USD 49.99
父与子的编程之旅,|桑德 (Warren Sande),桑德 (Carter Sande)|,|本书是一本家长与孩子共同学习编程的入门书。作者是一对父子，他们以Python语言为例，详尽细致地介绍了Python如何安装、字符串和操作符等程序设计的基本概念，介绍了条件语句、函数、模块等进阶内容，最后讲解了用Python实现游戏编程。书中的语言生动活泼，叙述简单明了。 为了让学习者觉得编程有趣，本书编排了很多卡通人物及场景对话，让学习者在轻松愉快之中跨入计算机编程的大门。
第 2 版新增内容
首先，我们来说说第 2 版中有哪些内容没有改变，那就是我们决定在第 2 版中继续使用 Python 2，而不是转换到 Python 3。我们会在第 1 章解释其中的原因。
下面是第 2 版与第 1 版的不同之处
增加了一些说明，解释 Python 2 和 Python 3 的区别。
第 12 章增加了一节关于 Python 字典的内容。
在第 20 章的 GUI 编程部分，我们将不再被支持的 PythonCard 换成了应用更广泛的 PyQt。PyQt 也用在第 22 章的 Hangman 程序和第 24 章的电子宠物程序中。
增加了第 25 章，用来详细解释第 10 章中的 Skier 程序。
增加了第 26 章，讲述在简单的对战游戏中，如何编写一个有人工智|,人民邮电出版社,CNY 69.00
利用Python进行数据分析,Wes McKinney,|【名人推荐】
“科学计算和数据分析社区已经等待这本书很多年了：大量具体的实践建议，以及大量综合应用方法。本书在未来几年里肯定会成为Python领域中技术计算的权威指南。”
——Fernando Pérez　加州大学伯克利分校 研究科学家， IPython的创始人之一
【内容简介】
还在苦苦寻觅用Python控制、处理、整理、分析结构化数据的完整课程？本书含有大量的实践案例，你将学会如何利用各种Python库（包括NumPy、pandas、matplotlib以及IPython等）高效地解决各式各样的数据分析问题。
由于作者Wes McKinney是pandas库的主要作者，所以本书也可以作为利用Python实现数据密集型应用的科学计算实践指南。本书适合刚刚接触Python的分析人员以及刚刚接触科学计算的Python程序员。
•将IPython这个交互式Shell作为你的首要开发环境。
•学习NumPy（Numerical Python）的基础和高级知识。
•从pandas库的数据分析工具开始。
•利用高性能工具对数据进行加载、清理、转换、合并以及重塑。
•利用matplotlib创建散点图以及静态或交互式的可视化结果。
•利用pandas的groupby功能对数据集进行切片、切块和汇总操作。
•处理各种各样的时间序列数据。
•通过详细的案例学习如何解决Web分析、社会科学、金融学以及经•济学等领域的问题。|,机械工业出版社,89.00
Python核心编程（第二版）,[美]Wesley J. Chun（陳仲才）,|本书是Python开发者的完全指南——针对 Python 2.5全面升级
·学习专业的Python风格、最佳实践和好的编程习惯；
·加强对Python对象、内存模型和Python面向对象特性的深入理解；
·构建更有效的Web、CGI、互联网、网络和其他客户端\/服务器架构应用程序及软件；
·学习如何使用Python中的Tkinter和其他工具来开发自己的GUI应用程序及软件；
·通过用C等语言编写扩展来提升Python应用程序的性能，或者通过使用多线程增强I\/0相关的应用程序的能力；
·学习Python中有关数据库的API，以及如何在Python中使用各种不同的数据库系统，包括MySQL、Postgres和 SQLite。|,人民邮电出版社,89.00元
贝叶斯思维,[美]Allen B. Downey（艾伦·唐尼）,|这本书帮助那些希望用数学工具解决实际问题的人们，仅有的要求可能就是懂一点概率知识和程序设计。而贝叶斯方法是一种常见的利用概率学知识去解决不确定性问题的数学方法，对于一个计算机专业的人士，应当熟悉其应用在诸如机器翻译，语音识别，垃圾邮件检测等常见的计算机问题领域。
可是本书实际上会远远扩大你的视野，即使不是一个计算机专业的人士，你也可以看到在战争环境下（二战德军坦克问题），法律问题上（肾肿瘤的假设验证），体育博彩领域（棕熊队和加人队NFL比赛问题）贝叶斯方法的威力。怎么从有限的信息判断德军装甲部队的规模，你所支持的球队有多大可能赢得冠军，在《龙与地下城》勇士中，你应当对游戏角色属性的最大值有什么样的期望，甚至在普通的彩弹射击游戏中，拥有一些贝叶斯思维也能帮助到你提高游戏水平。
除此以外，本书在共计15章的篇幅中讨论了怎样解决十几个现实生活中的实际问题。在这些问题的解决过程中，作者还潜移默化的帮助读者形成了建模决策的方法论，建模误差和数值误差怎么取舍，怎样为具体问题建立数学模型，如何抓住问题中的主要矛盾（模型中的关键参数），再一步一步的优化或者验证模型的有效性或者局限性。在这个意义上，这本书又是一本关于数学建模的成功样本。|,人民邮电出版社,49.00
Django Web开发指南,|Jeff Forcier,Paul Bissex|,本书讲述如何用Python框架Django构建出强大的Web解决方案，本书讲解了使用新的Django 1.0版的各种主要特性所需要的技术、工具以及概念。 全书分为12章和6个附录，内容包括，Django Python实战，Django速成：构建一个Blog，起始，定义和使用模型，URL、HTTP机制和视图，模板和表单处理，Photo Gallery，内容管理系统，Liveblog，Pastebin，高级Django编程，高级Django部署。附录内容包括命令行基础，安装运行Django，实用Django开发工具，发现、评估、使用Django应用程序，在Google App Engine上使用Django，参与Django项目。 本书适用于Python框架Django初学者，Django Web开发技术人员。,机械工业出版社,49.00元
Python源码剖析,陈儒,|作为主流的动态语言，Python不仅简单易学、移植性好，而且拥有强大丰富的库的支持。此外，Python强大的可扩展性，让开发人员既可以非常容易地利用C\/C++编写Python的扩展模块，还能将Python嵌入到C\/C++程序中，为自己的系统添加动态扩展和动态编程的能力。.
为了更好地利用Python语言，无论是使用Python语言本身，还是将Python与C\/C++交互使用，深刻理解Python的运行原理都是非常重要的。本书以CPython为研究对象，在C代码一级，深入细致地剖析了Python的实现。书中不仅包括了对大量Python内置对象的剖析，更将大量的篇幅用于对Python虚拟机及Python高级特性的剖析。通过此书，读者能够透彻地理解Python中的一般表达式、控制结构、异常机制、类机制、多线程机制、模块的动态加载机制、内存管理机制等核心技术的运行原理，同时，本书所揭示的动态语言的核心技术对于理解其他动态语言，如 Javascript、Ruby等也有较大的参考价值。..
本书适合于Python程序员、动态语言爱好者、C程序员阅读|,电子工业出版社,69.80元
Python学习手册,Mark Lutz,|《Python学习手册(第3版)》讲述了：Python可移植、功能强大、易于使用，是编写独立应用程序和脚本应用程序的理想选择。无论你是刚接触编程或者刚接触Python，通过学习《Python学习手册(第3版)》，你可以迅速高效地精通核心Python语言基础。读完《Python学习手册(第3版)》，你会对这门语言有足够的了解，从而可以在你所从事的任何应用领域中使用它。
《Python学习手册(第3版)》是作者根据过去10年用于教学而广为人知的培训课程的材料编写而成的。除了有许多详实说明和每章小结之外，每章还包括一个头脑风暴：这是《Python学习手册(第3版)》独特的一部分，配合以实用的练习题和复习题，让读者练习新学的技巧并测试自己的理解程度。
《Python学习手册(第3版)》包括：
类型和操作——深入讨论Python主要的内置对象类型：数字、列表和字典等。
语句和语法——在Python中输入代码来建立并处理对象，以及Python一般的语法模型。
函数——Python基本的面向过程工具，用于组织代码和重用。
模块——封装语句、函数以及其他工具，从而可以组织成较大的组件。
类和OOP——Python可选的面向对象编程工具，可用于组织程序代码从而实现定制和重用。
异常和工具——异常处理模型和语句，并介绍编写更大程序的开发工具。
讨论Python 3.0。
《Python学习手册(第3版)》让你对Python语言有深入而完整的了解，从而帮助你理解今后遇到的任何Python应用程序实例。如果你准备探索Google和YouTube为什么选中了Python，《Python学习手册(第3版)》就是你入门的最佳指南。|,机械工业出版社,89.00元
Python入门经典,(美)William F. Punch\/Richard Enbody,《Python入门经典:以解决计算问题为导向的Python编程实践》是一本系统而科学的Python入门教程，美国密歇根州立大学等多所美国知名高校采用其作为编程语言的入门教材，被奉为经典。它不仅从计算机教学和计算机科学的角度讲解了初学者如何才能更有效地去学习Python，而且特别强调用Python解决生活中的实际问题，精心组织了大量来源于生活中不同领域的与数值计算和数据处理相关的案例。通过《Python入门经典:以解决计算问题为导向的Python编程实践》，读者不仅能系统掌握Python编程相关的知识，而且还能掌握利用Python处理各种与数据相关的问题。《Python入门经典:以解决计算问题为导向的Python编程实践》分为五部分，第一部分介绍计算机设备的一般概念和一些计算机术语；第二部分开始介绍编程的基本知识，包括入门知识和控制语句，为后续内容做铺垫；第三部分讲述数据结构和函数，包括字符串、列表和元组、字典和集合、文件、函数、算法和程序等进阶内容，有助于读者提升编程技能；第四部分重点介绍如何使用类定义数据结构和算法、开发程序等，培养读者运用Python语言来实现基本的计算思想和策略的能力；第五部分主要介绍异常、测试和递归，旨在使读者成为更好的程序员。《Python入门经典:以解决计算问题为导向的Python编程实践》深入浅出，每一章节均给出了大量的实例、示范代码和自测练习，便于读者理解和掌握相关知识。读者通过学习《Python入门经典:以解决计算问题为导向的Python编程实践》，不仅能掌握Python语言的基本知识，还能学习如何在实践中运用该语言解决问题。,机械工业出版社,79.00元
学习Python,|Mark Lutz,David Ascher|,|Python是流行、开源、面向对象的编程语言，既可以用于编写单机运行的程序也可以编写脚本程序，具有可移植、强大、易用等特点。跟随专业教师学习是最快捷的掌握此语言的方式。新版的《学习Python》把你带到Mark Lutz和David Ascher面前，他们是著名的Python专家和培训师，他们的用语亲切、组织良好的文章已经指导了许多编程者精通这种语言。
《学习Python（第二版）》给程序员提供了一个学习Python和面向对象编程的综合学习工具。它根据1999年该书第一版发布以来Python语言的大量变化做了更新。本书介绍了最近发布的Python 2.3的基本要素并涵盖了新的特性，如列表内涵，嵌套作用域和迭代器\/产生器。
除了语言特性，《学习Python（第二版）》还为初级程序员提供了新的内容，包括新的面向对象编程和动态类型回顾，新的关于编程起步和配置选项的讨论，新的关于文档的内容等等。全书用新的实例使得语言特性的应用更加具体。
《学习Python（第二版）》首先给出了理解和构造Python程序必需的所有信息，包括类型、运算符、表达式、类、函数、模块和异常。然后，作者给出了更高级的内容，通过真实的应用和可用扩展库说明如何用Python完成一般的任务。全书提供了练习以检验自己的新技能。
《学习Python（第二版）》是本可灵活选读的图书，它让读者能够集中深入Python语言的核心。随着通读全书，你将获得对Python深入而完整的理解，这将帮助你自己开发大型的应用程序。本书适合于任何不仅仅想停留于了解Python而且想更好地掌握它的人。
对本书第一版的褒奖：
“这本书最优之处是作者在提供有用的实例与详细解释说明之间取得近乎完美的平衡。无论你是有经验的计算机程序员还是初学者，这本书对于学习Python语言都是非常适合的。”
——Andrew Morrison, CedarLug|,东南大学出版社,68.00元
python绝技：运用python成为顶级黑客,[美] TJ O'Connor,|Python 是一门常用的编程语言，它不仅上手容易，而且还拥有丰富的支持库。对经常需要针对自己所 处的特定场景编写专用工具的黑客、计算机犯罪调查人员、渗透测试师和安全工程师来说，Python 的这些 特点可以帮助他们又快又好地完成这一任务，以极少的代码量实现所需的功能。《Python绝技：运用Python成为顶级黑客》结合具体的场景和真 实的案例，详述了 Python 在渗透测试、电子取证、网络流量分析、无线安全、网站中信息的自动抓取、 病毒免杀等领域内所发挥的巨大作用。
《Python绝技：运用Python成为顶级黑客》适合计算机安全管理人员、计算机犯罪调查和电子取证人员、渗透测试人员，以及所有对计算机 安全感兴趣的爱好者阅读。同时也可供计算机、信息安全及相关专业的本\/专科院校师生学习参考。|,电子工业出版社,79.00元
Expert Python Programming,Tarek Ziadé,|Python is a dynamic programming language, used in a wide range of domains by programmers who find it simple, yet powerful. From the earliest version 15 years ago to the current one, it has constantly evolved with productivity and code readability in mind.
Even if you find writing Python code easy, writing code that is efficient and easy to maintain and reuse is not so straightforward. This book will show you how to do just that:  it will show you how Python development should be done. Python expert Tarek Ziadé takes you on a practical tour of Python application development, beginning with setting up the best development environment, and along the way looking at agile methodologies in Python, and applying proven object-oriented principles to your design.|,Packt,45
"笨办法"学Python,肖 (Zed A.Shaw),|本书是一本Python入门书籍，适合对计算机了解不多，没有学过编程，但对编程感兴趣的读者学习使用。这本书以习题的方式引导读者一步一步学习编程，从简单的打印一直讲到完整项目的实现，让初学者从基础的编程技术入手，最终体验到软件开发的基本过程。
本书结构非常简单，共包括52个习题，其中26个覆盖了输入\/输出、变量和函数三个主题，另外26个覆盖了一些比较高级的话题，如条件判断、循环、类和对象、代码测试及项目的实现等。每一章的格式基本相同，以代码习题开始，按照说明编写代码，运行并检查结果，然后再做附加练习。
Zed Shaw完善了这个堪称世上最好的Python学习系统。只要跟着学习，你就会和迄今为止数十万Zed教过的初学者一样获得成功。
在这本书中，你将通过完成52个精心设计的习题来学会Python。阅读这些习题，把习题的代码精确地写出来（禁止复制和粘贴！），修正你的错误，观察程序的运行。在这个过程中，你将了解软件是如何工作的，好的程序看起来是什么样子，怎样阅读、编写、思考代码，以及如何用专业程序员的技巧来找出并修正错误。最重要的是，你将学到下面这些编写优秀的Python软件必需的初始技能。
这本书会让你的每一分钟投入都有回报。Python是世界上最强大、最受欢迎的编程语言之一，很快你就会成为一名Python程序员。
你还可以看Zed的视频！随书附赠的DVD中包含5个多小时激情挥洒的教学内容：一部完整的Python视频教程！|,人民邮电出版社,CNY 49.00
Effective Python,布雷特·斯拉特金（Brett Slatkin）,|用Python编写程序，是相当容易的，所以这门语言非常流行。但若想掌握Python所特有的优势、魅力和表达能力，则相当困难，而且语言中还有很多隐藏的陷阱，容易令开发者犯错。
本书可以帮你掌握真正的Pythonic编程方式，令你能够完全发挥出Python语言的强大功能，并写出健壮而高效的代码。Scott Meyers在畅销书《Effective C++》中开创了一种以使用场景为主导的精练教学方式，本书作者Brett Slatkin就以这种方式汇聚了59条优秀的实践原则、开发技巧和便捷方案，并以实用的代码范例来解释它们。
Slatkin根据自己在Google公司多年开发Python基础架构所积累的经验，揭示Python语言中一些鲜为人知的微妙特性，并给出了能够改善代码功能及运行效率的习惯用法。通过本书，你能够了解到解决关键编程任务所用的最佳方式，并学会编写易于理解、便于维护且利于改进的代码。
本书核心内容包括：
涵盖Python 3.x及Python 2.x主要应用领域的实用指南，以及与之配套的详细解释及代码范例。
与函数相关的编程建议，这些建议有助于我们写出意图清晰、便于复用且缺陷较少的函数。
如何准确地表达类与对象的行为。
在使用元类和动态属性时，如何避免错误的用法。
更为高效的并发及并行方式。
与Python内置模块相关的编程技巧和习惯用法。
多人协作时所用的开发工具和最佳实践方式。
旨在改善代码质量和程序性能的调试、测试与优化方案。|,机械工业出版社,59
Python语言及其应用,[美] Bill Lubanovic,本书介绍Python 语言的基础知识及其在各个领域的具体应用，基于最新版本3.x。书中首先介绍了Python 语言的一些必备基本知识，然后介绍了在商业、科研以及艺术领域使用Python 开发各种应用的实例。文字简洁明了，案例丰富实用，是一本难得的Python 入门手册。,人民邮电出版社,79.00元
Head First Python（中文版）,巴里（Barry.P.）,你想过可以通过一本书就学会Python吗？《Head First Python(中文版)》超越枯燥的语法和甩法手册，通过一种独特的方法教你学习这种语言。你会迅速掌握Python的基础知识，然后转向持久存储、异常处理、Web开发、SQLite、数据加工和lGoogle App Engine。你还将学习如何为Android编写移动应用，这都要归功于Python为你赋予的强大能力。本书会提供充分并且完备的学习体验，帮助你成为一名真正的Python程序员。    作者巴里觉得你的时间相当宝贵，不应当过多地花费在与新概念的纠缠之中。通过应用认知科学和学习理论的最新研究成果，《Head First Python(中文版)》可以让你投入一个需要多感官参与的学习体验，这本书采用丰富直观的形式使你的大脑真正开动起来，而不是长篇累牍地说教，让你昏昏欲睡。,中国电力出版社,68.00元
Python灰帽子,[美] Justin Seitz,《Python灰帽子》是由知名安全机构Immunity Inc的资深黑帽Justin Seitz主笔撰写的一本关于编程语言Python如何被广泛应用于黑客与逆向工程领域的书籍。老牌黑客，同时也是Immunity Inc的创始人兼首席技术执行官（CTO）Dave Aitel为这本书担任了技术编辑一职。书中绝大部分篇幅着眼于黑客技术领域中的两大经久不衰的话题：逆向工程与漏洞挖掘，并向读者呈现了几乎每个逆向工程师或安全研究人员在日常工作中所面临的各种场景，其中包括：如何设计与构建自己的调试工具，如何自动化实现烦琐的逆向分析任务，如何设计与构建自己的fuzzing工具，如何利用fuzzing 测试来找出存在于软件产品中的安全漏洞，一些小技巧诸如钩子与注入技术的应用，以及对一些主流Python安全工具如PyDbg、 Immunity Debugger、Sulley、IDAPython、PyEmu等的深入介绍。作者借助于如今黑客社区中备受青睐的编程语言 Python引领读者构建出精悍的脚本程序来一一应对上述这些问题。出现在书中的相当一部分Python代码实例借鉴或直接来源于一些优秀的开源安全项目，诸如Pedram Amini的Paimei，由此读者可以领略到安全研究者们是如何将黑客艺术与工程技术优雅融合来解决那些棘手问题的。,电子工业出版社,39.00元
Python网络编程基础,John Goerzen,《Python网络编程基础》可以作为各层次Python、Web和网络程序的开发人员的参考书，在实际工作中使用书中的技术，效果更佳。,电子工业出版社,68.00元
Python基础教程,Magnus Lie Hetland,本书是经典教程的全新改版，作者根据Python 3.0版本的种种变化，全面改写了书中内容，做到既能“瞻前”也能“顾后”。本书层次鲜明、结构严谨、内容翔实，特别是在最后几章，作者将前面讲述的内容应用到了10个引人入胜的项目中，并以模板的形式介绍了项目的开发过程。本书既适合初学者夯实基础，又能帮助Python程序员提升技能，即使是 Python方面的技术专家，也能从书里找到令你耳目一新的东西。,人民邮电出版社,69.00元
Python Algorithms,Magnus Lie Hetland,|Python Algorithms explains the Python approach to algorithm analysis and design. Written by Magnus Lie Hetland, author of Beginning Python, this book is sharply focused on classical algorithms, but it also gives a solid understanding of fundamental algorithmic problem-solving techniques. * The book deals with some of the most important and challenging areas of programming and computer science, but in a highly pedagogic and readable manner. * The book covers both algorithmic theory and programming practice, demonstrating how theory is reflected in real Python programs. * Well-known algorithms and data structures that are built into the Python language are explained, and the user is shown how to implement and evaluate others himself. What you'll learn * Transform new problems to well-known algorithmic problems with efficient solutions, or show that the problems belong to classes of problems thought not to be efficiently solvable. * Analyze algorithms and Python programs both using mathematical tools and basic experiments and benchmarks. * Prove correctness, optimality, or bounds on approximation error for Python programs and their underlying algorithms. * Understand several classical algorithms and data structures in depth, and be able to implement these efficiently in Python. * Design and implement new algorithms for new problems, using time-tested design principles and techniques. * Speed up implementations, using a plethora of tools for high-performance computing in Python. Who this book is for The book is intended for Python programmers who need to learn about algorithmic problem-solving, or who need a refresher. Students of computer science, or similar programming-related topics, such as bioinformatics, may also find the book to be quite useful. Table of Contents * Introduction * The Basics * Counting 101 * Induction and Recursion ...and Reduction * Traversal: The Skeleton Key of Algorithmics * Divide, Combine, and Conquer * Greed Is Good? Prove It! * Tangled Dependencies and Memoization * From A to B with Edsger and Friends * Matchings, Cuts, and Flows * Hard Problems and (Limited) Sloppiness|,Apress,USD 49.99
父与子的编程之旅,|桑德 (Warren Sande),桑德 (Carter Sande)|,|本书是一本家长与孩子共同学习编程的入门书。作者是一对父子，他们以Python语言为例，详尽细致地介绍了Python如何安装、字符串和操作符等程序设计的基本概念，介绍了条件语句、函数、模块等进阶内容，最后讲解了用Python实现游戏编程。书中的语言生动活泼，叙述简单明了。 为了让学习者觉得编程有趣，本书编排了很多卡通人物及场景对话，让学习者在轻松愉快之中跨入计算机编程的大门。
第 2 版新增内容
首先，我们来说说第 2 版中有哪些内容没有改变，那就是我们决定在第 2 版中继续使用 Python 2，而不是转换到 Python 3。我们会在第 1 章解释其中的原因。
下面是第 2 版与第 1 版的不同之处
增加了一些说明，解释 Python 2 和 Python 3 的区别。
第 12 章增加了一节关于 Python 字典的内容。
在第 20 章的 GUI 编程部分，我们将不再被支持的 PythonCard 换成了应用更广泛的 PyQt。PyQt 也用在第 22 章的 Hangman 程序和第 24 章的电子宠物程序中。
增加了第 25 章，用来详细解释第 10 章中的 Skier 程序。
增加了第 26 章，讲述在简单的对战游戏中，如何编写一个有人工智|,人民邮电出版社,CNY 69.00
利用Python进行数据分析,Wes McKinney,|【名人推荐】
“科学计算和数据分析社区已经等待这本书很多年了：大量具体的实践建议，以及大量综合应用方法。本书在未来几年里肯定会成为Python领域中技术计算的权威指南。”
——Fernando Pérez　加州大学伯克利分校 研究科学家， IPython的创始人之一
【内容简介】
还在苦苦寻觅用Python控制、处理、整理、分析结构化数据的完整课程？本书含有大量的实践案例，你将学会如何利用各种Python库（包括NumPy、pandas、matplotlib以及IPython等）高效地解决各式各样的数据分析问题。
由于作者Wes McKinney是pandas库的主要作者，所以本书也可以作为利用Python实现数据密集型应用的科学计算实践指南。本书适合刚刚接触Python的分析人员以及刚刚接触科学计算的Python程序员。
•将IPython这个交互式Shell作为你的首要开发环境。
•学习NumPy（Numerical Python）的基础和高级知识。
•从pandas库的数据分析工具开始。
•利用高性能工具对数据进行加载、清理、转换、合并以及重塑。
•利用matplotlib创建散点图以及静态或交互式的可视化结果。
•利用pandas的groupby功能对数据集进行切片、切块和汇总操作。
•处理各种各样的时间序列数据。
•通过详细的案例学习如何解决Web分析、社会科学、金融学以及经•济学等领域的问题。|,机械工业出版社,89.00
Python核心编程（第二版）,[美]Wesley J. Chun（陳仲才）,|本书是Python开发者的完全指南——针对 Python 2.5全面升级
·学习专业的Python风格、最佳实践和好的编程习惯；
·加强对Python对象、内存模型和Python面向对象特性的深入理解；
·构建更有效的Web、CGI、互联网、网络和其他客户端\/服务器架构应用程序及软件；
·学习如何使用Python中的Tkinter和其他工具来开发自己的GUI应用程序及软件；
·通过用C等语言编写扩展来提升Python应用程序的性能，或者通过使用多线程增强I\/0相关的应用程序的能力；
·学习Python中有关数据库的API，以及如何在Python中使用各种不同的数据库系统，包括MySQL、Postgres和 SQLite。|,人民邮电出版社,89.00元
贝叶斯思维,[美]Allen B. Downey（艾伦·唐尼）,|这本书帮助那些希望用数学工具解决实际问题的人们，仅有的要求可能就是懂一点概率知识和程序设计。而贝叶斯方法是一种常见的利用概率学知识去解决不确定性问题的数学方法，对于一个计算机专业的人士，应当熟悉其应用在诸如机器翻译，语音识别，垃圾邮件检测等常见的计算机问题领域。
可是本书实际上会远远扩大你的视野，即使不是一个计算机专业的人士，你也可以看到在战争环境下（二战德军坦克问题），法律问题上（肾肿瘤的假设验证），体育博彩领域（棕熊队和加人队NFL比赛问题）贝叶斯方法的威力。怎么从有限的信息判断德军装甲部队的规模，你所支持的球队有多大可能赢得冠军，在《龙与地下城》勇士中，你应当对游戏角色属性的最大值有什么样的期望，甚至在普通的彩弹射击游戏中，拥有一些贝叶斯思维也能帮助到你提高游戏水平。
除此以外，本书在共计15章的篇幅中讨论了怎样解决十几个现实生活中的实际问题。在这些问题的解决过程中，作者还潜移默化的帮助读者形成了建模决策的方法论，建模误差和数值误差怎么取舍，怎样为具体问题建立数学模型，如何抓住问题中的主要矛盾（模型中的关键参数），再一步一步的优化或者验证模型的有效性或者局限性。在这个意义上，这本书又是一本关于数学建模的成功样本。|,人民邮电出版社,49.00
Django Web开发指南,|Jeff Forcier,Paul Bissex|,本书讲述如何用Python框架Django构建出强大的Web解决方案，本书讲解了使用新的Django 1.0版的各种主要特性所需要的技术、工具以及概念。 全书分为12章和6个附录，内容包括，Django Python实战，Django速成：构建一个Blog，起始，定义和使用模型，URL、HTTP机制和视图，模板和表单处理，Photo Gallery，内容管理系统，Liveblog，Pastebin，高级Django编程，高级Django部署。附录内容包括命令行基础，安装运行Django，实用Django开发工具，发现、评估、使用Django应用程序，在Google App Engine上使用Django，参与Django项目。 本书适用于Python框架Django初学者，Django Web开发技术人员。,机械工业出版社,49.00元
Python源码剖析,陈儒,|作为主流的动态语言，Python不仅简单易学、移植性好，而且拥有强大丰富的库的支持。此外，Python强大的可扩展性，让开发人员既可以非常容易地利用C\/C++编写Python的扩展模块，还能将Python嵌入到C\/C++程序中，为自己的系统添加动态扩展和动态编程的能力。.
为了更好地利用Python语言，无论是使用Python语言本身，还是将Python与C\/C++交互使用，深刻理解Python的运行原理都是非常重要的。本书以CPython为研究对象，在C代码一级，深入细致地剖析了Python的实现。书中不仅包括了对大量Python内置对象的剖析，更将大量的篇幅用于对Python虚拟机及Python高级特性的剖析。通过此书，读者能够透彻地理解Python中的一般表达式、控制结构、异常机制、类机制、多线程机制、模块的动态加载机制、内存管理机制等核心技术的运行原理，同时，本书所揭示的动态语言的核心技术对于理解其他动态语言，如 Javascript、Ruby等也有较大的参考价值。..
本书适合于Python程序员、动态语言爱好者、C程序员阅读|,电子工业出版社,69.80元
Python学习手册,Mark Lutz,|《Python学习手册(第3版)》讲述了：Python可移植、功能强大、易于使用，是编写独立应用程序和脚本应用程序的理想选择。无论你是刚接触编程或者刚接触Python，通过学习《Python学习手册(第3版)》，你可以迅速高效地精通核心Python语言基础。读完《Python学习手册(第3版)》，你会对这门语言有足够的了解，从而可以在你所从事的任何应用领域中使用它。
《Python学习手册(第3版)》是作者根据过去10年用于教学而广为人知的培训课程的材料编写而成的。除了有许多详实说明和每章小结之外，每章还包括一个头脑风暴：这是《Python学习手册(第3版)》独特的一部分，配合以实用的练习题和复习题，让读者练习新学的技巧并测试自己的理解程度。
《Python学习手册(第3版)》包括：
类型和操作——深入讨论Python主要的内置对象类型：数字、列表和字典等。
语句和语法——在Python中输入代码来建立并处理对象，以及Python一般的语法模型。
函数——Python基本的面向过程工具，用于组织代码和重用。
模块——封装语句、函数以及其他工具，从而可以组织成较大的组件。
类和OOP——Python可选的面向对象编程工具，可用于组织程序代码从而实现定制和重用。
异常和工具——异常处理模型和语句，并介绍编写更大程序的开发工具。
讨论Python 3.0。
《Python学习手册(第3版)》让你对Python语言有深入而完整的了解，从而帮助你理解今后遇到的任何Python应用程序实例。如果你准备探索Google和YouTube为什么选中了Python，《Python学习手册(第3版)》就是你入门的最佳指南。|,机械工业出版社,89.00元
Python入门经典,(美)William F. Punch\/Richard Enbody,《Python入门经典:以解决计算问题为导向的Python编程实践》是一本系统而科学的Python入门教程，美国密歇根州立大学等多所美国知名高校采用其作为编程语言的入门教材，被奉为经典。它不仅从计算机教学和计算机科学的角度讲解了初学者如何才能更有效地去学习Python，而且特别强调用Python解决生活中的实际问题，精心组织了大量来源于生活中不同领域的与数值计算和数据处理相关的案例。通过《Python入门经典:以解决计算问题为导向的Python编程实践》，读者不仅能系统掌握Python编程相关的知识，而且还能掌握利用Python处理各种与数据相关的问题。《Python入门经典:以解决计算问题为导向的Python编程实践》分为五部分，第一部分介绍计算机设备的一般概念和一些计算机术语；第二部分开始介绍编程的基本知识，包括入门知识和控制语句，为后续内容做铺垫；第三部分讲述数据结构和函数，包括字符串、列表和元组、字典和集合、文件、函数、算法和程序等进阶内容，有助于读者提升编程技能；第四部分重点介绍如何使用类定义数据结构和算法、开发程序等，培养读者运用Python语言来实现基本的计算思想和策略的能力；第五部分主要介绍异常、测试和递归，旨在使读者成为更好的程序员。《Python入门经典:以解决计算问题为导向的Python编程实践》深入浅出，每一章节均给出了大量的实例、示范代码和自测练习，便于读者理解和掌握相关知识。读者通过学习《Python入门经典:以解决计算问题为导向的Python编程实践》，不仅能掌握Python语言的基本知识，还能学习如何在实践中运用该语言解决问题。,机械工业出版社,79.00元
学习Python,|Mark Lutz,David Ascher|,|Python是流行、开源、面向对象的编程语言，既可以用于编写单机运行的程序也可以编写脚本程序，具有可移植、强大、易用等特点。跟随专业教师学习是最快捷的掌握此语言的方式。新版的《学习Python》把你带到Mark Lutz和David Ascher面前，他们是著名的Python专家和培训师，他们的用语亲切、组织良好的文章已经指导了许多编程者精通这种语言。
《学习Python（第二版）》给程序员提供了一个学习Python和面向对象编程的综合学习工具。它根据1999年该书第一版发布以来Python语言的大量变化做了更新。本书介绍了最近发布的Python 2.3的基本要素并涵盖了新的特性，如列表内涵，嵌套作用域和迭代器\/产生器。
除了语言特性，《学习Python（第二版）》还为初级程序员提供了新的内容，包括新的面向对象编程和动态类型回顾，新的关于编程起步和配置选项的讨论，新的关于文档的内容等等。全书用新的实例使得语言特性的应用更加具体。
《学习Python（第二版）》首先给出了理解和构造Python程序必需的所有信息，包括类型、运算符、表达式、类、函数、模块和异常。然后，作者给出了更高级的内容，通过真实的应用和可用扩展库说明如何用Python完成一般的任务。全书提供了练习以检验自己的新技能。
《学习Python（第二版）》是本可灵活选读的图书，它让读者能够集中深入Python语言的核心。随着通读全书，你将获得对Python深入而完整的理解，这将帮助你自己开发大型的应用程序。本书适合于任何不仅仅想停留于了解Python而且想更好地掌握它的人。
对本书第一版的褒奖：
“这本书最优之处是作者在提供有用的实例与详细解释说明之间取得近乎完美的平衡。无论你是有经验的计算机程序员还是初学者，这本书对于学习Python语言都是非常适合的。”
——Andrew Morrison, CedarLug|,东南大学出版社,68.00元
python绝技：运用python成为顶级黑客,[美] TJ O'Connor,|Python 是一门常用的编程语言，它不仅上手容易，而且还拥有丰富的支持库。对经常需要针对自己所 处的特定场景编写专用工具的黑客、计算机犯罪调查人员、渗透测试师和安全工程师来说，Python 的这些 特点可以帮助他们又快又好地完成这一任务，以极少的代码量实现所需的功能。《Python绝技：运用Python成为顶级黑客》结合具体的场景和真 实的案例，详述了 Python 在渗透测试、电子取证、网络流量分析、无线安全、网站中信息的自动抓取、 病毒免杀等领域内所发挥的巨大作用。
《Python绝技：运用Python成为顶级黑客》适合计算机安全管理人员、计算机犯罪调查和电子取证人员、渗透测试人员，以及所有对计算机 安全感兴趣的爱好者阅读。同时也可供计算机、信息安全及相关专业的本\/专科院校师生学习参考。|,电子工业出版社,79.00元
Expert Python Programming,Tarek Ziadé,|Python is a dynamic programming language, used in a wide range of domains by programmers who find it simple, yet powerful. From the earliest version 15 years ago to the current one, it has constantly evolved with productivity and code readability in mind.
Even if you find writing Python code easy, writing code that is efficient and easy to maintain and reuse is not so straightforward. This book will show you how to do just that:  it will show you how Python development should be done. Python expert Tarek Ziadé takes you on a practical tour of Python application development, beginning with setting up the best development environment, and along the way looking at agile methodologies in Python, and applying proven object-oriented principles to your design.|,Packt,45
"笨办法"学Python,肖 (Zed A.Shaw),|本书是一本Python入门书籍，适合对计算机了解不多，没有学过编程，但对编程感兴趣的读者学习使用。这本书以习题的方式引导读者一步一步学习编程，从简单的打印一直讲到完整项目的实现，让初学者从基础的编程技术入手，最终体验到软件开发的基本过程。
本书结构非常简单，共包括52个习题，其中26个覆盖了输入\/输出、变量和函数三个主题，另外26个覆盖了一些比较高级的话题，如条件判断、循环、类和对象、代码测试及项目的实现等。每一章的格式基本相同，以代码习题开始，按照说明编写代码，运行并检查结果，然后再做附加练习。
Zed Shaw完善了这个堪称世上最好的Python学习系统。只要跟着学习，你就会和迄今为止数十万Zed教过的初学者一样获得成功。
在这本书中，你将通过完成52个精心设计的习题来学会Python。阅读这些习题，把习题的代码精确地写出来（禁止复制和粘贴！），修正你的错误，观察程序的运行。在这个过程中，你将了解软件是如何工作的，好的程序看起来是什么样子，怎样阅读、编写、思考代码，以及如何用专业程序员的技巧来找出并修正错误。最重要的是，你将学到下面这些编写优秀的Python软件必需的初始技能。
这本书会让你的每一分钟投入都有回报。Python是世界上最强大、最受欢迎的编程语言之一，很快你就会成为一名Python程序员。
你还可以看Zed的视频！随书附赠的DVD中包含5个多小时激情挥洒的教学内容：一部完整的Python视频教程！|,人民邮电出版社,CNY 49.00
Effective Python,布雷特·斯拉特金（Brett Slatkin）,|用Python编写程序，是相当容易的，所以这门语言非常流行。但若想掌握Python所特有的优势、魅力和表达能力，则相当困难，而且语言中还有很多隐藏的陷阱，容易令开发者犯错。
本书可以帮你掌握真正的Pythonic编程方式，令你能够完全发挥出Python语言的强大功能，并写出健壮而高效的代码。Scott Meyers在畅销书《Effective C++》中开创了一种以使用场景为主导的精练教学方式，本书作者Brett Slatkin就以这种方式汇聚了59条优秀的实践原则、开发技巧和便捷方案，并以实用的代码范例来解释它们。
Slatkin根据自己在Google公司多年开发Python基础架构所积累的经验，揭示Python语言中一些鲜为人知的微妙特性，并给出了能够改善代码功能及运行效率的习惯用法。通过本书，你能够了解到解决关键编程任务所用的最佳方式，并学会编写易于理解、便于维护且利于改进的代码。
本书核心内容包括：
涵盖Python 3.x及Python 2.x主要应用领域的实用指南，以及与之配套的详细解释及代码范例。
与函数相关的编程建议，这些建议有助于我们写出意图清晰、便于复用且缺陷较少的函数。
如何准确地表达类与对象的行为。
在使用元类和动态属性时，如何避免错误的用法。
更为高效的并发及并行方式。
与Python内置模块相关的编程技巧和习惯用法。
多人协作时所用的开发工具和最佳实践方式。
旨在改善代码质量和程序性能的调试、测试与优化方案。|,机械工业出版社,59
Python语言及其应用,[美] Bill Lubanovic,本书介绍Python 语言的基础知识及其在各个领域的具体应用，基于最新版本3.x。书中首先介绍了Python 语言的一些必备基本知识，然后介绍了在商业、科研以及艺术领域使用Python 开发各种应用的实例。文字简洁明了，案例丰富实用，是一本难得的Python 入门手册。,人民邮电出版社,79.00元
Python Cookbook,|Alex Martelli,Anna Ravenscroft,David Ascher|,|本书介绍了Python应用在各个领域中的一些使用技巧和方法，从最基本的字符、文件序列、字典和排序，到进阶的面向对象编程、数据库和数据持久化、 XML处理和Web编程，再到比较高级和抽象的描述符、装饰器、元类、迭代器和生成器，均有涉及。书中还介绍了一些第三方包和库的使用，包括 Twisted、GIL、PyWin32等。本书覆盖了Python应用中的很多常见问题，并提出了通用的解决方案。书中的代码和方法具有很强的实用性，可以方便地应用到实际的项目中，并产生立竿见影的效果。尤为难得的是，本书的各位作者都具有丰富的业界实践经验，因此，本书不仅给出了对各种问题的解决方案，同时还体现了很多专家的思维方式和良好的编程习惯，与具体的细节性知识相比，这部分内容无疑是本书的精华。
本书适合具有一定Python基础的读者阅读参考。|,人民邮电出版社,99.00元
Python灰帽子,[美] Justin Seitz,《Python灰帽子》是由知名安全机构Immunity Inc的资深黑帽Justin Seitz主笔撰写的一本关于编程语言Python如何被广泛应用于黑客与逆向工程领域的书籍。老牌黑客，同时也是Immunity Inc的创始人兼首席技术执行官（CTO）Dave Aitel为这本书担任了技术编辑一职。书中绝大部分篇幅着眼于黑客技术领域中的两大经久不衰的话题：逆向工程与漏洞挖掘，并向读者呈现了几乎每个逆向工程师或安全研究人员在日常工作中所面临的各种场景，其中包括：如何设计与构建自己的调试工具，如何自动化实现烦琐的逆向分析任务，如何设计与构建自己的fuzzing工具，如何利用fuzzing 测试来找出存在于软件产品中的安全漏洞，一些小技巧诸如钩子与注入技术的应用，以及对一些主流Python安全工具如PyDbg、 Immunity Debugger、Sulley、IDAPython、PyEmu等的深入介绍。作者借助于如今黑客社区中备受青睐的编程语言 Python引领读者构建出精悍的脚本程序来一一应对上述这些问题。出现在书中的相当一部分Python代码实例借鉴或直接来源于一些优秀的开源安全项目，诸如Pedram Amini的Paimei，由此读者可以领略到安全研究者们是如何将黑客艺术与工程技术优雅融合来解决那些棘手问题的。,电子工业出版社,39.00元
Python网络编程基础,John Goerzen,《Python网络编程基础》可以作为各层次Python、Web和网络程序的开发人员的参考书，在实际工作中使用书中的技术，效果更佳。,电子工业出版社,68.00元
Python基础教程,Magnus Lie Hetland,本书是经典教程的全新改版，作者根据Python 3.0版本的种种变化，全面改写了书中内容，做到既能“瞻前”也能“顾后”。本书层次鲜明、结构严谨、内容翔实，特别是在最后几章，作者将前面讲述的内容应用到了10个引人入胜的项目中，并以模板的形式介绍了项目的开发过程。本书既适合初学者夯实基础，又能帮助Python程序员提升技能，即使是 Python方面的技术专家，也能从书里找到令你耳目一新的东西。,人民邮电出版社,69.00元
Python Algorithms,Magnus Lie Hetland,|Python Algorithms explains the Python approach to algorithm analysis and design. Written by Magnus Lie Hetland, author of Beginning Python, this book is sharply focused on classical algorithms, but it also gives a solid understanding of fundamental algorithmic problem-solving techniques. * The book deals with some of the most important and challenging areas of programming and computer science, but in a highly pedagogic and readable manner. * The book covers both algorithmic theory and programming practice, demonstrating how theory is reflected in real Python programs. * Well-known algorithms and data structures that are built into the Python language are explained, and the user is shown how to implement and evaluate others himself. What you'll learn * Transform new problems to well-known algorithmic problems with efficient solutions, or show that the problems belong to classes of problems thought not to be efficiently solvable. * Analyze algorithms and Python programs both using mathematical tools and basic experiments and benchmarks. * Prove correctness, optimality, or bounds on approximation error for Python programs and their underlying algorithms. * Understand several classical algorithms and data structures in depth, and be able to implement these efficiently in Python. * Design and implement new algorithms for new problems, using time-tested design principles and techniques. * Speed up implementations, using a plethora of tools for high-performance computing in Python. Who this book is for The book is intended for Python programmers who need to learn about algorithmic problem-solving, or who need a refresher. Students of computer science, or similar programming-related topics, such as bioinformatics, may also find the book to be quite useful. Table of Contents * Introduction * The Basics * Counting 101 * Induction and Recursion ...and Reduction * Traversal: The Skeleton Key of Algorithmics * Divide, Combine, and Conquer * Greed Is Good? Prove It! * Tangled Dependencies and Memoization * From A to B with Edsger and Friends * Matchings, Cuts, and Flows * Hard Problems and (Limited) Sloppiness|,Apress,USD 49.99
父与子的编程之旅,|桑德 (Warren Sande),桑德 (Carter Sande)|,|本书是一本家长与孩子共同学习编程的入门书。作者是一对父子，他们以Python语言为例，详尽细致地介绍了Python如何安装、字符串和操作符等程序设计的基本概念，介绍了条件语句、函数、模块等进阶内容，最后讲解了用Python实现游戏编程。书中的语言生动活泼，叙述简单明了。 为了让学习者觉得编程有趣，本书编排了很多卡通人物及场景对话，让学习者在轻松愉快之中跨入计算机编程的大门。
第 2 版新增内容
首先，我们来说说第 2 版中有哪些内容没有改变，那就是我们决定在第 2 版中继续使用 Python 2，而不是转换到 Python 3。我们会在第 1 章解释其中的原因。
下面是第 2 版与第 1 版的不同之处
增加了一些说明，解释 Python 2 和 Python 3 的区别。
第 12 章增加了一节关于 Python 字典的内容。
在第 20 章的 GUI 编程部分，我们将不再被支持的 PythonCard 换成了应用更广泛的 PyQt。PyQt 也用在第 22 章的 Hangman 程序和第 24 章的电子宠物程序中。
增加了第 25 章，用来详细解释第 10 章中的 Skier 程序。
增加了第 26 章，讲述在简单的对战游戏中，如何编写一个有人工智|,人民邮电出版社,CNY 69.00
利用Python进行数据分析,Wes McKinney,|【名人推荐】
“科学计算和数据分析社区已经等待这本书很多年了：大量具体的实践建议，以及大量综合应用方法。本书在未来几年里肯定会成为Python领域中技术计算的权威指南。”
——Fernando Pérez　加州大学伯克利分校 研究科学家， IPython的创始人之一
【内容简介】
还在苦苦寻觅用Python控制、处理、整理、分析结构化数据的完整课程？本书含有大量的实践案例，你将学会如何利用各种Python库（包括NumPy、pandas、matplotlib以及IPython等）高效地解决各式各样的数据分析问题。
由于作者Wes McKinney是pandas库的主要作者，所以本书也可以作为利用Python实现数据密集型应用的科学计算实践指南。本书适合刚刚接触Python的分析人员以及刚刚接触科学计算的Python程序员。
•将IPython这个交互式Shell作为你的首要开发环境。
•学习NumPy（Numerical Python）的基础和高级知识。
•从pandas库的数据分析工具开始。
•利用高性能工具对数据进行加载、清理、转换、合并以及重塑。
•利用matplotlib创建散点图以及静态或交互式的可视化结果。
•利用pandas的groupby功能对数据集进行切片、切块和汇总操作。
•处理各种各样的时间序列数据。
•通过详细的案例学习如何解决Web分析、社会科学、金融学以及经•济学等领域的问题。|,机械工业出版社,89.00
Python核心编程（第二版）,[美]Wesley J. Chun（陳仲才）,|本书是Python开发者的完全指南——针对 Python 2.5全面升级
·学习专业的Python风格、最佳实践和好的编程习惯；
·加强对Python对象、内存模型和Python面向对象特性的深入理解；
·构建更有效的Web、CGI、互联网、网络和其他客户端\/服务器架构应用程序及软件；
·学习如何使用Python中的Tkinter和其他工具来开发自己的GUI应用程序及软件；
·通过用C等语言编写扩展来提升Python应用程序的性能，或者通过使用多线程增强I\/0相关的应用程序的能力；
·学习Python中有关数据库的API，以及如何在Python中使用各种不同的数据库系统，包括MySQL、Postgres和 SQLite。|,人民邮电出版社,89.00元
贝叶斯思维,[美]Allen B. Downey（艾伦·唐尼）,|这本书帮助那些希望用数学工具解决实际问题的人们，仅有的要求可能就是懂一点概率知识和程序设计。而贝叶斯方法是一种常见的利用概率学知识去解决不确定性问题的数学方法，对于一个计算机专业的人士，应当熟悉其应用在诸如机器翻译，语音识别，垃圾邮件检测等常见的计算机问题领域。
可是本书实际上会远远扩大你的视野，即使不是一个计算机专业的人士，你也可以看到在战争环境下（二战德军坦克问题），法律问题上（肾肿瘤的假设验证），体育博彩领域（棕熊队和加人队NFL比赛问题）贝叶斯方法的威力。怎么从有限的信息判断德军装甲部队的规模，你所支持的球队有多大可能赢得冠军，在《龙与地下城》勇士中，你应当对游戏角色属性的最大值有什么样的期望，甚至在普通的彩弹射击游戏中，拥有一些贝叶斯思维也能帮助到你提高游戏水平。
除此以外，本书在共计15章的篇幅中讨论了怎样解决十几个现实生活中的实际问题。在这些问题的解决过程中，作者还潜移默化的帮助读者形成了建模决策的方法论，建模误差和数值误差怎么取舍，怎样为具体问题建立数学模型，如何抓住问题中的主要矛盾（模型中的关键参数），再一步一步的优化或者验证模型的有效性或者局限性。在这个意义上，这本书又是一本关于数学建模的成功样本。|,人民邮电出版社,49.00
Django Web开发指南,|Jeff Forcier,Paul Bissex|,本书讲述如何用Python框架Django构建出强大的Web解决方案，本书讲解了使用新的Django 1.0版的各种主要特性所需要的技术、工具以及概念。 全书分为12章和6个附录，内容包括，Django Python实战，Django速成：构建一个Blog，起始，定义和使用模型，URL、HTTP机制和视图，模板和表单处理，Photo Gallery，内容管理系统，Liveblog，Pastebin，高级Django编程，高级Django部署。附录内容包括命令行基础，安装运行Django，实用Django开发工具，发现、评估、使用Django应用程序，在Google App Engine上使用Django，参与Django项目。 本书适用于Python框架Django初学者，Django Web开发技术人员。,机械工业出版社,49.00元
Python源码剖析,陈儒,|作为主流的动态语言，Python不仅简单易学、移植性好，而且拥有强大丰富的库的支持。此外，Python强大的可扩展性，让开发人员既可以非常容易地利用C\/C++编写Python的扩展模块，还能将Python嵌入到C\/C++程序中，为自己的系统添加动态扩展和动态编程的能力。.
为了更好地利用Python语言，无论是使用Python语言本身，还是将Python与C\/C++交互使用，深刻理解Python的运行原理都是非常重要的。本书以CPython为研究对象，在C代码一级，深入细致地剖析了Python的实现。书中不仅包括了对大量Python内置对象的剖析，更将大量的篇幅用于对Python虚拟机及Python高级特性的剖析。通过此书，读者能够透彻地理解Python中的一般表达式、控制结构、异常机制、类机制、多线程机制、模块的动态加载机制、内存管理机制等核心技术的运行原理，同时，本书所揭示的动态语言的核心技术对于理解其他动态语言，如 Javascript、Ruby等也有较大的参考价值。..
本书适合于Python程序员、动态语言爱好者、C程序员阅读|,电子工业出版社,69.80元
Python学习手册,Mark Lutz,|《Python学习手册(第3版)》讲述了：Python可移植、功能强大、易于使用，是编写独立应用程序和脚本应用程序的理想选择。无论你是刚接触编程或者刚接触Python，通过学习《Python学习手册(第3版)》，你可以迅速高效地精通核心Python语言基础。读完《Python学习手册(第3版)》，你会对这门语言有足够的了解，从而可以在你所从事的任何应用领域中使用它。
《Python学习手册(第3版)》是作者根据过去10年用于教学而广为人知的培训课程的材料编写而成的。除了有许多详实说明和每章小结之外，每章还包括一个头脑风暴：这是《Python学习手册(第3版)》独特的一部分，配合以实用的练习题和复习题，让读者练习新学的技巧并测试自己的理解程度。
《Python学习手册(第3版)》包括：
类型和操作——深入讨论Python主要的内置对象类型：数字、列表和字典等。
语句和语法——在Python中输入代码来建立并处理对象，以及Python一般的语法模型。
函数——Python基本的面向过程工具，用于组织代码和重用。
模块——封装语句、函数以及其他工具，从而可以组织成较大的组件。
类和OOP——Python可选的面向对象编程工具，可用于组织程序代码从而实现定制和重用。
异常和工具——异常处理模型和语句，并介绍编写更大程序的开发工具。
讨论Python 3.0。
《Python学习手册(第3版)》让你对Python语言有深入而完整的了解，从而帮助你理解今后遇到的任何Python应用程序实例。如果你准备探索Google和YouTube为什么选中了Python，《Python学习手册(第3版)》就是你入门的最佳指南。|,机械工业出版社,89.00元
Python入门经典,(美)William F. Punch\/Richard Enbody,《Python入门经典:以解决计算问题为导向的Python编程实践》是一本系统而科学的Python入门教程，美国密歇根州立大学等多所美国知名高校采用其作为编程语言的入门教材，被奉为经典。它不仅从计算机教学和计算机科学的角度讲解了初学者如何才能更有效地去学习Python，而且特别强调用Python解决生活中的实际问题，精心组织了大量来源于生活中不同领域的与数值计算和数据处理相关的案例。通过《Python入门经典:以解决计算问题为导向的Python编程实践》，读者不仅能系统掌握Python编程相关的知识，而且还能掌握利用Python处理各种与数据相关的问题。《Python入门经典:以解决计算问题为导向的Python编程实践》分为五部分，第一部分介绍计算机设备的一般概念和一些计算机术语；第二部分开始介绍编程的基本知识，包括入门知识和控制语句，为后续内容做铺垫；第三部分讲述数据结构和函数，包括字符串、列表和元组、字典和集合、文件、函数、算法和程序等进阶内容，有助于读者提升编程技能；第四部分重点介绍如何使用类定义数据结构和算法、开发程序等，培养读者运用Python语言来实现基本的计算思想和策略的能力；第五部分主要介绍异常、测试和递归，旨在使读者成为更好的程序员。《Python入门经典:以解决计算问题为导向的Python编程实践》深入浅出，每一章节均给出了大量的实例、示范代码和自测练习，便于读者理解和掌握相关知识。读者通过学习《Python入门经典:以解决计算问题为导向的Python编程实践》，不仅能掌握Python语言的基本知识，还能学习如何在实践中运用该语言解决问题。,机械工业出版社,79.00元
学习Python,|Mark Lutz,David Ascher|,|Python是流行、开源、面向对象的编程语言，既可以用于编写单机运行的程序也可以编写脚本程序，具有可移植、强大、易用等特点。跟随专业教师学习是最快捷的掌握此语言的方式。新版的《学习Python》把你带到Mark Lutz和David Ascher面前，他们是著名的Python专家和培训师，他们的用语亲切、组织良好的文章已经指导了许多编程者精通这种语言。
《学习Python（第二版）》给程序员提供了一个学习Python和面向对象编程的综合学习工具。它根据1999年该书第一版发布以来Python语言的大量变化做了更新。本书介绍了最近发布的Python 2.3的基本要素并涵盖了新的特性，如列表内涵，嵌套作用域和迭代器\/产生器。
除了语言特性，《学习Python（第二版）》还为初级程序员提供了新的内容，包括新的面向对象编程和动态类型回顾，新的关于编程起步和配置选项的讨论，新的关于文档的内容等等。全书用新的实例使得语言特性的应用更加具体。
《学习Python（第二版）》首先给出了理解和构造Python程序必需的所有信息，包括类型、运算符、表达式、类、函数、模块和异常。然后，作者给出了更高级的内容，通过真实的应用和可用扩展库说明如何用Python完成一般的任务。全书提供了练习以检验自己的新技能。
《学习Python（第二版）》是本可灵活选读的图书，它让读者能够集中深入Python语言的核心。随着通读全书，你将获得对Python深入而完整的理解，这将帮助你自己开发大型的应用程序。本书适合于任何不仅仅想停留于了解Python而且想更好地掌握它的人。
对本书第一版的褒奖：
“这本书最优之处是作者在提供有用的实例与详细解释说明之间取得近乎完美的平衡。无论你是有经验的计算机程序员还是初学者，这本书对于学习Python语言都是非常适合的。”
——Andrew Morrison, CedarLug|,东南大学出版社,68.00元
python绝技：运用python成为顶级黑客,[美] TJ O'Connor,|Python 是一门常用的编程语言，它不仅上手容易，而且还拥有丰富的支持库。对经常需要针对自己所 处的特定场景编写专用工具的黑客、计算机犯罪调查人员、渗透测试师和安全工程师来说，Python 的这些 特点可以帮助他们又快又好地完成这一任务，以极少的代码量实现所需的功能。《Python绝技：运用Python成为顶级黑客》结合具体的场景和真 实的案例，详述了 Python 在渗透测试、电子取证、网络流量分析、无线安全、网站中信息的自动抓取、 病毒免杀等领域内所发挥的巨大作用。
《Python绝技：运用Python成为顶级黑客》适合计算机安全管理人员、计算机犯罪调查和电子取证人员、渗透测试人员，以及所有对计算机 安全感兴趣的爱好者阅读。同时也可供计算机、信息安全及相关专业的本\/专科院校师生学习参考。|,电子工业出版社,79.00元
Expert Python Programming,Tarek Ziadé,|Python is a dynamic programming language, used in a wide range of domains by programmers who find it simple, yet powerful. From the earliest version 15 years ago to the current one, it has constantly evolved with productivity and code readability in mind.
Even if you find writing Python code easy, writing code that is efficient and easy to maintain and reuse is not so straightforward. This book will show you how to do just that:  it will show you how Python development should be done. Python expert Tarek Ziadé takes you on a practical tour of Python application development, beginning with setting up the best development environment, and along the way looking at agile methodologies in Python, and applying proven object-oriented principles to your design.|,Packt,45
"笨办法"学Python,肖 (Zed A.Shaw),|本书是一本Python入门书籍，适合对计算机了解不多，没有学过编程，但对编程感兴趣的读者学习使用。这本书以习题的方式引导读者一步一步学习编程，从简单的打印一直讲到完整项目的实现，让初学者从基础的编程技术入手，最终体验到软件开发的基本过程。
本书结构非常简单，共包括52个习题，其中26个覆盖了输入\/输出、变量和函数三个主题，另外26个覆盖了一些比较高级的话题，如条件判断、循环、类和对象、代码测试及项目的实现等。每一章的格式基本相同，以代码习题开始，按照说明编写代码，运行并检查结果，然后再做附加练习。
Zed Shaw完善了这个堪称世上最好的Python学习系统。只要跟着学习，你就会和迄今为止数十万Zed教过的初学者一样获得成功。
在这本书中，你将通过完成52个精心设计的习题来学会Python。阅读这些习题，把习题的代码精确地写出来（禁止复制和粘贴！），修正你的错误，观察程序的运行。在这个过程中，你将了解软件是如何工作的，好的程序看起来是什么样子，怎样阅读、编写、思考代码，以及如何用专业程序员的技巧来找出并修正错误。最重要的是，你将学到下面这些编写优秀的Python软件必需的初始技能。
这本书会让你的每一分钟投入都有回报。Python是世界上最强大、最受欢迎的编程语言之一，很快你就会成为一名Python程序员。
你还可以看Zed的视频！随书附赠的DVD中包含5个多小时激情挥洒的教学内容：一部完整的Python视频教程！|,人民邮电出版社,CNY 49.00
Effective Python,布雷特·斯拉特金（Brett Slatkin）,|用Python编写程序，是相当容易的，所以这门语言非常流行。但若想掌握Python所特有的优势、魅力和表达能力，则相当困难，而且语言中还有很多隐藏的陷阱，容易令开发者犯错。
本书可以帮你掌握真正的Pythonic编程方式，令你能够完全发挥出Python语言的强大功能，并写出健壮而高效的代码。Scott Meyers在畅销书《Effective C++》中开创了一种以使用场景为主导的精练教学方式，本书作者Brett Slatkin就以这种方式汇聚了59条优秀的实践原则、开发技巧和便捷方案，并以实用的代码范例来解释它们。
Slatkin根据自己在Google公司多年开发Python基础架构所积累的经验，揭示Python语言中一些鲜为人知的微妙特性，并给出了能够改善代码功能及运行效率的习惯用法。通过本书，你能够了解到解决关键编程任务所用的最佳方式，并学会编写易于理解、便于维护且利于改进的代码。
本书核心内容包括：
涵盖Python 3.x及Python 2.x主要应用领域的实用指南，以及与之配套的详细解释及代码范例。
与函数相关的编程建议，这些建议有助于我们写出意图清晰、便于复用且缺陷较少的函数。
如何准确地表达类与对象的行为。
在使用元类和动态属性时，如何避免错误的用法。
更为高效的并发及并行方式。
与Python内置模块相关的编程技巧和习惯用法。
多人协作时所用的开发工具和最佳实践方式。
旨在改善代码质量和程序性能的调试、测试与优化方案。|,机械工业出版社,59
Python语言及其应用,[美] Bill Lubanovic,本书介绍Python 语言的基础知识及其在各个领域的具体应用，基于最新版本3.x。书中首先介绍了Python 语言的一些必备基本知识，然后介绍了在商业、科研以及艺术领域使用Python 开发各种应用的实例。文字简洁明了，案例丰富实用，是一本难得的Python 入门手册。,人民邮电出版社,79.00元
Python Cookbook,|Alex Martelli,Anna Ravenscroft,David Ascher|,|本书介绍了Python应用在各个领域中的一些使用技巧和方法，从最基本的字符、文件序列、字典和排序，到进阶的面向对象编程、数据库和数据持久化、 XML处理和Web编程，再到比较高级和抽象的描述符、装饰器、元类、迭代器和生成器，均有涉及。书中还介绍了一些第三方包和库的使用，包括 Twisted、GIL、PyWin32等。本书覆盖了Python应用中的很多常见问题，并提出了通用的解决方案。书中的代码和方法具有很强的实用性，可以方便地应用到实际的项目中，并产生立竿见影的效果。尤为难得的是，本书的各位作者都具有丰富的业界实践经验，因此，本书不仅给出了对各种问题的解决方案，同时还体现了很多专家的思维方式和良好的编程习惯，与具体的细节性知识相比，这部分内容无疑是本书的精华。
本书适合具有一定Python基础的读者阅读参考。|,人民邮电出版社,99.00元
Dive Into Python,Mark Pilgrim,Dive Into Python 是为有经验的程序员编写的一本 Python 书。,Apress,USD 39.99
Python网络编程基础,John Goerzen,《Python网络编程基础》可以作为各层次Python、Web和网络程序的开发人员的参考书，在实际工作中使用书中的技术，效果更佳。,电子工业出版社,68.00元
Python基础教程,Magnus Lie Hetland,本书是经典教程的全新改版，作者根据Python 3.0版本的种种变化，全面改写了书中内容，做到既能“瞻前”也能“顾后”。本书层次鲜明、结构严谨、内容翔实，特别是在最后几章，作者将前面讲述的内容应用到了10个引人入胜的项目中，并以模板的形式介绍了项目的开发过程。本书既适合初学者夯实基础，又能帮助Python程序员提升技能，即使是 Python方面的技术专家，也能从书里找到令你耳目一新的东西。,人民邮电出版社,69.00元
Python Algorithms,Magnus Lie Hetland,|Python Algorithms explains the Python approach to algorithm analysis and design. Written by Magnus Lie Hetland, author of Beginning Python, this book is sharply focused on classical algorithms, but it also gives a solid understanding of fundamental algorithmic problem-solving techniques. * The book deals with some of the most important and challenging areas of programming and computer science, but in a highly pedagogic and readable manner. * The book covers both algorithmic theory and programming practice, demonstrating how theory is reflected in real Python programs. * Well-known algorithms and data structures that are built into the Python language are explained, and the user is shown how to implement and evaluate others himself. What you'll learn * Transform new problems to well-known algorithmic problems with efficient solutions, or show that the problems belong to classes of problems thought not to be efficiently solvable. * Analyze algorithms and Python programs both using mathematical tools and basic experiments and benchmarks. * Prove correctness, optimality, or bounds on approximation error for Python programs and their underlying algorithms. * Understand several classical algorithms and data structures in depth, and be able to implement these efficiently in Python. * Design and implement new algorithms for new problems, using time-tested design principles and techniques. * Speed up implementations, using a plethora of tools for high-performance computing in Python. Who this book is for The book is intended for Python programmers who need to learn about algorithmic problem-solving, or who need a refresher. Students of computer science, or similar programming-related topics, such as bioinformatics, may also find the book to be quite useful. Table of Contents * Introduction * The Basics * Counting 101 * Induction and Recursion ...and Reduction * Traversal: The Skeleton Key of Algorithmics * Divide, Combine, and Conquer * Greed Is Good? Prove It! * Tangled Dependencies and Memoization * From A to B with Edsger and Friends * Matchings, Cuts, and Flows * Hard Problems and (Limited) Sloppiness|,Apress,USD 49.99
父与子的编程之旅,|桑德 (Warren Sande),桑德 (Carter Sande)|,|本书是一本家长与孩子共同学习编程的入门书。作者是一对父子，他们以Python语言为例，详尽细致地介绍了Python如何安装、字符串和操作符等程序设计的基本概念，介绍了条件语句、函数、模块等进阶内容，最后讲解了用Python实现游戏编程。书中的语言生动活泼，叙述简单明了。 为了让学习者觉得编程有趣，本书编排了很多卡通人物及场景对话，让学习者在轻松愉快之中跨入计算机编程的大门。
第 2 版新增内容
首先，我们来说说第 2 版中有哪些内容没有改变，那就是我们决定在第 2 版中继续使用 Python 2，而不是转换到 Python 3。我们会在第 1 章解释其中的原因。
下面是第 2 版与第 1 版的不同之处
增加了一些说明，解释 Python 2 和 Python 3 的区别。
第 12 章增加了一节关于 Python 字典的内容。
在第 20 章的 GUI 编程部分，我们将不再被支持的 PythonCard 换成了应用更广泛的 PyQt。PyQt 也用在第 22 章的 Hangman 程序和第 24 章的电子宠物程序中。
增加了第 25 章，用来详细解释第 10 章中的 Skier 程序。
增加了第 26 章，讲述在简单的对战游戏中，如何编写一个有人工智|,人民邮电出版社,CNY 69.00
利用Python进行数据分析,Wes McKinney,|【名人推荐】
“科学计算和数据分析社区已经等待这本书很多年了：大量具体的实践建议，以及大量综合应用方法。本书在未来几年里肯定会成为Python领域中技术计算的权威指南。”
——Fernando Pérez　加州大学伯克利分校 研究科学家， IPython的创始人之一
【内容简介】
还在苦苦寻觅用Python控制、处理、整理、分析结构化数据的完整课程？本书含有大量的实践案例，你将学会如何利用各种Python库（包括NumPy、pandas、matplotlib以及IPython等）高效地解决各式各样的数据分析问题。
由于作者Wes McKinney是pandas库的主要作者，所以本书也可以作为利用Python实现数据密集型应用的科学计算实践指南。本书适合刚刚接触Python的分析人员以及刚刚接触科学计算的Python程序员。
•将IPython这个交互式Shell作为你的首要开发环境。
•学习NumPy（Numerical Python）的基础和高级知识。
•从pandas库的数据分析工具开始。
•利用高性能工具对数据进行加载、清理、转换、合并以及重塑。
•利用matplotlib创建散点图以及静态或交互式的可视化结果。
•利用pandas的groupby功能对数据集进行切片、切块和汇总操作。
•处理各种各样的时间序列数据。
•通过详细的案例学习如何解决Web分析、社会科学、金融学以及经•济学等领域的问题。|,机械工业出版社,89.00
Python核心编程（第二版）,[美]Wesley J. Chun（陳仲才）,|本书是Python开发者的完全指南——针对 Python 2.5全面升级
·学习专业的Python风格、最佳实践和好的编程习惯；
·加强对Python对象、内存模型和Python面向对象特性的深入理解；
·构建更有效的Web、CGI、互联网、网络和其他客户端\/服务器架构应用程序及软件；
·学习如何使用Python中的Tkinter和其他工具来开发自己的GUI应用程序及软件；
·通过用C等语言编写扩展来提升Python应用程序的性能，或者通过使用多线程增强I\/0相关的应用程序的能力；
·学习Python中有关数据库的API，以及如何在Python中使用各种不同的数据库系统，包括MySQL、Postgres和 SQLite。|,人民邮电出版社,89.00元
贝叶斯思维,[美]Allen B. Downey（艾伦·唐尼）,|这本书帮助那些希望用数学工具解决实际问题的人们，仅有的要求可能就是懂一点概率知识和程序设计。而贝叶斯方法是一种常见的利用概率学知识去解决不确定性问题的数学方法，对于一个计算机专业的人士，应当熟悉其应用在诸如机器翻译，语音识别，垃圾邮件检测等常见的计算机问题领域。
可是本书实际上会远远扩大你的视野，即使不是一个计算机专业的人士，你也可以看到在战争环境下（二战德军坦克问题），法律问题上（肾肿瘤的假设验证），体育博彩领域（棕熊队和加人队NFL比赛问题）贝叶斯方法的威力。怎么从有限的信息判断德军装甲部队的规模，你所支持的球队有多大可能赢得冠军，在《龙与地下城》勇士中，你应当对游戏角色属性的最大值有什么样的期望，甚至在普通的彩弹射击游戏中，拥有一些贝叶斯思维也能帮助到你提高游戏水平。
除此以外，本书在共计15章的篇幅中讨论了怎样解决十几个现实生活中的实际问题。在这些问题的解决过程中，作者还潜移默化的帮助读者形成了建模决策的方法论，建模误差和数值误差怎么取舍，怎样为具体问题建立数学模型，如何抓住问题中的主要矛盾（模型中的关键参数），再一步一步的优化或者验证模型的有效性或者局限性。在这个意义上，这本书又是一本关于数学建模的成功样本。|,人民邮电出版社,49.00
Django Web开发指南,|Jeff Forcier,Paul Bissex|,本书讲述如何用Python框架Django构建出强大的Web解决方案，本书讲解了使用新的Django 1.0版的各种主要特性所需要的技术、工具以及概念。 全书分为12章和6个附录，内容包括，Django Python实战，Django速成：构建一个Blog，起始，定义和使用模型，URL、HTTP机制和视图，模板和表单处理，Photo Gallery，内容管理系统，Liveblog，Pastebin，高级Django编程，高级Django部署。附录内容包括命令行基础，安装运行Django，实用Django开发工具，发现、评估、使用Django应用程序，在Google App Engine上使用Django，参与Django项目。 本书适用于Python框架Django初学者，Django Web开发技术人员。,机械工业出版社,49.00元
Python源码剖析,陈儒,|作为主流的动态语言，Python不仅简单易学、移植性好，而且拥有强大丰富的库的支持。此外，Python强大的可扩展性，让开发人员既可以非常容易地利用C\/C++编写Python的扩展模块，还能将Python嵌入到C\/C++程序中，为自己的系统添加动态扩展和动态编程的能力。.
为了更好地利用Python语言，无论是使用Python语言本身，还是将Python与C\/C++交互使用，深刻理解Python的运行原理都是非常重要的。本书以CPython为研究对象，在C代码一级，深入细致地剖析了Python的实现。书中不仅包括了对大量Python内置对象的剖析，更将大量的篇幅用于对Python虚拟机及Python高级特性的剖析。通过此书，读者能够透彻地理解Python中的一般表达式、控制结构、异常机制、类机制、多线程机制、模块的动态加载机制、内存管理机制等核心技术的运行原理，同时，本书所揭示的动态语言的核心技术对于理解其他动态语言，如 Javascript、Ruby等也有较大的参考价值。..
本书适合于Python程序员、动态语言爱好者、C程序员阅读|,电子工业出版社,69.80元
Python学习手册,Mark Lutz,|《Python学习手册(第3版)》讲述了：Python可移植、功能强大、易于使用，是编写独立应用程序和脚本应用程序的理想选择。无论你是刚接触编程或者刚接触Python，通过学习《Python学习手册(第3版)》，你可以迅速高效地精通核心Python语言基础。读完《Python学习手册(第3版)》，你会对这门语言有足够的了解，从而可以在你所从事的任何应用领域中使用它。
《Python学习手册(第3版)》是作者根据过去10年用于教学而广为人知的培训课程的材料编写而成的。除了有许多详实说明和每章小结之外，每章还包括一个头脑风暴：这是《Python学习手册(第3版)》独特的一部分，配合以实用的练习题和复习题，让读者练习新学的技巧并测试自己的理解程度。
《Python学习手册(第3版)》包括：
类型和操作——深入讨论Python主要的内置对象类型：数字、列表和字典等。
语句和语法——在Python中输入代码来建立并处理对象，以及Python一般的语法模型。
函数——Python基本的面向过程工具，用于组织代码和重用。
模块——封装语句、函数以及其他工具，从而可以组织成较大的组件。
类和OOP——Python可选的面向对象编程工具，可用于组织程序代码从而实现定制和重用。
异常和工具——异常处理模型和语句，并介绍编写更大程序的开发工具。
讨论Python 3.0。
《Python学习手册(第3版)》让你对Python语言有深入而完整的了解，从而帮助你理解今后遇到的任何Python应用程序实例。如果你准备探索Google和YouTube为什么选中了Python，《Python学习手册(第3版)》就是你入门的最佳指南。|,机械工业出版社,89.00元
Python入门经典,(美)William F. Punch\/Richard Enbody,《Python入门经典:以解决计算问题为导向的Python编程实践》是一本系统而科学的Python入门教程，美国密歇根州立大学等多所美国知名高校采用其作为编程语言的入门教材，被奉为经典。它不仅从计算机教学和计算机科学的角度讲解了初学者如何才能更有效地去学习Python，而且特别强调用Python解决生活中的实际问题，精心组织了大量来源于生活中不同领域的与数值计算和数据处理相关的案例。通过《Python入门经典:以解决计算问题为导向的Python编程实践》，读者不仅能系统掌握Python编程相关的知识，而且还能掌握利用Python处理各种与数据相关的问题。《Python入门经典:以解决计算问题为导向的Python编程实践》分为五部分，第一部分介绍计算机设备的一般概念和一些计算机术语；第二部分开始介绍编程的基本知识，包括入门知识和控制语句，为后续内容做铺垫；第三部分讲述数据结构和函数，包括字符串、列表和元组、字典和集合、文件、函数、算法和程序等进阶内容，有助于读者提升编程技能；第四部分重点介绍如何使用类定义数据结构和算法、开发程序等，培养读者运用Python语言来实现基本的计算思想和策略的能力；第五部分主要介绍异常、测试和递归，旨在使读者成为更好的程序员。《Python入门经典:以解决计算问题为导向的Python编程实践》深入浅出，每一章节均给出了大量的实例、示范代码和自测练习，便于读者理解和掌握相关知识。读者通过学习《Python入门经典:以解决计算问题为导向的Python编程实践》，不仅能掌握Python语言的基本知识，还能学习如何在实践中运用该语言解决问题。,机械工业出版社,79.00元
学习Python,|Mark Lutz,David Ascher|,|Python是流行、开源、面向对象的编程语言，既可以用于编写单机运行的程序也可以编写脚本程序，具有可移植、强大、易用等特点。跟随专业教师学习是最快捷的掌握此语言的方式。新版的《学习Python》把你带到Mark Lutz和David Ascher面前，他们是著名的Python专家和培训师，他们的用语亲切、组织良好的文章已经指导了许多编程者精通这种语言。
《学习Python（第二版）》给程序员提供了一个学习Python和面向对象编程的综合学习工具。它根据1999年该书第一版发布以来Python语言的大量变化做了更新。本书介绍了最近发布的Python 2.3的基本要素并涵盖了新的特性，如列表内涵，嵌套作用域和迭代器\/产生器。
除了语言特性，《学习Python（第二版）》还为初级程序员提供了新的内容，包括新的面向对象编程和动态类型回顾，新的关于编程起步和配置选项的讨论，新的关于文档的内容等等。全书用新的实例使得语言特性的应用更加具体。
《学习Python（第二版）》首先给出了理解和构造Python程序必需的所有信息，包括类型、运算符、表达式、类、函数、模块和异常。然后，作者给出了更高级的内容，通过真实的应用和可用扩展库说明如何用Python完成一般的任务。全书提供了练习以检验自己的新技能。
《学习Python（第二版）》是本可灵活选读的图书，它让读者能够集中深入Python语言的核心。随着通读全书，你将获得对Python深入而完整的理解，这将帮助你自己开发大型的应用程序。本书适合于任何不仅仅想停留于了解Python而且想更好地掌握它的人。
对本书第一版的褒奖：
“这本书最优之处是作者在提供有用的实例与详细解释说明之间取得近乎完美的平衡。无论你是有经验的计算机程序员还是初学者，这本书对于学习Python语言都是非常适合的。”
——Andrew Morrison, CedarLug|,东南大学出版社,68.00元
python绝技：运用python成为顶级黑客,[美] TJ O'Connor,|Python 是一门常用的编程语言，它不仅上手容易，而且还拥有丰富的支持库。对经常需要针对自己所 处的特定场景编写专用工具的黑客、计算机犯罪调查人员、渗透测试师和安全工程师来说，Python 的这些 特点可以帮助他们又快又好地完成这一任务，以极少的代码量实现所需的功能。《Python绝技：运用Python成为顶级黑客》结合具体的场景和真 实的案例，详述了 Python 在渗透测试、电子取证、网络流量分析、无线安全、网站中信息的自动抓取、 病毒免杀等领域内所发挥的巨大作用。
《Python绝技：运用Python成为顶级黑客》适合计算机安全管理人员、计算机犯罪调查和电子取证人员、渗透测试人员，以及所有对计算机 安全感兴趣的爱好者阅读。同时也可供计算机、信息安全及相关专业的本\/专科院校师生学习参考。|,电子工业出版社,79.00元
Expert Python Programming,Tarek Ziadé,|Python is a dynamic programming language, used in a wide range of domains by programmers who find it simple, yet powerful. From the earliest version 15 years ago to the current one, it has constantly evolved with productivity and code readability in mind.
Even if you find writing Python code easy, writing code that is efficient and easy to maintain and reuse is not so straightforward. This book will show you how to do just that:  it will show you how Python development should be done. Python expert Tarek Ziadé takes you on a practical tour of Python application development, beginning with setting up the best development environment, and along the way looking at agile methodologies in Python, and applying proven object-oriented principles to your design.|,Packt,45
"笨办法"学Python,肖 (Zed A.Shaw),|本书是一本Python入门书籍，适合对计算机了解不多，没有学过编程，但对编程感兴趣的读者学习使用。这本书以习题的方式引导读者一步一步学习编程，从简单的打印一直讲到完整项目的实现，让初学者从基础的编程技术入手，最终体验到软件开发的基本过程。
本书结构非常简单，共包括52个习题，其中26个覆盖了输入\/输出、变量和函数三个主题，另外26个覆盖了一些比较高级的话题，如条件判断、循环、类和对象、代码测试及项目的实现等。每一章的格式基本相同，以代码习题开始，按照说明编写代码，运行并检查结果，然后再做附加练习。
Zed Shaw完善了这个堪称世上最好的Python学习系统。只要跟着学习，你就会和迄今为止数十万Zed教过的初学者一样获得成功。
在这本书中，你将通过完成52个精心设计的习题来学会Python。阅读这些习题，把习题的代码精确地写出来（禁止复制和粘贴！），修正你的错误，观察程序的运行。在这个过程中，你将了解软件是如何工作的，好的程序看起来是什么样子，怎样阅读、编写、思考代码，以及如何用专业程序员的技巧来找出并修正错误。最重要的是，你将学到下面这些编写优秀的Python软件必需的初始技能。
这本书会让你的每一分钟投入都有回报。Python是世界上最强大、最受欢迎的编程语言之一，很快你就会成为一名Python程序员。
你还可以看Zed的视频！随书附赠的DVD中包含5个多小时激情挥洒的教学内容：一部完整的Python视频教程！|,人民邮电出版社,CNY 49.00
Effective Python,布雷特·斯拉特金（Brett Slatkin）,|用Python编写程序，是相当容易的，所以这门语言非常流行。但若想掌握Python所特有的优势、魅力和表达能力，则相当困难，而且语言中还有很多隐藏的陷阱，容易令开发者犯错。
本书可以帮你掌握真正的Pythonic编程方式，令你能够完全发挥出Python语言的强大功能，并写出健壮而高效的代码。Scott Meyers在畅销书《Effective C++》中开创了一种以使用场景为主导的精练教学方式，本书作者Brett Slatkin就以这种方式汇聚了59条优秀的实践原则、开发技巧和便捷方案，并以实用的代码范例来解释它们。
Slatkin根据自己在Google公司多年开发Python基础架构所积累的经验，揭示Python语言中一些鲜为人知的微妙特性，并给出了能够改善代码功能及运行效率的习惯用法。通过本书，你能够了解到解决关键编程任务所用的最佳方式，并学会编写易于理解、便于维护且利于改进的代码。
本书核心内容包括：
涵盖Python 3.x及Python 2.x主要应用领域的实用指南，以及与之配套的详细解释及代码范例。
与函数相关的编程建议，这些建议有助于我们写出意图清晰、便于复用且缺陷较少的函数。
如何准确地表达类与对象的行为。
在使用元类和动态属性时，如何避免错误的用法。
更为高效的并发及并行方式。
与Python内置模块相关的编程技巧和习惯用法。
多人协作时所用的开发工具和最佳实践方式。
旨在改善代码质量和程序性能的调试、测试与优化方案。|,机械工业出版社,59
Python语言及其应用,[美] Bill Lubanovic,本书介绍Python 语言的基础知识及其在各个领域的具体应用，基于最新版本3.x。书中首先介绍了Python 语言的一些必备基本知识，然后介绍了在商业、科研以及艺术领域使用Python 开发各种应用的实例。文字简洁明了，案例丰富实用，是一本难得的Python 入门手册。,人民邮电出版社,79.00元
Python Cookbook,|Alex Martelli,Anna Ravenscroft,David Ascher|,|本书介绍了Python应用在各个领域中的一些使用技巧和方法，从最基本的字符、文件序列、字典和排序，到进阶的面向对象编程、数据库和数据持久化、 XML处理和Web编程，再到比较高级和抽象的描述符、装饰器、元类、迭代器和生成器，均有涉及。书中还介绍了一些第三方包和库的使用，包括 Twisted、GIL、PyWin32等。本书覆盖了Python应用中的很多常见问题，并提出了通用的解决方案。书中的代码和方法具有很强的实用性，可以方便地应用到实际的项目中，并产生立竿见影的效果。尤为难得的是，本书的各位作者都具有丰富的业界实践经验，因此，本书不仅给出了对各种问题的解决方案，同时还体现了很多专家的思维方式和良好的编程习惯，与具体的细节性知识相比，这部分内容无疑是本书的精华。
本书适合具有一定Python基础的读者阅读参考。|,人民邮电出版社,99.00元
Dive Into Python,Mark Pilgrim,Dive Into Python 是为有经验的程序员编写的一本 Python 书。,Apress,USD 39.99
Python for Data Analysis,Wesly McKinney,|这本书主要是用 pandas 连接 SciPy 和 NumPy，用pandas做数据处理是Pycon2012上一个很热门的话题。另一个功能强大的东西是Sage，它将很多开源的软件集成到统一的 Python 接口。
Python for Data Analysis is concerned with the nuts and bolts of manipulating, processing, cleaning, and crunching data in Python. It is also a practical, modern introduction to scientific computing in Python, tailored for data-intensive applications. This is a book about the parts of the Python language and libraries you’ll need to effectively solve a broad set of data analysis problems. This book is not an exposition on analytical methods using Python as the implementation language.
Written by Wes McKinney, the main author of the pandas library, this hands-on book is packed with practical cases studies. It’s ideal for analysts new to Python and for Python programmers new to scientific computing.
Use the IPython interactive shell as your primary development environment
Learn basic and advanced NumPy (Numerical Python) features
Get started with data analysis tools in the pandas library
Use high-performance tools to load, clean, transform, merge, and reshape data
Create scatter plots and static or interactive visualizations with matplotlib
Apply the pandas groupby facility to slice, dice, and summarize datasets
Measure data by points in time, whether it’s specific instances, fixed periods, or intervals
Learn how to solve problems in web analytics, social sciences, finance, and economics, through detailed examples|,O'Reilly Media,
Python基础教程,Magnus Lie Hetland,本书是经典教程的全新改版，作者根据Python 3.0版本的种种变化，全面改写了书中内容，做到既能“瞻前”也能“顾后”。本书层次鲜明、结构严谨、内容翔实，特别是在最后几章，作者将前面讲述的内容应用到了10个引人入胜的项目中，并以模板的形式介绍了项目的开发过程。本书既适合初学者夯实基础，又能帮助Python程序员提升技能，即使是 Python方面的技术专家，也能从书里找到令你耳目一新的东西。,人民邮电出版社,69.00元
Python Algorithms,Magnus Lie Hetland,|Python Algorithms explains the Python approach to algorithm analysis and design. Written by Magnus Lie Hetland, author of Beginning Python, this book is sharply focused on classical algorithms, but it also gives a solid understanding of fundamental algorithmic problem-solving techniques. * The book deals with some of the most important and challenging areas of programming and computer science, but in a highly pedagogic and readable manner. * The book covers both algorithmic theory and programming practice, demonstrating how theory is reflected in real Python programs. * Well-known algorithms and data structures that are built into the Python language are explained, and the user is shown how to implement and evaluate others himself. What you'll learn * Transform new problems to well-known algorithmic problems with efficient solutions, or show that the problems belong to classes of problems thought not to be efficiently solvable. * Analyze algorithms and Python programs both using mathematical tools and basic experiments and benchmarks. * Prove correctness, optimality, or bounds on approximation error for Python programs and their underlying algorithms. * Understand several classical algorithms and data structures in depth, and be able to implement these efficiently in Python. * Design and implement new algorithms for new problems, using time-tested design principles and techniques. * Speed up implementations, using a plethora of tools for high-performance computing in Python. Who this book is for The book is intended for Python programmers who need to learn about algorithmic problem-solving, or who need a refresher. Students of computer science, or similar programming-related topics, such as bioinformatics, may also find the book to be quite useful. Table of Contents * Introduction * The Basics * Counting 101 * Induction and Recursion ...and Reduction * Traversal: The Skeleton Key of Algorithmics * Divide, Combine, and Conquer * Greed Is Good? Prove It! * Tangled Dependencies and Memoization * From A to B with Edsger and Friends * Matchings, Cuts, and Flows * Hard Problems and (Limited) Sloppiness|,Apress,USD 49.99
父与子的编程之旅,|桑德 (Warren Sande),桑德 (Carter Sande)|,|本书是一本家长与孩子共同学习编程的入门书。作者是一对父子，他们以Python语言为例，详尽细致地介绍了Python如何安装、字符串和操作符等程序设计的基本概念，介绍了条件语句、函数、模块等进阶内容，最后讲解了用Python实现游戏编程。书中的语言生动活泼，叙述简单明了。 为了让学习者觉得编程有趣，本书编排了很多卡通人物及场景对话，让学习者在轻松愉快之中跨入计算机编程的大门。
第 2 版新增内容
首先，我们来说说第 2 版中有哪些内容没有改变，那就是我们决定在第 2 版中继续使用 Python 2，而不是转换到 Python 3。我们会在第 1 章解释其中的原因。
下面是第 2 版与第 1 版的不同之处
增加了一些说明，解释 Python 2 和 Python 3 的区别。
第 12 章增加了一节关于 Python 字典的内容。
在第 20 章的 GUI 编程部分，我们将不再被支持的 PythonCard 换成了应用更广泛的 PyQt。PyQt 也用在第 22 章的 Hangman 程序和第 24 章的电子宠物程序中。
增加了第 25 章，用来详细解释第 10 章中的 Skier 程序。
增加了第 26 章，讲述在简单的对战游戏中，如何编写一个有人工智|,人民邮电出版社,CNY 69.00
利用Python进行数据分析,Wes McKinney,|【名人推荐】
“科学计算和数据分析社区已经等待这本书很多年了：大量具体的实践建议，以及大量综合应用方法。本书在未来几年里肯定会成为Python领域中技术计算的权威指南。”
——Fernando Pérez　加州大学伯克利分校 研究科学家， IPython的创始人之一
【内容简介】
还在苦苦寻觅用Python控制、处理、整理、分析结构化数据的完整课程？本书含有大量的实践案例，你将学会如何利用各种Python库（包括NumPy、pandas、matplotlib以及IPython等）高效地解决各式各样的数据分析问题。
由于作者Wes McKinney是pandas库的主要作者，所以本书也可以作为利用Python实现数据密集型应用的科学计算实践指南。本书适合刚刚接触Python的分析人员以及刚刚接触科学计算的Python程序员。
•将IPython这个交互式Shell作为你的首要开发环境。
•学习NumPy（Numerical Python）的基础和高级知识。
•从pandas库的数据分析工具开始。
•利用高性能工具对数据进行加载、清理、转换、合并以及重塑。
•利用matplotlib创建散点图以及静态或交互式的可视化结果。
•利用pandas的groupby功能对数据集进行切片、切块和汇总操作。
•处理各种各样的时间序列数据。
•通过详细的案例学习如何解决Web分析、社会科学、金融学以及经•济学等领域的问题。|,机械工业出版社,89.00
Python核心编程（第二版）,[美]Wesley J. Chun（陳仲才）,|本书是Python开发者的完全指南——针对 Python 2.5全面升级
·学习专业的Python风格、最佳实践和好的编程习惯；
·加强对Python对象、内存模型和Python面向对象特性的深入理解；
·构建更有效的Web、CGI、互联网、网络和其他客户端\/服务器架构应用程序及软件；
·学习如何使用Python中的Tkinter和其他工具来开发自己的GUI应用程序及软件；
·通过用C等语言编写扩展来提升Python应用程序的性能，或者通过使用多线程增强I\/0相关的应用程序的能力；
·学习Python中有关数据库的API，以及如何在Python中使用各种不同的数据库系统，包括MySQL、Postgres和 SQLite。|,人民邮电出版社,89.00元
贝叶斯思维,[美]Allen B. Downey（艾伦·唐尼）,|这本书帮助那些希望用数学工具解决实际问题的人们，仅有的要求可能就是懂一点概率知识和程序设计。而贝叶斯方法是一种常见的利用概率学知识去解决不确定性问题的数学方法，对于一个计算机专业的人士，应当熟悉其应用在诸如机器翻译，语音识别，垃圾邮件检测等常见的计算机问题领域。
可是本书实际上会远远扩大你的视野，即使不是一个计算机专业的人士，你也可以看到在战争环境下（二战德军坦克问题），法律问题上（肾肿瘤的假设验证），体育博彩领域（棕熊队和加人队NFL比赛问题）贝叶斯方法的威力。怎么从有限的信息判断德军装甲部队的规模，你所支持的球队有多大可能赢得冠军，在《龙与地下城》勇士中，你应当对游戏角色属性的最大值有什么样的期望，甚至在普通的彩弹射击游戏中，拥有一些贝叶斯思维也能帮助到你提高游戏水平。
除此以外，本书在共计15章的篇幅中讨论了怎样解决十几个现实生活中的实际问题。在这些问题的解决过程中，作者还潜移默化的帮助读者形成了建模决策的方法论，建模误差和数值误差怎么取舍，怎样为具体问题建立数学模型，如何抓住问题中的主要矛盾（模型中的关键参数），再一步一步的优化或者验证模型的有效性或者局限性。在这个意义上，这本书又是一本关于数学建模的成功样本。|,人民邮电出版社,49.00
Django Web开发指南,|Jeff Forcier,Paul Bissex|,本书讲述如何用Python框架Django构建出强大的Web解决方案，本书讲解了使用新的Django 1.0版的各种主要特性所需要的技术、工具以及概念。 全书分为12章和6个附录，内容包括，Django Python实战，Django速成：构建一个Blog，起始，定义和使用模型，URL、HTTP机制和视图，模板和表单处理，Photo Gallery，内容管理系统，Liveblog，Pastebin，高级Django编程，高级Django部署。附录内容包括命令行基础，安装运行Django，实用Django开发工具，发现、评估、使用Django应用程序，在Google App Engine上使用Django，参与Django项目。 本书适用于Python框架Django初学者，Django Web开发技术人员。,机械工业出版社,49.00元
Python源码剖析,陈儒,|作为主流的动态语言，Python不仅简单易学、移植性好，而且拥有强大丰富的库的支持。此外，Python强大的可扩展性，让开发人员既可以非常容易地利用C\/C++编写Python的扩展模块，还能将Python嵌入到C\/C++程序中，为自己的系统添加动态扩展和动态编程的能力。.
为了更好地利用Python语言，无论是使用Python语言本身，还是将Python与C\/C++交互使用，深刻理解Python的运行原理都是非常重要的。本书以CPython为研究对象，在C代码一级，深入细致地剖析了Python的实现。书中不仅包括了对大量Python内置对象的剖析，更将大量的篇幅用于对Python虚拟机及Python高级特性的剖析。通过此书，读者能够透彻地理解Python中的一般表达式、控制结构、异常机制、类机制、多线程机制、模块的动态加载机制、内存管理机制等核心技术的运行原理，同时，本书所揭示的动态语言的核心技术对于理解其他动态语言，如 Javascript、Ruby等也有较大的参考价值。..
本书适合于Python程序员、动态语言爱好者、C程序员阅读|,电子工业出版社,69.80元
Python学习手册,Mark Lutz,|《Python学习手册(第3版)》讲述了：Python可移植、功能强大、易于使用，是编写独立应用程序和脚本应用程序的理想选择。无论你是刚接触编程或者刚接触Python，通过学习《Python学习手册(第3版)》，你可以迅速高效地精通核心Python语言基础。读完《Python学习手册(第3版)》，你会对这门语言有足够的了解，从而可以在你所从事的任何应用领域中使用它。
《Python学习手册(第3版)》是作者根据过去10年用于教学而广为人知的培训课程的材料编写而成的。除了有许多详实说明和每章小结之外，每章还包括一个头脑风暴：这是《Python学习手册(第3版)》独特的一部分，配合以实用的练习题和复习题，让读者练习新学的技巧并测试自己的理解程度。
《Python学习手册(第3版)》包括：
类型和操作——深入讨论Python主要的内置对象类型：数字、列表和字典等。
语句和语法——在Python中输入代码来建立并处理对象，以及Python一般的语法模型。
函数——Python基本的面向过程工具，用于组织代码和重用。
模块——封装语句、函数以及其他工具，从而可以组织成较大的组件。
类和OOP——Python可选的面向对象编程工具，可用于组织程序代码从而实现定制和重用。
异常和工具——异常处理模型和语句，并介绍编写更大程序的开发工具。
讨论Python 3.0。
《Python学习手册(第3版)》让你对Python语言有深入而完整的了解，从而帮助你理解今后遇到的任何Python应用程序实例。如果你准备探索Google和YouTube为什么选中了Python，《Python学习手册(第3版)》就是你入门的最佳指南。|,机械工业出版社,89.00元
Python入门经典,(美)William F. Punch\/Richard Enbody,《Python入门经典:以解决计算问题为导向的Python编程实践》是一本系统而科学的Python入门教程，美国密歇根州立大学等多所美国知名高校采用其作为编程语言的入门教材，被奉为经典。它不仅从计算机教学和计算机科学的角度讲解了初学者如何才能更有效地去学习Python，而且特别强调用Python解决生活中的实际问题，精心组织了大量来源于生活中不同领域的与数值计算和数据处理相关的案例。通过《Python入门经典:以解决计算问题为导向的Python编程实践》，读者不仅能系统掌握Python编程相关的知识，而且还能掌握利用Python处理各种与数据相关的问题。《Python入门经典:以解决计算问题为导向的Python编程实践》分为五部分，第一部分介绍计算机设备的一般概念和一些计算机术语；第二部分开始介绍编程的基本知识，包括入门知识和控制语句，为后续内容做铺垫；第三部分讲述数据结构和函数，包括字符串、列表和元组、字典和集合、文件、函数、算法和程序等进阶内容，有助于读者提升编程技能；第四部分重点介绍如何使用类定义数据结构和算法、开发程序等，培养读者运用Python语言来实现基本的计算思想和策略的能力；第五部分主要介绍异常、测试和递归，旨在使读者成为更好的程序员。《Python入门经典:以解决计算问题为导向的Python编程实践》深入浅出，每一章节均给出了大量的实例、示范代码和自测练习，便于读者理解和掌握相关知识。读者通过学习《Python入门经典:以解决计算问题为导向的Python编程实践》，不仅能掌握Python语言的基本知识，还能学习如何在实践中运用该语言解决问题。,机械工业出版社,79.00元
学习Python,|Mark Lutz,David Ascher|,|Python是流行、开源、面向对象的编程语言，既可以用于编写单机运行的程序也可以编写脚本程序，具有可移植、强大、易用等特点。跟随专业教师学习是最快捷的掌握此语言的方式。新版的《学习Python》把你带到Mark Lutz和David Ascher面前，他们是著名的Python专家和培训师，他们的用语亲切、组织良好的文章已经指导了许多编程者精通这种语言。
《学习Python（第二版）》给程序员提供了一个学习Python和面向对象编程的综合学习工具。它根据1999年该书第一版发布以来Python语言的大量变化做了更新。本书介绍了最近发布的Python 2.3的基本要素并涵盖了新的特性，如列表内涵，嵌套作用域和迭代器\/产生器。
除了语言特性，《学习Python（第二版）》还为初级程序员提供了新的内容，包括新的面向对象编程和动态类型回顾，新的关于编程起步和配置选项的讨论，新的关于文档的内容等等。全书用新的实例使得语言特性的应用更加具体。
《学习Python（第二版）》首先给出了理解和构造Python程序必需的所有信息，包括类型、运算符、表达式、类、函数、模块和异常。然后，作者给出了更高级的内容，通过真实的应用和可用扩展库说明如何用Python完成一般的任务。全书提供了练习以检验自己的新技能。
《学习Python（第二版）》是本可灵活选读的图书，它让读者能够集中深入Python语言的核心。随着通读全书，你将获得对Python深入而完整的理解，这将帮助你自己开发大型的应用程序。本书适合于任何不仅仅想停留于了解Python而且想更好地掌握它的人。
对本书第一版的褒奖：
“这本书最优之处是作者在提供有用的实例与详细解释说明之间取得近乎完美的平衡。无论你是有经验的计算机程序员还是初学者，这本书对于学习Python语言都是非常适合的。”
——Andrew Morrison, CedarLug|,东南大学出版社,68.00元
python绝技：运用python成为顶级黑客,[美] TJ O'Connor,|Python 是一门常用的编程语言，它不仅上手容易，而且还拥有丰富的支持库。对经常需要针对自己所 处的特定场景编写专用工具的黑客、计算机犯罪调查人员、渗透测试师和安全工程师来说，Python 的这些 特点可以帮助他们又快又好地完成这一任务，以极少的代码量实现所需的功能。《Python绝技：运用Python成为顶级黑客》结合具体的场景和真 实的案例，详述了 Python 在渗透测试、电子取证、网络流量分析、无线安全、网站中信息的自动抓取、 病毒免杀等领域内所发挥的巨大作用。
《Python绝技：运用Python成为顶级黑客》适合计算机安全管理人员、计算机犯罪调查和电子取证人员、渗透测试人员，以及所有对计算机 安全感兴趣的爱好者阅读。同时也可供计算机、信息安全及相关专业的本\/专科院校师生学习参考。|,电子工业出版社,79.00元
Expert Python Programming,Tarek Ziadé,|Python is a dynamic programming language, used in a wide range of domains by programmers who find it simple, yet powerful. From the earliest version 15 years ago to the current one, it has constantly evolved with productivity and code readability in mind.
Even if you find writing Python code easy, writing code that is efficient and easy to maintain and reuse is not so straightforward. This book will show you how to do just that:  it will show you how Python development should be done. Python expert Tarek Ziadé takes you on a practical tour of Python application development, beginning with setting up the best development environment, and along the way looking at agile methodologies in Python, and applying proven object-oriented principles to your design.|,Packt,45
"笨办法"学Python,肖 (Zed A.Shaw),|本书是一本Python入门书籍，适合对计算机了解不多，没有学过编程，但对编程感兴趣的读者学习使用。这本书以习题的方式引导读者一步一步学习编程，从简单的打印一直讲到完整项目的实现，让初学者从基础的编程技术入手，最终体验到软件开发的基本过程。
本书结构非常简单，共包括52个习题，其中26个覆盖了输入\/输出、变量和函数三个主题，另外26个覆盖了一些比较高级的话题，如条件判断、循环、类和对象、代码测试及项目的实现等。每一章的格式基本相同，以代码习题开始，按照说明编写代码，运行并检查结果，然后再做附加练习。
Zed Shaw完善了这个堪称世上最好的Python学习系统。只要跟着学习，你就会和迄今为止数十万Zed教过的初学者一样获得成功。
在这本书中，你将通过完成52个精心设计的习题来学会Python。阅读这些习题，把习题的代码精确地写出来（禁止复制和粘贴！），修正你的错误，观察程序的运行。在这个过程中，你将了解软件是如何工作的，好的程序看起来是什么样子，怎样阅读、编写、思考代码，以及如何用专业程序员的技巧来找出并修正错误。最重要的是，你将学到下面这些编写优秀的Python软件必需的初始技能。
这本书会让你的每一分钟投入都有回报。Python是世界上最强大、最受欢迎的编程语言之一，很快你就会成为一名Python程序员。
你还可以看Zed的视频！随书附赠的DVD中包含5个多小时激情挥洒的教学内容：一部完整的Python视频教程！|,人民邮电出版社,CNY 49.00
Effective Python,布雷特·斯拉特金（Brett Slatkin）,|用Python编写程序，是相当容易的，所以这门语言非常流行。但若想掌握Python所特有的优势、魅力和表达能力，则相当困难，而且语言中还有很多隐藏的陷阱，容易令开发者犯错。
本书可以帮你掌握真正的Pythonic编程方式，令你能够完全发挥出Python语言的强大功能，并写出健壮而高效的代码。Scott Meyers在畅销书《Effective C++》中开创了一种以使用场景为主导的精练教学方式，本书作者Brett Slatkin就以这种方式汇聚了59条优秀的实践原则、开发技巧和便捷方案，并以实用的代码范例来解释它们。
Slatkin根据自己在Google公司多年开发Python基础架构所积累的经验，揭示Python语言中一些鲜为人知的微妙特性，并给出了能够改善代码功能及运行效率的习惯用法。通过本书，你能够了解到解决关键编程任务所用的最佳方式，并学会编写易于理解、便于维护且利于改进的代码。
本书核心内容包括：
涵盖Python 3.x及Python 2.x主要应用领域的实用指南，以及与之配套的详细解释及代码范例。
与函数相关的编程建议，这些建议有助于我们写出意图清晰、便于复用且缺陷较少的函数。
如何准确地表达类与对象的行为。
在使用元类和动态属性时，如何避免错误的用法。
更为高效的并发及并行方式。
与Python内置模块相关的编程技巧和习惯用法。
多人协作时所用的开发工具和最佳实践方式。
旨在改善代码质量和程序性能的调试、测试与优化方案。|,机械工业出版社,59
Python语言及其应用,[美] Bill Lubanovic,本书介绍Python 语言的基础知识及其在各个领域的具体应用，基于最新版本3.x。书中首先介绍了Python 语言的一些必备基本知识，然后介绍了在商业、科研以及艺术领域使用Python 开发各种应用的实例。文字简洁明了，案例丰富实用，是一本难得的Python 入门手册。,人民邮电出版社,79.00元
Python Cookbook,|Alex Martelli,Anna Ravenscroft,David Ascher|,|本书介绍了Python应用在各个领域中的一些使用技巧和方法，从最基本的字符、文件序列、字典和排序，到进阶的面向对象编程、数据库和数据持久化、 XML处理和Web编程，再到比较高级和抽象的描述符、装饰器、元类、迭代器和生成器，均有涉及。书中还介绍了一些第三方包和库的使用，包括 Twisted、GIL、PyWin32等。本书覆盖了Python应用中的很多常见问题，并提出了通用的解决方案。书中的代码和方法具有很强的实用性，可以方便地应用到实际的项目中，并产生立竿见影的效果。尤为难得的是，本书的各位作者都具有丰富的业界实践经验，因此，本书不仅给出了对各种问题的解决方案，同时还体现了很多专家的思维方式和良好的编程习惯，与具体的细节性知识相比，这部分内容无疑是本书的精华。
本书适合具有一定Python基础的读者阅读参考。|,人民邮电出版社,99.00元
Dive Into Python,Mark Pilgrim,Dive Into Python 是为有经验的程序员编写的一本 Python 书。,Apress,USD 39.99
Python for Data Analysis,Wesly McKinney,|这本书主要是用 pandas 连接 SciPy 和 NumPy，用pandas做数据处理是Pycon2012上一个很热门的话题。另一个功能强大的东西是Sage，它将很多开源的软件集成到统一的 Python 接口。
Python for Data Analysis is concerned with the nuts and bolts of manipulating, processing, cleaning, and crunching data in Python. It is also a practical, modern introduction to scientific computing in Python, tailored for data-intensive applications. This is a book about the parts of the Python language and libraries you’ll need to effectively solve a broad set of data analysis problems. This book is not an exposition on analytical methods using Python as the implementation language.
Written by Wes McKinney, the main author of the pandas library, this hands-on book is packed with practical cases studies. It’s ideal for analysts new to Python and for Python programmers new to scientific computing.
Use the IPython interactive shell as your primary development environment
Learn basic and advanced NumPy (Numerical Python) features
Get started with data analysis tools in the pandas library
Use high-performance tools to load, clean, transform, merge, and reshape data
Create scatter plots and static or interactive visualizations with matplotlib
Apply the pandas groupby facility to slice, dice, and summarize datasets
Measure data by points in time, whether it’s specific instances, fixed periods, or intervals
Learn how to solve problems in web analytics, social sciences, finance, and economics, through detailed examples|,O'Reilly Media,
Python学习手册（第4版）,[美] Mark Lutz,|Google和YouTube由于Python的高可适应性、易于维护以及适合于快速开发而采用它。如果你想要编写高质量、高效的并且易于与其他语言和工具集成的代码，《Python学习手册：第4 版》将帮助你使用Python快速实现这一点，不管你是编程新手还是Python初学者。本书是易于掌握和自学的教程，根据作者Python专家Mark Lutz的著名培训课程编写而成。
《Python学习手册：第4版》每一章都包含关于Python语言的关键内容的独立的一课，并且包含了一个独特的“练习题”部分，其中带有实际的练习和测试，以便你可以练习新的技能并随着学习而测试自己的理解。你会发现众多带有注释的示例以及图表，它们将帮助你开始学习Python 3.0。
《Python学习手册：第4版》包括以下内容：
学习Python的主要内建对象类型：数字、列表和字典。
使用Python语句创建和处理对象，并且学习Python的通用语法模型。
使用函数构造和重用代码，函数是Python的基本过程工具。
学习Python模块：封装语句、函数以及其他工具，从而可以组织成较大的组件。
Python的面向对象编程工具，用于组织程序代码。
学习异常处理模型，以及用于编写较大程序的开发工具。
了解包括装饰器、描述器、元类和Unicode处理等高级Python工具。|,机械工业出版社,119.00元
Python Algorithms,Magnus Lie Hetland,|Python Algorithms explains the Python approach to algorithm analysis and design. Written by Magnus Lie Hetland, author of Beginning Python, this book is sharply focused on classical algorithms, but it also gives a solid understanding of fundamental algorithmic problem-solving techniques. * The book deals with some of the most important and challenging areas of programming and computer science, but in a highly pedagogic and readable manner. * The book covers both algorithmic theory and programming practice, demonstrating how theory is reflected in real Python programs. * Well-known algorithms and data structures that are built into the Python language are explained, and the user is shown how to implement and evaluate others himself. What you'll learn * Transform new problems to well-known algorithmic problems with efficient solutions, or show that the problems belong to classes of problems thought not to be efficiently solvable. * Analyze algorithms and Python programs both using mathematical tools and basic experiments and benchmarks. * Prove correctness, optimality, or bounds on approximation error for Python programs and their underlying algorithms. * Understand several classical algorithms and data structures in depth, and be able to implement these efficiently in Python. * Design and implement new algorithms for new problems, using time-tested design principles and techniques. * Speed up implementations, using a plethora of tools for high-performance computing in Python. Who this book is for The book is intended for Python programmers who need to learn about algorithmic problem-solving, or who need a refresher. Students of computer science, or similar programming-related topics, such as bioinformatics, may also find the book to be quite useful. Table of Contents * Introduction * The Basics * Counting 101 * Induction and Recursion ...and Reduction * Traversal: The Skeleton Key of Algorithmics * Divide, Combine, and Conquer * Greed Is Good? Prove It! * Tangled Dependencies and Memoization * From A to B with Edsger and Friends * Matchings, Cuts, and Flows * Hard Problems and (Limited) Sloppiness|,Apress,USD 49.99
父与子的编程之旅,|桑德 (Warren Sande),桑德 (Carter Sande)|,|本书是一本家长与孩子共同学习编程的入门书。作者是一对父子，他们以Python语言为例，详尽细致地介绍了Python如何安装、字符串和操作符等程序设计的基本概念，介绍了条件语句、函数、模块等进阶内容，最后讲解了用Python实现游戏编程。书中的语言生动活泼，叙述简单明了。 为了让学习者觉得编程有趣，本书编排了很多卡通人物及场景对话，让学习者在轻松愉快之中跨入计算机编程的大门。
第 2 版新增内容
首先，我们来说说第 2 版中有哪些内容没有改变，那就是我们决定在第 2 版中继续使用 Python 2，而不是转换到 Python 3。我们会在第 1 章解释其中的原因。
下面是第 2 版与第 1 版的不同之处
增加了一些说明，解释 Python 2 和 Python 3 的区别。
第 12 章增加了一节关于 Python 字典的内容。
在第 20 章的 GUI 编程部分，我们将不再被支持的 PythonCard 换成了应用更广泛的 PyQt。PyQt 也用在第 22 章的 Hangman 程序和第 24 章的电子宠物程序中。
增加了第 25 章，用来详细解释第 10 章中的 Skier 程序。
增加了第 26 章，讲述在简单的对战游戏中，如何编写一个有人工智|,人民邮电出版社,CNY 69.00
利用Python进行数据分析,Wes McKinney,|【名人推荐】
“科学计算和数据分析社区已经等待这本书很多年了：大量具体的实践建议，以及大量综合应用方法。本书在未来几年里肯定会成为Python领域中技术计算的权威指南。”
——Fernando Pérez　加州大学伯克利分校 研究科学家， IPython的创始人之一
【内容简介】
还在苦苦寻觅用Python控制、处理、整理、分析结构化数据的完整课程？本书含有大量的实践案例，你将学会如何利用各种Python库（包括NumPy、pandas、matplotlib以及IPython等）高效地解决各式各样的数据分析问题。
由于作者Wes McKinney是pandas库的主要作者，所以本书也可以作为利用Python实现数据密集型应用的科学计算实践指南。本书适合刚刚接触Python的分析人员以及刚刚接触科学计算的Python程序员。
•将IPython这个交互式Shell作为你的首要开发环境。
•学习NumPy（Numerical Python）的基础和高级知识。
•从pandas库的数据分析工具开始。
•利用高性能工具对数据进行加载、清理、转换、合并以及重塑。
•利用matplotlib创建散点图以及静态或交互式的可视化结果。
•利用pandas的groupby功能对数据集进行切片、切块和汇总操作。
•处理各种各样的时间序列数据。
•通过详细的案例学习如何解决Web分析、社会科学、金融学以及经•济学等领域的问题。|,机械工业出版社,89.00
Python核心编程（第二版）,[美]Wesley J. Chun（陳仲才）,|本书是Python开发者的完全指南——针对 Python 2.5全面升级
·学习专业的Python风格、最佳实践和好的编程习惯；
·加强对Python对象、内存模型和Python面向对象特性的深入理解；
·构建更有效的Web、CGI、互联网、网络和其他客户端\/服务器架构应用程序及软件；
·学习如何使用Python中的Tkinter和其他工具来开发自己的GUI应用程序及软件；
·通过用C等语言编写扩展来提升Python应用程序的性能，或者通过使用多线程增强I\/0相关的应用程序的能力；
·学习Python中有关数据库的API，以及如何在Python中使用各种不同的数据库系统，包括MySQL、Postgres和 SQLite。|,人民邮电出版社,89.00元
贝叶斯思维,[美]Allen B. Downey（艾伦·唐尼）,|这本书帮助那些希望用数学工具解决实际问题的人们，仅有的要求可能就是懂一点概率知识和程序设计。而贝叶斯方法是一种常见的利用概率学知识去解决不确定性问题的数学方法，对于一个计算机专业的人士，应当熟悉其应用在诸如机器翻译，语音识别，垃圾邮件检测等常见的计算机问题领域。
可是本书实际上会远远扩大你的视野，即使不是一个计算机专业的人士，你也可以看到在战争环境下（二战德军坦克问题），法律问题上（肾肿瘤的假设验证），体育博彩领域（棕熊队和加人队NFL比赛问题）贝叶斯方法的威力。怎么从有限的信息判断德军装甲部队的规模，你所支持的球队有多大可能赢得冠军，在《龙与地下城》勇士中，你应当对游戏角色属性的最大值有什么样的期望，甚至在普通的彩弹射击游戏中，拥有一些贝叶斯思维也能帮助到你提高游戏水平。
除此以外，本书在共计15章的篇幅中讨论了怎样解决十几个现实生活中的实际问题。在这些问题的解决过程中，作者还潜移默化的帮助读者形成了建模决策的方法论，建模误差和数值误差怎么取舍，怎样为具体问题建立数学模型，如何抓住问题中的主要矛盾（模型中的关键参数），再一步一步的优化或者验证模型的有效性或者局限性。在这个意义上，这本书又是一本关于数学建模的成功样本。|,人民邮电出版社,49.00
Django Web开发指南,|Jeff Forcier,Paul Bissex|,本书讲述如何用Python框架Django构建出强大的Web解决方案，本书讲解了使用新的Django 1.0版的各种主要特性所需要的技术、工具以及概念。 全书分为12章和6个附录，内容包括，Django Python实战，Django速成：构建一个Blog，起始，定义和使用模型，URL、HTTP机制和视图，模板和表单处理，Photo Gallery，内容管理系统，Liveblog，Pastebin，高级Django编程，高级Django部署。附录内容包括命令行基础，安装运行Django，实用Django开发工具，发现、评估、使用Django应用程序，在Google App Engine上使用Django，参与Django项目。 本书适用于Python框架Django初学者，Django Web开发技术人员。,机械工业出版社,49.00元
Python源码剖析,陈儒,|作为主流的动态语言，Python不仅简单易学、移植性好，而且拥有强大丰富的库的支持。此外，Python强大的可扩展性，让开发人员既可以非常容易地利用C\/C++编写Python的扩展模块，还能将Python嵌入到C\/C++程序中，为自己的系统添加动态扩展和动态编程的能力。.
为了更好地利用Python语言，无论是使用Python语言本身，还是将Python与C\/C++交互使用，深刻理解Python的运行原理都是非常重要的。本书以CPython为研究对象，在C代码一级，深入细致地剖析了Python的实现。书中不仅包括了对大量Python内置对象的剖析，更将大量的篇幅用于对Python虚拟机及Python高级特性的剖析。通过此书，读者能够透彻地理解Python中的一般表达式、控制结构、异常机制、类机制、多线程机制、模块的动态加载机制、内存管理机制等核心技术的运行原理，同时，本书所揭示的动态语言的核心技术对于理解其他动态语言，如 Javascript、Ruby等也有较大的参考价值。..
本书适合于Python程序员、动态语言爱好者、C程序员阅读|,电子工业出版社,69.80元
Python学习手册,Mark Lutz,|《Python学习手册(第3版)》讲述了：Python可移植、功能强大、易于使用，是编写独立应用程序和脚本应用程序的理想选择。无论你是刚接触编程或者刚接触Python，通过学习《Python学习手册(第3版)》，你可以迅速高效地精通核心Python语言基础。读完《Python学习手册(第3版)》，你会对这门语言有足够的了解，从而可以在你所从事的任何应用领域中使用它。
《Python学习手册(第3版)》是作者根据过去10年用于教学而广为人知的培训课程的材料编写而成的。除了有许多详实说明和每章小结之外，每章还包括一个头脑风暴：这是《Python学习手册(第3版)》独特的一部分，配合以实用的练习题和复习题，让读者练习新学的技巧并测试自己的理解程度。
《Python学习手册(第3版)》包括：
类型和操作——深入讨论Python主要的内置对象类型：数字、列表和字典等。
语句和语法——在Python中输入代码来建立并处理对象，以及Python一般的语法模型。
函数——Python基本的面向过程工具，用于组织代码和重用。
模块——封装语句、函数以及其他工具，从而可以组织成较大的组件。
类和OOP——Python可选的面向对象编程工具，可用于组织程序代码从而实现定制和重用。
异常和工具——异常处理模型和语句，并介绍编写更大程序的开发工具。
讨论Python 3.0。
《Python学习手册(第3版)》让你对Python语言有深入而完整的了解，从而帮助你理解今后遇到的任何Python应用程序实例。如果你准备探索Google和YouTube为什么选中了Python，《Python学习手册(第3版)》就是你入门的最佳指南。|,机械工业出版社,89.00元
Python入门经典,(美)William F. Punch\/Richard Enbody,《Python入门经典:以解决计算问题为导向的Python编程实践》是一本系统而科学的Python入门教程，美国密歇根州立大学等多所美国知名高校采用其作为编程语言的入门教材，被奉为经典。它不仅从计算机教学和计算机科学的角度讲解了初学者如何才能更有效地去学习Python，而且特别强调用Python解决生活中的实际问题，精心组织了大量来源于生活中不同领域的与数值计算和数据处理相关的案例。通过《Python入门经典:以解决计算问题为导向的Python编程实践》，读者不仅能系统掌握Python编程相关的知识，而且还能掌握利用Python处理各种与数据相关的问题。《Python入门经典:以解决计算问题为导向的Python编程实践》分为五部分，第一部分介绍计算机设备的一般概念和一些计算机术语；第二部分开始介绍编程的基本知识，包括入门知识和控制语句，为后续内容做铺垫；第三部分讲述数据结构和函数，包括字符串、列表和元组、字典和集合、文件、函数、算法和程序等进阶内容，有助于读者提升编程技能；第四部分重点介绍如何使用类定义数据结构和算法、开发程序等，培养读者运用Python语言来实现基本的计算思想和策略的能力；第五部分主要介绍异常、测试和递归，旨在使读者成为更好的程序员。《Python入门经典:以解决计算问题为导向的Python编程实践》深入浅出，每一章节均给出了大量的实例、示范代码和自测练习，便于读者理解和掌握相关知识。读者通过学习《Python入门经典:以解决计算问题为导向的Python编程实践》，不仅能掌握Python语言的基本知识，还能学习如何在实践中运用该语言解决问题。,机械工业出版社,79.00元
学习Python,|Mark Lutz,David Ascher|,|Python是流行、开源、面向对象的编程语言，既可以用于编写单机运行的程序也可以编写脚本程序，具有可移植、强大、易用等特点。跟随专业教师学习是最快捷的掌握此语言的方式。新版的《学习Python》把你带到Mark Lutz和David Ascher面前，他们是著名的Python专家和培训师，他们的用语亲切、组织良好的文章已经指导了许多编程者精通这种语言。
《学习Python（第二版）》给程序员提供了一个学习Python和面向对象编程的综合学习工具。它根据1999年该书第一版发布以来Python语言的大量变化做了更新。本书介绍了最近发布的Python 2.3的基本要素并涵盖了新的特性，如列表内涵，嵌套作用域和迭代器\/产生器。
除了语言特性，《学习Python（第二版）》还为初级程序员提供了新的内容，包括新的面向对象编程和动态类型回顾，新的关于编程起步和配置选项的讨论，新的关于文档的内容等等。全书用新的实例使得语言特性的应用更加具体。
《学习Python（第二版）》首先给出了理解和构造Python程序必需的所有信息，包括类型、运算符、表达式、类、函数、模块和异常。然后，作者给出了更高级的内容，通过真实的应用和可用扩展库说明如何用Python完成一般的任务。全书提供了练习以检验自己的新技能。
《学习Python（第二版）》是本可灵活选读的图书，它让读者能够集中深入Python语言的核心。随着通读全书，你将获得对Python深入而完整的理解，这将帮助你自己开发大型的应用程序。本书适合于任何不仅仅想停留于了解Python而且想更好地掌握它的人。
对本书第一版的褒奖：
“这本书最优之处是作者在提供有用的实例与详细解释说明之间取得近乎完美的平衡。无论你是有经验的计算机程序员还是初学者，这本书对于学习Python语言都是非常适合的。”
——Andrew Morrison, CedarLug|,东南大学出版社,68.00元
python绝技：运用python成为顶级黑客,[美] TJ O'Connor,|Python 是一门常用的编程语言，它不仅上手容易，而且还拥有丰富的支持库。对经常需要针对自己所 处的特定场景编写专用工具的黑客、计算机犯罪调查人员、渗透测试师和安全工程师来说，Python 的这些 特点可以帮助他们又快又好地完成这一任务，以极少的代码量实现所需的功能。《Python绝技：运用Python成为顶级黑客》结合具体的场景和真 实的案例，详述了 Python 在渗透测试、电子取证、网络流量分析、无线安全、网站中信息的自动抓取、 病毒免杀等领域内所发挥的巨大作用。
《Python绝技：运用Python成为顶级黑客》适合计算机安全管理人员、计算机犯罪调查和电子取证人员、渗透测试人员，以及所有对计算机 安全感兴趣的爱好者阅读。同时也可供计算机、信息安全及相关专业的本\/专科院校师生学习参考。|,电子工业出版社,79.00元
Expert Python Programming,Tarek Ziadé,|Python is a dynamic programming language, used in a wide range of domains by programmers who find it simple, yet powerful. From the earliest version 15 years ago to the current one, it has constantly evolved with productivity and code readability in mind.
Even if you find writing Python code easy, writing code that is efficient and easy to maintain and reuse is not so straightforward. This book will show you how to do just that:  it will show you how Python development should be done. Python expert Tarek Ziadé takes you on a practical tour of Python application development, beginning with setting up the best development environment, and along the way looking at agile methodologies in Python, and applying proven object-oriented principles to your design.|,Packt,45
"笨办法"学Python,肖 (Zed A.Shaw),|本书是一本Python入门书籍，适合对计算机了解不多，没有学过编程，但对编程感兴趣的读者学习使用。这本书以习题的方式引导读者一步一步学习编程，从简单的打印一直讲到完整项目的实现，让初学者从基础的编程技术入手，最终体验到软件开发的基本过程。
本书结构非常简单，共包括52个习题，其中26个覆盖了输入\/输出、变量和函数三个主题，另外26个覆盖了一些比较高级的话题，如条件判断、循环、类和对象、代码测试及项目的实现等。每一章的格式基本相同，以代码习题开始，按照说明编写代码，运行并检查结果，然后再做附加练习。
Zed Shaw完善了这个堪称世上最好的Python学习系统。只要跟着学习，你就会和迄今为止数十万Zed教过的初学者一样获得成功。
在这本书中，你将通过完成52个精心设计的习题来学会Python。阅读这些习题，把习题的代码精确地写出来（禁止复制和粘贴！），修正你的错误，观察程序的运行。在这个过程中，你将了解软件是如何工作的，好的程序看起来是什么样子，怎样阅读、编写、思考代码，以及如何用专业程序员的技巧来找出并修正错误。最重要的是，你将学到下面这些编写优秀的Python软件必需的初始技能。
这本书会让你的每一分钟投入都有回报。Python是世界上最强大、最受欢迎的编程语言之一，很快你就会成为一名Python程序员。
你还可以看Zed的视频！随书附赠的DVD中包含5个多小时激情挥洒的教学内容：一部完整的Python视频教程！|,人民邮电出版社,CNY 49.00
Effective Python,布雷特·斯拉特金（Brett Slatkin）,|用Python编写程序，是相当容易的，所以这门语言非常流行。但若想掌握Python所特有的优势、魅力和表达能力，则相当困难，而且语言中还有很多隐藏的陷阱，容易令开发者犯错。
本书可以帮你掌握真正的Pythonic编程方式，令你能够完全发挥出Python语言的强大功能，并写出健壮而高效的代码。Scott Meyers在畅销书《Effective C++》中开创了一种以使用场景为主导的精练教学方式，本书作者Brett Slatkin就以这种方式汇聚了59条优秀的实践原则、开发技巧和便捷方案，并以实用的代码范例来解释它们。
Slatkin根据自己在Google公司多年开发Python基础架构所积累的经验，揭示Python语言中一些鲜为人知的微妙特性，并给出了能够改善代码功能及运行效率的习惯用法。通过本书，你能够了解到解决关键编程任务所用的最佳方式，并学会编写易于理解、便于维护且利于改进的代码。
本书核心内容包括：
涵盖Python 3.x及Python 2.x主要应用领域的实用指南，以及与之配套的详细解释及代码范例。
与函数相关的编程建议，这些建议有助于我们写出意图清晰、便于复用且缺陷较少的函数。
如何准确地表达类与对象的行为。
在使用元类和动态属性时，如何避免错误的用法。
更为高效的并发及并行方式。
与Python内置模块相关的编程技巧和习惯用法。
多人协作时所用的开发工具和最佳实践方式。
旨在改善代码质量和程序性能的调试、测试与优化方案。|,机械工业出版社,59
Python语言及其应用,[美] Bill Lubanovic,本书介绍Python 语言的基础知识及其在各个领域的具体应用，基于最新版本3.x。书中首先介绍了Python 语言的一些必备基本知识，然后介绍了在商业、科研以及艺术领域使用Python 开发各种应用的实例。文字简洁明了，案例丰富实用，是一本难得的Python 入门手册。,人民邮电出版社,79.00元
Python Cookbook,|Alex Martelli,Anna Ravenscroft,David Ascher|,|本书介绍了Python应用在各个领域中的一些使用技巧和方法，从最基本的字符、文件序列、字典和排序，到进阶的面向对象编程、数据库和数据持久化、 XML处理和Web编程，再到比较高级和抽象的描述符、装饰器、元类、迭代器和生成器，均有涉及。书中还介绍了一些第三方包和库的使用，包括 Twisted、GIL、PyWin32等。本书覆盖了Python应用中的很多常见问题，并提出了通用的解决方案。书中的代码和方法具有很强的实用性，可以方便地应用到实际的项目中，并产生立竿见影的效果。尤为难得的是，本书的各位作者都具有丰富的业界实践经验，因此，本书不仅给出了对各种问题的解决方案，同时还体现了很多专家的思维方式和良好的编程习惯，与具体的细节性知识相比，这部分内容无疑是本书的精华。
本书适合具有一定Python基础的读者阅读参考。|,人民邮电出版社,99.00元
Dive Into Python,Mark Pilgrim,Dive Into Python 是为有经验的程序员编写的一本 Python 书。,Apress,USD 39.99
Python for Data Analysis,Wesly McKinney,|这本书主要是用 pandas 连接 SciPy 和 NumPy，用pandas做数据处理是Pycon2012上一个很热门的话题。另一个功能强大的东西是Sage，它将很多开源的软件集成到统一的 Python 接口。
Python for Data Analysis is concerned with the nuts and bolts of manipulating, processing, cleaning, and crunching data in Python. It is also a practical, modern introduction to scientific computing in Python, tailored for data-intensive applications. This is a book about the parts of the Python language and libraries you’ll need to effectively solve a broad set of data analysis problems. This book is not an exposition on analytical methods using Python as the implementation language.
Written by Wes McKinney, the main author of the pandas library, this hands-on book is packed with practical cases studies. It’s ideal for analysts new to Python and for Python programmers new to scientific computing.
Use the IPython interactive shell as your primary development environment
Learn basic and advanced NumPy (Numerical Python) features
Get started with data analysis tools in the pandas library
Use high-performance tools to load, clean, transform, merge, and reshape data
Create scatter plots and static or interactive visualizations with matplotlib
Apply the pandas groupby facility to slice, dice, and summarize datasets
Measure data by points in time, whether it’s specific instances, fixed periods, or intervals
Learn how to solve problems in web analytics, social sciences, finance, and economics, through detailed examples|,O'Reilly Media,
Python学习手册（第4版）,[美] Mark Lutz,|Google和YouTube由于Python的高可适应性、易于维护以及适合于快速开发而采用它。如果你想要编写高质量、高效的并且易于与其他语言和工具集成的代码，《Python学习手册：第4 版》将帮助你使用Python快速实现这一点，不管你是编程新手还是Python初学者。本书是易于掌握和自学的教程，根据作者Python专家Mark Lutz的著名培训课程编写而成。
《Python学习手册：第4版》每一章都包含关于Python语言的关键内容的独立的一课，并且包含了一个独特的“练习题”部分，其中带有实际的练习和测试，以便你可以练习新的技能并随着学习而测试自己的理解。你会发现众多带有注释的示例以及图表，它们将帮助你开始学习Python 3.0。
《Python学习手册：第4版》包括以下内容：
学习Python的主要内建对象类型：数字、列表和字典。
使用Python语句创建和处理对象，并且学习Python的通用语法模型。
使用函数构造和重用代码，函数是Python的基本过程工具。
学习Python模块：封装语句、函数以及其他工具，从而可以组织成较大的组件。
Python的面向对象编程工具，用于组织程序代码。
学习异常处理模型，以及用于编写较大程序的开发工具。
了解包括装饰器、描述器、元类和Unicode处理等高级Python工具。|,机械工业出版社,119.00元
Flask Web Development,Miguel Grinberg,,O'Reilly Media,USD 24.99
父与子的编程之旅,|桑德 (Warren Sande),桑德 (Carter Sande)|,|本书是一本家长与孩子共同学习编程的入门书。作者是一对父子，他们以Python语言为例，详尽细致地介绍了Python如何安装、字符串和操作符等程序设计的基本概念，介绍了条件语句、函数、模块等进阶内容，最后讲解了用Python实现游戏编程。书中的语言生动活泼，叙述简单明了。 为了让学习者觉得编程有趣，本书编排了很多卡通人物及场景对话，让学习者在轻松愉快之中跨入计算机编程的大门。
第 2 版新增内容
首先，我们来说说第 2 版中有哪些内容没有改变，那就是我们决定在第 2 版中继续使用 Python 2，而不是转换到 Python 3。我们会在第 1 章解释其中的原因。
下面是第 2 版与第 1 版的不同之处
增加了一些说明，解释 Python 2 和 Python 3 的区别。
第 12 章增加了一节关于 Python 字典的内容。
在第 20 章的 GUI 编程部分，我们将不再被支持的 PythonCard 换成了应用更广泛的 PyQt。PyQt 也用在第 22 章的 Hangman 程序和第 24 章的电子宠物程序中。
增加了第 25 章，用来详细解释第 10 章中的 Skier 程序。
增加了第 26 章，讲述在简单的对战游戏中，如何编写一个有人工智|,人民邮电出版社,CNY 69.00
利用Python进行数据分析,Wes McKinney,|【名人推荐】
“科学计算和数据分析社区已经等待这本书很多年了：大量具体的实践建议，以及大量综合应用方法。本书在未来几年里肯定会成为Python领域中技术计算的权威指南。”
——Fernando Pérez　加州大学伯克利分校 研究科学家， IPython的创始人之一
【内容简介】
还在苦苦寻觅用Python控制、处理、整理、分析结构化数据的完整课程？本书含有大量的实践案例，你将学会如何利用各种Python库（包括NumPy、pandas、matplotlib以及IPython等）高效地解决各式各样的数据分析问题。
由于作者Wes McKinney是pandas库的主要作者，所以本书也可以作为利用Python实现数据密集型应用的科学计算实践指南。本书适合刚刚接触Python的分析人员以及刚刚接触科学计算的Python程序员。
•将IPython这个交互式Shell作为你的首要开发环境。
•学习NumPy（Numerical Python）的基础和高级知识。
•从pandas库的数据分析工具开始。
•利用高性能工具对数据进行加载、清理、转换、合并以及重塑。
•利用matplotlib创建散点图以及静态或交互式的可视化结果。
•利用pandas的groupby功能对数据集进行切片、切块和汇总操作。
•处理各种各样的时间序列数据。
•通过详细的案例学习如何解决Web分析、社会科学、金融学以及经•济学等领域的问题。|,机械工业出版社,89.00
Python核心编程（第二版）,[美]Wesley J. Chun（陳仲才）,|本书是Python开发者的完全指南——针对 Python 2.5全面升级
·学习专业的Python风格、最佳实践和好的编程习惯；
·加强对Python对象、内存模型和Python面向对象特性的深入理解；
·构建更有效的Web、CGI、互联网、网络和其他客户端\/服务器架构应用程序及软件；
·学习如何使用Python中的Tkinter和其他工具来开发自己的GUI应用程序及软件；
·通过用C等语言编写扩展来提升Python应用程序的性能，或者通过使用多线程增强I\/0相关的应用程序的能力；
·学习Python中有关数据库的API，以及如何在Python中使用各种不同的数据库系统，包括MySQL、Postgres和 SQLite。|,人民邮电出版社,89.00元
贝叶斯思维,[美]Allen B. Downey（艾伦·唐尼）,|这本书帮助那些希望用数学工具解决实际问题的人们，仅有的要求可能就是懂一点概率知识和程序设计。而贝叶斯方法是一种常见的利用概率学知识去解决不确定性问题的数学方法，对于一个计算机专业的人士，应当熟悉其应用在诸如机器翻译，语音识别，垃圾邮件检测等常见的计算机问题领域。
可是本书实际上会远远扩大你的视野，即使不是一个计算机专业的人士，你也可以看到在战争环境下（二战德军坦克问题），法律问题上（肾肿瘤的假设验证），体育博彩领域（棕熊队和加人队NFL比赛问题）贝叶斯方法的威力。怎么从有限的信息判断德军装甲部队的规模，你所支持的球队有多大可能赢得冠军，在《龙与地下城》勇士中，你应当对游戏角色属性的最大值有什么样的期望，甚至在普通的彩弹射击游戏中，拥有一些贝叶斯思维也能帮助到你提高游戏水平。
除此以外，本书在共计15章的篇幅中讨论了怎样解决十几个现实生活中的实际问题。在这些问题的解决过程中，作者还潜移默化的帮助读者形成了建模决策的方法论，建模误差和数值误差怎么取舍，怎样为具体问题建立数学模型，如何抓住问题中的主要矛盾（模型中的关键参数），再一步一步的优化或者验证模型的有效性或者局限性。在这个意义上，这本书又是一本关于数学建模的成功样本。|,人民邮电出版社,49.00
Django Web开发指南,|Jeff Forcier,Paul Bissex|,本书讲述如何用Python框架Django构建出强大的Web解决方案，本书讲解了使用新的Django 1.0版的各种主要特性所需要的技术、工具以及概念。 全书分为12章和6个附录，内容包括，Django Python实战，Django速成：构建一个Blog，起始，定义和使用模型，URL、HTTP机制和视图，模板和表单处理，Photo Gallery，内容管理系统，Liveblog，Pastebin，高级Django编程，高级Django部署。附录内容包括命令行基础，安装运行Django，实用Django开发工具，发现、评估、使用Django应用程序，在Google App Engine上使用Django，参与Django项目。 本书适用于Python框架Django初学者，Django Web开发技术人员。,机械工业出版社,49.00元
Python源码剖析,陈儒,|作为主流的动态语言，Python不仅简单易学、移植性好，而且拥有强大丰富的库的支持。此外，Python强大的可扩展性，让开发人员既可以非常容易地利用C\/C++编写Python的扩展模块，还能将Python嵌入到C\/C++程序中，为自己的系统添加动态扩展和动态编程的能力。.
为了更好地利用Python语言，无论是使用Python语言本身，还是将Python与C\/C++交互使用，深刻理解Python的运行原理都是非常重要的。本书以CPython为研究对象，在C代码一级，深入细致地剖析了Python的实现。书中不仅包括了对大量Python内置对象的剖析，更将大量的篇幅用于对Python虚拟机及Python高级特性的剖析。通过此书，读者能够透彻地理解Python中的一般表达式、控制结构、异常机制、类机制、多线程机制、模块的动态加载机制、内存管理机制等核心技术的运行原理，同时，本书所揭示的动态语言的核心技术对于理解其他动态语言，如 Javascript、Ruby等也有较大的参考价值。..
本书适合于Python程序员、动态语言爱好者、C程序员阅读|,电子工业出版社,69.80元
Python学习手册,Mark Lutz,|《Python学习手册(第3版)》讲述了：Python可移植、功能强大、易于使用，是编写独立应用程序和脚本应用程序的理想选择。无论你是刚接触编程或者刚接触Python，通过学习《Python学习手册(第3版)》，你可以迅速高效地精通核心Python语言基础。读完《Python学习手册(第3版)》，你会对这门语言有足够的了解，从而可以在你所从事的任何应用领域中使用它。
《Python学习手册(第3版)》是作者根据过去10年用于教学而广为人知的培训课程的材料编写而成的。除了有许多详实说明和每章小结之外，每章还包括一个头脑风暴：这是《Python学习手册(第3版)》独特的一部分，配合以实用的练习题和复习题，让读者练习新学的技巧并测试自己的理解程度。
《Python学习手册(第3版)》包括：
类型和操作——深入讨论Python主要的内置对象类型：数字、列表和字典等。
语句和语法——在Python中输入代码来建立并处理对象，以及Python一般的语法模型。
函数——Python基本的面向过程工具，用于组织代码和重用。
模块——封装语句、函数以及其他工具，从而可以组织成较大的组件。
类和OOP——Python可选的面向对象编程工具，可用于组织程序代码从而实现定制和重用。
异常和工具——异常处理模型和语句，并介绍编写更大程序的开发工具。
讨论Python 3.0。
《Python学习手册(第3版)》让你对Python语言有深入而完整的了解，从而帮助你理解今后遇到的任何Python应用程序实例。如果你准备探索Google和YouTube为什么选中了Python，《Python学习手册(第3版)》就是你入门的最佳指南。|,机械工业出版社,89.00元
Python入门经典,(美)William F. Punch\/Richard Enbody,《Python入门经典:以解决计算问题为导向的Python编程实践》是一本系统而科学的Python入门教程，美国密歇根州立大学等多所美国知名高校采用其作为编程语言的入门教材，被奉为经典。它不仅从计算机教学和计算机科学的角度讲解了初学者如何才能更有效地去学习Python，而且特别强调用Python解决生活中的实际问题，精心组织了大量来源于生活中不同领域的与数值计算和数据处理相关的案例。通过《Python入门经典:以解决计算问题为导向的Python编程实践》，读者不仅能系统掌握Python编程相关的知识，而且还能掌握利用Python处理各种与数据相关的问题。《Python入门经典:以解决计算问题为导向的Python编程实践》分为五部分，第一部分介绍计算机设备的一般概念和一些计算机术语；第二部分开始介绍编程的基本知识，包括入门知识和控制语句，为后续内容做铺垫；第三部分讲述数据结构和函数，包括字符串、列表和元组、字典和集合、文件、函数、算法和程序等进阶内容，有助于读者提升编程技能；第四部分重点介绍如何使用类定义数据结构和算法、开发程序等，培养读者运用Python语言来实现基本的计算思想和策略的能力；第五部分主要介绍异常、测试和递归，旨在使读者成为更好的程序员。《Python入门经典:以解决计算问题为导向的Python编程实践》深入浅出，每一章节均给出了大量的实例、示范代码和自测练习，便于读者理解和掌握相关知识。读者通过学习《Python入门经典:以解决计算问题为导向的Python编程实践》，不仅能掌握Python语言的基本知识，还能学习如何在实践中运用该语言解决问题。,机械工业出版社,79.00元
学习Python,|Mark Lutz,David Ascher|,|Python是流行、开源、面向对象的编程语言，既可以用于编写单机运行的程序也可以编写脚本程序，具有可移植、强大、易用等特点。跟随专业教师学习是最快捷的掌握此语言的方式。新版的《学习Python》把你带到Mark Lutz和David Ascher面前，他们是著名的Python专家和培训师，他们的用语亲切、组织良好的文章已经指导了许多编程者精通这种语言。
《学习Python（第二版）》给程序员提供了一个学习Python和面向对象编程的综合学习工具。它根据1999年该书第一版发布以来Python语言的大量变化做了更新。本书介绍了最近发布的Python 2.3的基本要素并涵盖了新的特性，如列表内涵，嵌套作用域和迭代器\/产生器。
除了语言特性，《学习Python（第二版）》还为初级程序员提供了新的内容，包括新的面向对象编程和动态类型回顾，新的关于编程起步和配置选项的讨论，新的关于文档的内容等等。全书用新的实例使得语言特性的应用更加具体。
《学习Python（第二版）》首先给出了理解和构造Python程序必需的所有信息，包括类型、运算符、表达式、类、函数、模块和异常。然后，作者给出了更高级的内容，通过真实的应用和可用扩展库说明如何用Python完成一般的任务。全书提供了练习以检验自己的新技能。
《学习Python（第二版）》是本可灵活选读的图书，它让读者能够集中深入Python语言的核心。随着通读全书，你将获得对Python深入而完整的理解，这将帮助你自己开发大型的应用程序。本书适合于任何不仅仅想停留于了解Python而且想更好地掌握它的人。
对本书第一版的褒奖：
“这本书最优之处是作者在提供有用的实例与详细解释说明之间取得近乎完美的平衡。无论你是有经验的计算机程序员还是初学者，这本书对于学习Python语言都是非常适合的。”
——Andrew Morrison, CedarLug|,东南大学出版社,68.00元
python绝技：运用python成为顶级黑客,[美] TJ O'Connor,|Python 是一门常用的编程语言，它不仅上手容易，而且还拥有丰富的支持库。对经常需要针对自己所 处的特定场景编写专用工具的黑客、计算机犯罪调查人员、渗透测试师和安全工程师来说，Python 的这些 特点可以帮助他们又快又好地完成这一任务，以极少的代码量实现所需的功能。《Python绝技：运用Python成为顶级黑客》结合具体的场景和真 实的案例，详述了 Python 在渗透测试、电子取证、网络流量分析、无线安全、网站中信息的自动抓取、 病毒免杀等领域内所发挥的巨大作用。
《Python绝技：运用Python成为顶级黑客》适合计算机安全管理人员、计算机犯罪调查和电子取证人员、渗透测试人员，以及所有对计算机 安全感兴趣的爱好者阅读。同时也可供计算机、信息安全及相关专业的本\/专科院校师生学习参考。|,电子工业出版社,79.00元
Expert Python Programming,Tarek Ziadé,|Python is a dynamic programming language, used in a wide range of domains by programmers who find it simple, yet powerful. From the earliest version 15 years ago to the current one, it has constantly evolved with productivity and code readability in mind.
Even if you find writing Python code easy, writing code that is efficient and easy to maintain and reuse is not so straightforward. This book will show you how to do just that:  it will show you how Python development should be done. Python expert Tarek Ziadé takes you on a practical tour of Python application development, beginning with setting up the best development environment, and along the way looking at agile methodologies in Python, and applying proven object-oriented principles to your design.|,Packt,45
"笨办法"学Python,肖 (Zed A.Shaw),|本书是一本Python入门书籍，适合对计算机了解不多，没有学过编程，但对编程感兴趣的读者学习使用。这本书以习题的方式引导读者一步一步学习编程，从简单的打印一直讲到完整项目的实现，让初学者从基础的编程技术入手，最终体验到软件开发的基本过程。
本书结构非常简单，共包括52个习题，其中26个覆盖了输入\/输出、变量和函数三个主题，另外26个覆盖了一些比较高级的话题，如条件判断、循环、类和对象、代码测试及项目的实现等。每一章的格式基本相同，以代码习题开始，按照说明编写代码，运行并检查结果，然后再做附加练习。
Zed Shaw完善了这个堪称世上最好的Python学习系统。只要跟着学习，你就会和迄今为止数十万Zed教过的初学者一样获得成功。
在这本书中，你将通过完成52个精心设计的习题来学会Python。阅读这些习题，把习题的代码精确地写出来（禁止复制和粘贴！），修正你的错误，观察程序的运行。在这个过程中，你将了解软件是如何工作的，好的程序看起来是什么样子，怎样阅读、编写、思考代码，以及如何用专业程序员的技巧来找出并修正错误。最重要的是，你将学到下面这些编写优秀的Python软件必需的初始技能。
这本书会让你的每一分钟投入都有回报。Python是世界上最强大、最受欢迎的编程语言之一，很快你就会成为一名Python程序员。
你还可以看Zed的视频！随书附赠的DVD中包含5个多小时激情挥洒的教学内容：一部完整的Python视频教程！|,人民邮电出版社,CNY 49.00
Effective Python,布雷特·斯拉特金（Brett Slatkin）,|用Python编写程序，是相当容易的，所以这门语言非常流行。但若想掌握Python所特有的优势、魅力和表达能力，则相当困难，而且语言中还有很多隐藏的陷阱，容易令开发者犯错。
本书可以帮你掌握真正的Pythonic编程方式，令你能够完全发挥出Python语言的强大功能，并写出健壮而高效的代码。Scott Meyers在畅销书《Effective C++》中开创了一种以使用场景为主导的精练教学方式，本书作者Brett Slatkin就以这种方式汇聚了59条优秀的实践原则、开发技巧和便捷方案，并以实用的代码范例来解释它们。
Slatkin根据自己在Google公司多年开发Python基础架构所积累的经验，揭示Python语言中一些鲜为人知的微妙特性，并给出了能够改善代码功能及运行效率的习惯用法。通过本书，你能够了解到解决关键编程任务所用的最佳方式，并学会编写易于理解、便于维护且利于改进的代码。
本书核心内容包括：
涵盖Python 3.x及Python 2.x主要应用领域的实用指南，以及与之配套的详细解释及代码范例。
与函数相关的编程建议，这些建议有助于我们写出意图清晰、便于复用且缺陷较少的函数。
如何准确地表达类与对象的行为。
在使用元类和动态属性时，如何避免错误的用法。
更为高效的并发及并行方式。
与Python内置模块相关的编程技巧和习惯用法。
多人协作时所用的开发工具和最佳实践方式。
旨在改善代码质量和程序性能的调试、测试与优化方案。|,机械工业出版社,59
Python语言及其应用,[美] Bill Lubanovic,本书介绍Python 语言的基础知识及其在各个领域的具体应用，基于最新版本3.x。书中首先介绍了Python 语言的一些必备基本知识，然后介绍了在商业、科研以及艺术领域使用Python 开发各种应用的实例。文字简洁明了，案例丰富实用，是一本难得的Python 入门手册。,人民邮电出版社,79.00元
Python Cookbook,|Alex Martelli,Anna Ravenscroft,David Ascher|,|本书介绍了Python应用在各个领域中的一些使用技巧和方法，从最基本的字符、文件序列、字典和排序，到进阶的面向对象编程、数据库和数据持久化、 XML处理和Web编程，再到比较高级和抽象的描述符、装饰器、元类、迭代器和生成器，均有涉及。书中还介绍了一些第三方包和库的使用，包括 Twisted、GIL、PyWin32等。本书覆盖了Python应用中的很多常见问题，并提出了通用的解决方案。书中的代码和方法具有很强的实用性，可以方便地应用到实际的项目中，并产生立竿见影的效果。尤为难得的是，本书的各位作者都具有丰富的业界实践经验，因此，本书不仅给出了对各种问题的解决方案，同时还体现了很多专家的思维方式和良好的编程习惯，与具体的细节性知识相比，这部分内容无疑是本书的精华。
本书适合具有一定Python基础的读者阅读参考。|,人民邮电出版社,99.00元
Dive Into Python,Mark Pilgrim,Dive Into Python 是为有经验的程序员编写的一本 Python 书。,Apress,USD 39.99
Python for Data Analysis,Wesly McKinney,|这本书主要是用 pandas 连接 SciPy 和 NumPy，用pandas做数据处理是Pycon2012上一个很热门的话题。另一个功能强大的东西是Sage，它将很多开源的软件集成到统一的 Python 接口。
Python for Data Analysis is concerned with the nuts and bolts of manipulating, processing, cleaning, and crunching data in Python. It is also a practical, modern introduction to scientific computing in Python, tailored for data-intensive applications. This is a book about the parts of the Python language and libraries you’ll need to effectively solve a broad set of data analysis problems. This book is not an exposition on analytical methods using Python as the implementation language.
Written by Wes McKinney, the main author of the pandas library, this hands-on book is packed with practical cases studies. It’s ideal for analysts new to Python and for Python programmers new to scientific computing.
Use the IPython interactive shell as your primary development environment
Learn basic and advanced NumPy (Numerical Python) features
Get started with data analysis tools in the pandas library
Use high-performance tools to load, clean, transform, merge, and reshape data
Create scatter plots and static or interactive visualizations with matplotlib
Apply the pandas groupby facility to slice, dice, and summarize datasets
Measure data by points in time, whether it’s specific instances, fixed periods, or intervals
Learn how to solve problems in web analytics, social sciences, finance, and economics, through detailed examples|,O'Reilly Media,
Python学习手册（第4版）,[美] Mark Lutz,|Google和YouTube由于Python的高可适应性、易于维护以及适合于快速开发而采用它。如果你想要编写高质量、高效的并且易于与其他语言和工具集成的代码，《Python学习手册：第4 版》将帮助你使用Python快速实现这一点，不管你是编程新手还是Python初学者。本书是易于掌握和自学的教程，根据作者Python专家Mark Lutz的著名培训课程编写而成。
《Python学习手册：第4版》每一章都包含关于Python语言的关键内容的独立的一课，并且包含了一个独特的“练习题”部分，其中带有实际的练习和测试，以便你可以练习新的技能并随着学习而测试自己的理解。你会发现众多带有注释的示例以及图表，它们将帮助你开始学习Python 3.0。
《Python学习手册：第4版》包括以下内容：
学习Python的主要内建对象类型：数字、列表和字典。
使用Python语句创建和处理对象，并且学习Python的通用语法模型。
使用函数构造和重用代码，函数是Python的基本过程工具。
学习Python模块：封装语句、函数以及其他工具，从而可以组织成较大的组件。
Python的面向对象编程工具，用于组织程序代码。
学习异常处理模型，以及用于编写较大程序的开发工具。
了解包括装饰器、描述器、元类和Unicode处理等高级Python工具。|,机械工业出版社,119.00元
Flask Web Development,Miguel Grinberg,,O'Reilly Media,USD 24.99
可爱的Python,哲思社区,|本书的内容主要来自CPyUG社区的邮件列表，由Python的行者根据自身经验组织而成，是为从来没有听说过Python的其他语言程序员准备的一份实用的导学性质的书。笔者试图将优化后的学习体验，通过故事的方式传达给读者，同时也分享了蟒样（Pythonic式）的知识获取技巧，而且希望将最常用的代码和思路，通过作弊条（Cheat Sheet，提示表单）的形式分享给有初步基础的Python 用户，来帮助大家多快好省地完成功能。
本书期望成为学习使用Python的同好们的沟通话题，引发进一步的学习\/应用\/创造\/推广，就是笔者的追求！因为Python语言本身是种非常灵活的动态脚本语言，同一个目标可以使用多种方式完成，笔者为了让拥有各种不同技术背景的读者可以快速无碍地理解，选择了一种实际上可能比较笨拙的方式来实现功能，聪明的读者一定可以看出来的，那么请会心一笑，因为您已经和我们心灵相通了！|,电子工业出版社,55.00元
利用Python进行数据分析,Wes McKinney,|【名人推荐】
“科学计算和数据分析社区已经等待这本书很多年了：大量具体的实践建议，以及大量综合应用方法。本书在未来几年里肯定会成为Python领域中技术计算的权威指南。”
——Fernando Pérez　加州大学伯克利分校 研究科学家， IPython的创始人之一
【内容简介】
还在苦苦寻觅用Python控制、处理、整理、分析结构化数据的完整课程？本书含有大量的实践案例，你将学会如何利用各种Python库（包括NumPy、pandas、matplotlib以及IPython等）高效地解决各式各样的数据分析问题。
由于作者Wes McKinney是pandas库的主要作者，所以本书也可以作为利用Python实现数据密集型应用的科学计算实践指南。本书适合刚刚接触Python的分析人员以及刚刚接触科学计算的Python程序员。
•将IPython这个交互式Shell作为你的首要开发环境。
•学习NumPy（Numerical Python）的基础和高级知识。
•从pandas库的数据分析工具开始。
•利用高性能工具对数据进行加载、清理、转换、合并以及重塑。
•利用matplotlib创建散点图以及静态或交互式的可视化结果。
•利用pandas的groupby功能对数据集进行切片、切块和汇总操作。
•处理各种各样的时间序列数据。
•通过详细的案例学习如何解决Web分析、社会科学、金融学以及经•济学等领域的问题。|,机械工业出版社,89.00
Python核心编程（第二版）,[美]Wesley J. Chun（陳仲才）,|本书是Python开发者的完全指南——针对 Python 2.5全面升级
·学习专业的Python风格、最佳实践和好的编程习惯；
·加强对Python对象、内存模型和Python面向对象特性的深入理解；
·构建更有效的Web、CGI、互联网、网络和其他客户端\/服务器架构应用程序及软件；
·学习如何使用Python中的Tkinter和其他工具来开发自己的GUI应用程序及软件；
·通过用C等语言编写扩展来提升Python应用程序的性能，或者通过使用多线程增强I\/0相关的应用程序的能力；
·学习Python中有关数据库的API，以及如何在Python中使用各种不同的数据库系统，包括MySQL、Postgres和 SQLite。|,人民邮电出版社,89.00元
贝叶斯思维,[美]Allen B. Downey（艾伦·唐尼）,|这本书帮助那些希望用数学工具解决实际问题的人们，仅有的要求可能就是懂一点概率知识和程序设计。而贝叶斯方法是一种常见的利用概率学知识去解决不确定性问题的数学方法，对于一个计算机专业的人士，应当熟悉其应用在诸如机器翻译，语音识别，垃圾邮件检测等常见的计算机问题领域。
可是本书实际上会远远扩大你的视野，即使不是一个计算机专业的人士，你也可以看到在战争环境下（二战德军坦克问题），法律问题上（肾肿瘤的假设验证），体育博彩领域（棕熊队和加人队NFL比赛问题）贝叶斯方法的威力。怎么从有限的信息判断德军装甲部队的规模，你所支持的球队有多大可能赢得冠军，在《龙与地下城》勇士中，你应当对游戏角色属性的最大值有什么样的期望，甚至在普通的彩弹射击游戏中，拥有一些贝叶斯思维也能帮助到你提高游戏水平。
除此以外，本书在共计15章的篇幅中讨论了怎样解决十几个现实生活中的实际问题。在这些问题的解决过程中，作者还潜移默化的帮助读者形成了建模决策的方法论，建模误差和数值误差怎么取舍，怎样为具体问题建立数学模型，如何抓住问题中的主要矛盾（模型中的关键参数），再一步一步的优化或者验证模型的有效性或者局限性。在这个意义上，这本书又是一本关于数学建模的成功样本。|,人民邮电出版社,49.00
Django Web开发指南,|Jeff Forcier,Paul Bissex|,本书讲述如何用Python框架Django构建出强大的Web解决方案，本书讲解了使用新的Django 1.0版的各种主要特性所需要的技术、工具以及概念。 全书分为12章和6个附录，内容包括，Django Python实战，Django速成：构建一个Blog，起始，定义和使用模型，URL、HTTP机制和视图，模板和表单处理，Photo Gallery，内容管理系统，Liveblog，Pastebin，高级Django编程，高级Django部署。附录内容包括命令行基础，安装运行Django，实用Django开发工具，发现、评估、使用Django应用程序，在Google App Engine上使用Django，参与Django项目。 本书适用于Python框架Django初学者，Django Web开发技术人员。,机械工业出版社,49.00元
Python源码剖析,陈儒,|作为主流的动态语言，Python不仅简单易学、移植性好，而且拥有强大丰富的库的支持。此外，Python强大的可扩展性，让开发人员既可以非常容易地利用C\/C++编写Python的扩展模块，还能将Python嵌入到C\/C++程序中，为自己的系统添加动态扩展和动态编程的能力。.
为了更好地利用Python语言，无论是使用Python语言本身，还是将Python与C\/C++交互使用，深刻理解Python的运行原理都是非常重要的。本书以CPython为研究对象，在C代码一级，深入细致地剖析了Python的实现。书中不仅包括了对大量Python内置对象的剖析，更将大量的篇幅用于对Python虚拟机及Python高级特性的剖析。通过此书，读者能够透彻地理解Python中的一般表达式、控制结构、异常机制、类机制、多线程机制、模块的动态加载机制、内存管理机制等核心技术的运行原理，同时，本书所揭示的动态语言的核心技术对于理解其他动态语言，如 Javascript、Ruby等也有较大的参考价值。..
本书适合于Python程序员、动态语言爱好者、C程序员阅读|,电子工业出版社,69.80元
Python学习手册,Mark Lutz,|《Python学习手册(第3版)》讲述了：Python可移植、功能强大、易于使用，是编写独立应用程序和脚本应用程序的理想选择。无论你是刚接触编程或者刚接触Python，通过学习《Python学习手册(第3版)》，你可以迅速高效地精通核心Python语言基础。读完《Python学习手册(第3版)》，你会对这门语言有足够的了解，从而可以在你所从事的任何应用领域中使用它。
《Python学习手册(第3版)》是作者根据过去10年用于教学而广为人知的培训课程的材料编写而成的。除了有许多详实说明和每章小结之外，每章还包括一个头脑风暴：这是《Python学习手册(第3版)》独特的一部分，配合以实用的练习题和复习题，让读者练习新学的技巧并测试自己的理解程度。
《Python学习手册(第3版)》包括：
类型和操作——深入讨论Python主要的内置对象类型：数字、列表和字典等。
语句和语法——在Python中输入代码来建立并处理对象，以及Python一般的语法模型。
函数——Python基本的面向过程工具，用于组织代码和重用。
模块——封装语句、函数以及其他工具，从而可以组织成较大的组件。
类和OOP——Python可选的面向对象编程工具，可用于组织程序代码从而实现定制和重用。
异常和工具——异常处理模型和语句，并介绍编写更大程序的开发工具。
讨论Python 3.0。
《Python学习手册(第3版)》让你对Python语言有深入而完整的了解，从而帮助你理解今后遇到的任何Python应用程序实例。如果你准备探索Google和YouTube为什么选中了Python，《Python学习手册(第3版)》就是你入门的最佳指南。|,机械工业出版社,89.00元
Python入门经典,(美)William F. Punch\/Richard Enbody,《Python入门经典:以解决计算问题为导向的Python编程实践》是一本系统而科学的Python入门教程，美国密歇根州立大学等多所美国知名高校采用其作为编程语言的入门教材，被奉为经典。它不仅从计算机教学和计算机科学的角度讲解了初学者如何才能更有效地去学习Python，而且特别强调用Python解决生活中的实际问题，精心组织了大量来源于生活中不同领域的与数值计算和数据处理相关的案例。通过《Python入门经典:以解决计算问题为导向的Python编程实践》，读者不仅能系统掌握Python编程相关的知识，而且还能掌握利用Python处理各种与数据相关的问题。《Python入门经典:以解决计算问题为导向的Python编程实践》分为五部分，第一部分介绍计算机设备的一般概念和一些计算机术语；第二部分开始介绍编程的基本知识，包括入门知识和控制语句，为后续内容做铺垫；第三部分讲述数据结构和函数，包括字符串、列表和元组、字典和集合、文件、函数、算法和程序等进阶内容，有助于读者提升编程技能；第四部分重点介绍如何使用类定义数据结构和算法、开发程序等，培养读者运用Python语言来实现基本的计算思想和策略的能力；第五部分主要介绍异常、测试和递归，旨在使读者成为更好的程序员。《Python入门经典:以解决计算问题为导向的Python编程实践》深入浅出，每一章节均给出了大量的实例、示范代码和自测练习，便于读者理解和掌握相关知识。读者通过学习《Python入门经典:以解决计算问题为导向的Python编程实践》，不仅能掌握Python语言的基本知识，还能学习如何在实践中运用该语言解决问题。,机械工业出版社,79.00元
学习Python,|Mark Lutz,David Ascher|,|Python是流行、开源、面向对象的编程语言，既可以用于编写单机运行的程序也可以编写脚本程序，具有可移植、强大、易用等特点。跟随专业教师学习是最快捷的掌握此语言的方式。新版的《学习Python》把你带到Mark Lutz和David Ascher面前，他们是著名的Python专家和培训师，他们的用语亲切、组织良好的文章已经指导了许多编程者精通这种语言。
《学习Python（第二版）》给程序员提供了一个学习Python和面向对象编程的综合学习工具。它根据1999年该书第一版发布以来Python语言的大量变化做了更新。本书介绍了最近发布的Python 2.3的基本要素并涵盖了新的特性，如列表内涵，嵌套作用域和迭代器\/产生器。
除了语言特性，《学习Python（第二版）》还为初级程序员提供了新的内容，包括新的面向对象编程和动态类型回顾，新的关于编程起步和配置选项的讨论，新的关于文档的内容等等。全书用新的实例使得语言特性的应用更加具体。
《学习Python（第二版）》首先给出了理解和构造Python程序必需的所有信息，包括类型、运算符、表达式、类、函数、模块和异常。然后，作者给出了更高级的内容，通过真实的应用和可用扩展库说明如何用Python完成一般的任务。全书提供了练习以检验自己的新技能。
《学习Python（第二版）》是本可灵活选读的图书，它让读者能够集中深入Python语言的核心。随着通读全书，你将获得对Python深入而完整的理解，这将帮助你自己开发大型的应用程序。本书适合于任何不仅仅想停留于了解Python而且想更好地掌握它的人。
对本书第一版的褒奖：
“这本书最优之处是作者在提供有用的实例与详细解释说明之间取得近乎完美的平衡。无论你是有经验的计算机程序员还是初学者，这本书对于学习Python语言都是非常适合的。”
——Andrew Morrison, CedarLug|,东南大学出版社,68.00元
python绝技：运用python成为顶级黑客,[美] TJ O'Connor,|Python 是一门常用的编程语言，它不仅上手容易，而且还拥有丰富的支持库。对经常需要针对自己所 处的特定场景编写专用工具的黑客、计算机犯罪调查人员、渗透测试师和安全工程师来说，Python 的这些 特点可以帮助他们又快又好地完成这一任务，以极少的代码量实现所需的功能。《Python绝技：运用Python成为顶级黑客》结合具体的场景和真 实的案例，详述了 Python 在渗透测试、电子取证、网络流量分析、无线安全、网站中信息的自动抓取、 病毒免杀等领域内所发挥的巨大作用。
《Python绝技：运用Python成为顶级黑客》适合计算机安全管理人员、计算机犯罪调查和电子取证人员、渗透测试人员，以及所有对计算机 安全感兴趣的爱好者阅读。同时也可供计算机、信息安全及相关专业的本\/专科院校师生学习参考。|,电子工业出版社,79.00元
Expert Python Programming,Tarek Ziadé,|Python is a dynamic programming language, used in a wide range of domains by programmers who find it simple, yet powerful. From the earliest version 15 years ago to the current one, it has constantly evolved with productivity and code readability in mind.
Even if you find writing Python code easy, writing code that is efficient and easy to maintain and reuse is not so straightforward. This book will show you how to do just that:  it will show you how Python development should be done. Python expert Tarek Ziadé takes you on a practical tour of Python application development, beginning with setting up the best development environment, and along the way looking at agile methodologies in Python, and applying proven object-oriented principles to your design.|,Packt,45
"笨办法"学Python,肖 (Zed A.Shaw),|本书是一本Python入门书籍，适合对计算机了解不多，没有学过编程，但对编程感兴趣的读者学习使用。这本书以习题的方式引导读者一步一步学习编程，从简单的打印一直讲到完整项目的实现，让初学者从基础的编程技术入手，最终体验到软件开发的基本过程。
本书结构非常简单，共包括52个习题，其中26个覆盖了输入\/输出、变量和函数三个主题，另外26个覆盖了一些比较高级的话题，如条件判断、循环、类和对象、代码测试及项目的实现等。每一章的格式基本相同，以代码习题开始，按照说明编写代码，运行并检查结果，然后再做附加练习。
Zed Shaw完善了这个堪称世上最好的Python学习系统。只要跟着学习，你就会和迄今为止数十万Zed教过的初学者一样获得成功。
在这本书中，你将通过完成52个精心设计的习题来学会Python。阅读这些习题，把习题的代码精确地写出来（禁止复制和粘贴！），修正你的错误，观察程序的运行。在这个过程中，你将了解软件是如何工作的，好的程序看起来是什么样子，怎样阅读、编写、思考代码，以及如何用专业程序员的技巧来找出并修正错误。最重要的是，你将学到下面这些编写优秀的Python软件必需的初始技能。
这本书会让你的每一分钟投入都有回报。Python是世界上最强大、最受欢迎的编程语言之一，很快你就会成为一名Python程序员。
你还可以看Zed的视频！随书附赠的DVD中包含5个多小时激情挥洒的教学内容：一部完整的Python视频教程！|,人民邮电出版社,CNY 49.00
Effective Python,布雷特·斯拉特金（Brett Slatkin）,|用Python编写程序，是相当容易的，所以这门语言非常流行。但若想掌握Python所特有的优势、魅力和表达能力，则相当困难，而且语言中还有很多隐藏的陷阱，容易令开发者犯错。
本书可以帮你掌握真正的Pythonic编程方式，令你能够完全发挥出Python语言的强大功能，并写出健壮而高效的代码。Scott Meyers在畅销书《Effective C++》中开创了一种以使用场景为主导的精练教学方式，本书作者Brett Slatkin就以这种方式汇聚了59条优秀的实践原则、开发技巧和便捷方案，并以实用的代码范例来解释它们。
Slatkin根据自己在Google公司多年开发Python基础架构所积累的经验，揭示Python语言中一些鲜为人知的微妙特性，并给出了能够改善代码功能及运行效率的习惯用法。通过本书，你能够了解到解决关键编程任务所用的最佳方式，并学会编写易于理解、便于维护且利于改进的代码。
本书核心内容包括：
涵盖Python 3.x及Python 2.x主要应用领域的实用指南，以及与之配套的详细解释及代码范例。
与函数相关的编程建议，这些建议有助于我们写出意图清晰、便于复用且缺陷较少的函数。
如何准确地表达类与对象的行为。
在使用元类和动态属性时，如何避免错误的用法。
更为高效的并发及并行方式。
与Python内置模块相关的编程技巧和习惯用法。
多人协作时所用的开发工具和最佳实践方式。
旨在改善代码质量和程序性能的调试、测试与优化方案。|,机械工业出版社,59
Python语言及其应用,[美] Bill Lubanovic,本书介绍Python 语言的基础知识及其在各个领域的具体应用，基于最新版本3.x。书中首先介绍了Python 语言的一些必备基本知识，然后介绍了在商业、科研以及艺术领域使用Python 开发各种应用的实例。文字简洁明了，案例丰富实用，是一本难得的Python 入门手册。,人民邮电出版社,79.00元
Python Cookbook,|Alex Martelli,Anna Ravenscroft,David Ascher|,|本书介绍了Python应用在各个领域中的一些使用技巧和方法，从最基本的字符、文件序列、字典和排序，到进阶的面向对象编程、数据库和数据持久化、 XML处理和Web编程，再到比较高级和抽象的描述符、装饰器、元类、迭代器和生成器，均有涉及。书中还介绍了一些第三方包和库的使用，包括 Twisted、GIL、PyWin32等。本书覆盖了Python应用中的很多常见问题，并提出了通用的解决方案。书中的代码和方法具有很强的实用性，可以方便地应用到实际的项目中，并产生立竿见影的效果。尤为难得的是，本书的各位作者都具有丰富的业界实践经验，因此，本书不仅给出了对各种问题的解决方案，同时还体现了很多专家的思维方式和良好的编程习惯，与具体的细节性知识相比，这部分内容无疑是本书的精华。
本书适合具有一定Python基础的读者阅读参考。|,人民邮电出版社,99.00元
Dive Into Python,Mark Pilgrim,Dive Into Python 是为有经验的程序员编写的一本 Python 书。,Apress,USD 39.99
Python for Data Analysis,Wesly McKinney,|这本书主要是用 pandas 连接 SciPy 和 NumPy，用pandas做数据处理是Pycon2012上一个很热门的话题。另一个功能强大的东西是Sage，它将很多开源的软件集成到统一的 Python 接口。
Python for Data Analysis is concerned with the nuts and bolts of manipulating, processing, cleaning, and crunching data in Python. It is also a practical, modern introduction to scientific computing in Python, tailored for data-intensive applications. This is a book about the parts of the Python language and libraries you’ll need to effectively solve a broad set of data analysis problems. This book is not an exposition on analytical methods using Python as the implementation language.
Written by Wes McKinney, the main author of the pandas library, this hands-on book is packed with practical cases studies. It’s ideal for analysts new to Python and for Python programmers new to scientific computing.
Use the IPython interactive shell as your primary development environment
Learn basic and advanced NumPy (Numerical Python) features
Get started with data analysis tools in the pandas library
Use high-performance tools to load, clean, transform, merge, and reshape data
Create scatter plots and static or interactive visualizations with matplotlib
Apply the pandas groupby facility to slice, dice, and summarize datasets
Measure data by points in time, whether it’s specific instances, fixed periods, or intervals
Learn how to solve problems in web analytics, social sciences, finance, and economics, through detailed examples|,O'Reilly Media,
Python学习手册（第4版）,[美] Mark Lutz,|Google和YouTube由于Python的高可适应性、易于维护以及适合于快速开发而采用它。如果你想要编写高质量、高效的并且易于与其他语言和工具集成的代码，《Python学习手册：第4 版》将帮助你使用Python快速实现这一点，不管你是编程新手还是Python初学者。本书是易于掌握和自学的教程，根据作者Python专家Mark Lutz的著名培训课程编写而成。
《Python学习手册：第4版》每一章都包含关于Python语言的关键内容的独立的一课，并且包含了一个独特的“练习题”部分，其中带有实际的练习和测试，以便你可以练习新的技能并随着学习而测试自己的理解。你会发现众多带有注释的示例以及图表，它们将帮助你开始学习Python 3.0。
《Python学习手册：第4版》包括以下内容：
学习Python的主要内建对象类型：数字、列表和字典。
使用Python语句创建和处理对象，并且学习Python的通用语法模型。
使用函数构造和重用代码，函数是Python的基本过程工具。
学习Python模块：封装语句、函数以及其他工具，从而可以组织成较大的组件。
Python的面向对象编程工具，用于组织程序代码。
学习异常处理模型，以及用于编写较大程序的开发工具。
了解包括装饰器、描述器、元类和Unicode处理等高级Python工具。|,机械工业出版社,119.00元
Flask Web Development,Miguel Grinberg,,O'Reilly Media,USD 24.99
可爱的Python,哲思社区,|本书的内容主要来自CPyUG社区的邮件列表，由Python的行者根据自身经验组织而成，是为从来没有听说过Python的其他语言程序员准备的一份实用的导学性质的书。笔者试图将优化后的学习体验，通过故事的方式传达给读者，同时也分享了蟒样（Pythonic式）的知识获取技巧，而且希望将最常用的代码和思路，通过作弊条（Cheat Sheet，提示表单）的形式分享给有初步基础的Python 用户，来帮助大家多快好省地完成功能。
本书期望成为学习使用Python的同好们的沟通话题，引发进一步的学习\/应用\/创造\/推广，就是笔者的追求！因为Python语言本身是种非常灵活的动态脚本语言，同一个目标可以使用多种方式完成，笔者为了让拥有各种不同技术背景的读者可以快速无碍地理解，选择了一种实际上可能比较笨拙的方式来实现功能，聪明的读者一定可以看出来的，那么请会心一笑，因为您已经和我们心灵相通了！|,电子工业出版社,55.00元
Effective Python,Brett Slatkin,,Addison-Wesley Professional,USD 39.99
Python核心编程（第二版）,[美]Wesley J. Chun（陳仲才）,|本书是Python开发者的完全指南——针对 Python 2.5全面升级
·学习专业的Python风格、最佳实践和好的编程习惯；
·加强对Python对象、内存模型和Python面向对象特性的深入理解；
·构建更有效的Web、CGI、互联网、网络和其他客户端\/服务器架构应用程序及软件；
·学习如何使用Python中的Tkinter和其他工具来开发自己的GUI应用程序及软件；
·通过用C等语言编写扩展来提升Python应用程序的性能，或者通过使用多线程增强I\/0相关的应用程序的能力；
·学习Python中有关数据库的API，以及如何在Python中使用各种不同的数据库系统，包括MySQL、Postgres和 SQLite。|,人民邮电出版社,89.00元
贝叶斯思维,[美]Allen B. Downey（艾伦·唐尼）,|这本书帮助那些希望用数学工具解决实际问题的人们，仅有的要求可能就是懂一点概率知识和程序设计。而贝叶斯方法是一种常见的利用概率学知识去解决不确定性问题的数学方法，对于一个计算机专业的人士，应当熟悉其应用在诸如机器翻译，语音识别，垃圾邮件检测等常见的计算机问题领域。
可是本书实际上会远远扩大你的视野，即使不是一个计算机专业的人士，你也可以看到在战争环境下（二战德军坦克问题），法律问题上（肾肿瘤的假设验证），体育博彩领域（棕熊队和加人队NFL比赛问题）贝叶斯方法的威力。怎么从有限的信息判断德军装甲部队的规模，你所支持的球队有多大可能赢得冠军，在《龙与地下城》勇士中，你应当对游戏角色属性的最大值有什么样的期望，甚至在普通的彩弹射击游戏中，拥有一些贝叶斯思维也能帮助到你提高游戏水平。
除此以外，本书在共计15章的篇幅中讨论了怎样解决十几个现实生活中的实际问题。在这些问题的解决过程中，作者还潜移默化的帮助读者形成了建模决策的方法论，建模误差和数值误差怎么取舍，怎样为具体问题建立数学模型，如何抓住问题中的主要矛盾（模型中的关键参数），再一步一步的优化或者验证模型的有效性或者局限性。在这个意义上，这本书又是一本关于数学建模的成功样本。|,人民邮电出版社,49.00
Django Web开发指南,|Jeff Forcier,Paul Bissex|,本书讲述如何用Python框架Django构建出强大的Web解决方案，本书讲解了使用新的Django 1.0版的各种主要特性所需要的技术、工具以及概念。 全书分为12章和6个附录，内容包括，Django Python实战，Django速成：构建一个Blog，起始，定义和使用模型，URL、HTTP机制和视图，模板和表单处理，Photo Gallery，内容管理系统，Liveblog，Pastebin，高级Django编程，高级Django部署。附录内容包括命令行基础，安装运行Django，实用Django开发工具，发现、评估、使用Django应用程序，在Google App Engine上使用Django，参与Django项目。 本书适用于Python框架Django初学者，Django Web开发技术人员。,机械工业出版社,49.00元
Python源码剖析,陈儒,|作为主流的动态语言，Python不仅简单易学、移植性好，而且拥有强大丰富的库的支持。此外，Python强大的可扩展性，让开发人员既可以非常容易地利用C\/C++编写Python的扩展模块，还能将Python嵌入到C\/C++程序中，为自己的系统添加动态扩展和动态编程的能力。.
为了更好地利用Python语言，无论是使用Python语言本身，还是将Python与C\/C++交互使用，深刻理解Python的运行原理都是非常重要的。本书以CPython为研究对象，在C代码一级，深入细致地剖析了Python的实现。书中不仅包括了对大量Python内置对象的剖析，更将大量的篇幅用于对Python虚拟机及Python高级特性的剖析。通过此书，读者能够透彻地理解Python中的一般表达式、控制结构、异常机制、类机制、多线程机制、模块的动态加载机制、内存管理机制等核心技术的运行原理，同时，本书所揭示的动态语言的核心技术对于理解其他动态语言，如 Javascript、Ruby等也有较大的参考价值。..
本书适合于Python程序员、动态语言爱好者、C程序员阅读|,电子工业出版社,69.80元
Python学习手册,Mark Lutz,|《Python学习手册(第3版)》讲述了：Python可移植、功能强大、易于使用，是编写独立应用程序和脚本应用程序的理想选择。无论你是刚接触编程或者刚接触Python，通过学习《Python学习手册(第3版)》，你可以迅速高效地精通核心Python语言基础。读完《Python学习手册(第3版)》，你会对这门语言有足够的了解，从而可以在你所从事的任何应用领域中使用它。
《Python学习手册(第3版)》是作者根据过去10年用于教学而广为人知的培训课程的材料编写而成的。除了有许多详实说明和每章小结之外，每章还包括一个头脑风暴：这是《Python学习手册(第3版)》独特的一部分，配合以实用的练习题和复习题，让读者练习新学的技巧并测试自己的理解程度。
《Python学习手册(第3版)》包括：
类型和操作——深入讨论Python主要的内置对象类型：数字、列表和字典等。
语句和语法——在Python中输入代码来建立并处理对象，以及Python一般的语法模型。
函数——Python基本的面向过程工具，用于组织代码和重用。
模块——封装语句、函数以及其他工具，从而可以组织成较大的组件。
类和OOP——Python可选的面向对象编程工具，可用于组织程序代码从而实现定制和重用。
异常和工具——异常处理模型和语句，并介绍编写更大程序的开发工具。
讨论Python 3.0。
《Python学习手册(第3版)》让你对Python语言有深入而完整的了解，从而帮助你理解今后遇到的任何Python应用程序实例。如果你准备探索Google和YouTube为什么选中了Python，《Python学习手册(第3版)》就是你入门的最佳指南。|,机械工业出版社,89.00元
Python入门经典,(美)William F. Punch\/Richard Enbody,《Python入门经典:以解决计算问题为导向的Python编程实践》是一本系统而科学的Python入门教程，美国密歇根州立大学等多所美国知名高校采用其作为编程语言的入门教材，被奉为经典。它不仅从计算机教学和计算机科学的角度讲解了初学者如何才能更有效地去学习Python，而且特别强调用Python解决生活中的实际问题，精心组织了大量来源于生活中不同领域的与数值计算和数据处理相关的案例。通过《Python入门经典:以解决计算问题为导向的Python编程实践》，读者不仅能系统掌握Python编程相关的知识，而且还能掌握利用Python处理各种与数据相关的问题。《Python入门经典:以解决计算问题为导向的Python编程实践》分为五部分，第一部分介绍计算机设备的一般概念和一些计算机术语；第二部分开始介绍编程的基本知识，包括入门知识和控制语句，为后续内容做铺垫；第三部分讲述数据结构和函数，包括字符串、列表和元组、字典和集合、文件、函数、算法和程序等进阶内容，有助于读者提升编程技能；第四部分重点介绍如何使用类定义数据结构和算法、开发程序等，培养读者运用Python语言来实现基本的计算思想和策略的能力；第五部分主要介绍异常、测试和递归，旨在使读者成为更好的程序员。《Python入门经典:以解决计算问题为导向的Python编程实践》深入浅出，每一章节均给出了大量的实例、示范代码和自测练习，便于读者理解和掌握相关知识。读者通过学习《Python入门经典:以解决计算问题为导向的Python编程实践》，不仅能掌握Python语言的基本知识，还能学习如何在实践中运用该语言解决问题。,机械工业出版社,79.00元
学习Python,|Mark Lutz,David Ascher|,|Python是流行、开源、面向对象的编程语言，既可以用于编写单机运行的程序也可以编写脚本程序，具有可移植、强大、易用等特点。跟随专业教师学习是最快捷的掌握此语言的方式。新版的《学习Python》把你带到Mark Lutz和David Ascher面前，他们是著名的Python专家和培训师，他们的用语亲切、组织良好的文章已经指导了许多编程者精通这种语言。
《学习Python（第二版）》给程序员提供了一个学习Python和面向对象编程的综合学习工具。它根据1999年该书第一版发布以来Python语言的大量变化做了更新。本书介绍了最近发布的Python 2.3的基本要素并涵盖了新的特性，如列表内涵，嵌套作用域和迭代器\/产生器。
除了语言特性，《学习Python（第二版）》还为初级程序员提供了新的内容，包括新的面向对象编程和动态类型回顾，新的关于编程起步和配置选项的讨论，新的关于文档的内容等等。全书用新的实例使得语言特性的应用更加具体。
《学习Python（第二版）》首先给出了理解和构造Python程序必需的所有信息，包括类型、运算符、表达式、类、函数、模块和异常。然后，作者给出了更高级的内容，通过真实的应用和可用扩展库说明如何用Python完成一般的任务。全书提供了练习以检验自己的新技能。
《学习Python（第二版）》是本可灵活选读的图书，它让读者能够集中深入Python语言的核心。随着通读全书，你将获得对Python深入而完整的理解，这将帮助你自己开发大型的应用程序。本书适合于任何不仅仅想停留于了解Python而且想更好地掌握它的人。
对本书第一版的褒奖：
“这本书最优之处是作者在提供有用的实例与详细解释说明之间取得近乎完美的平衡。无论你是有经验的计算机程序员还是初学者，这本书对于学习Python语言都是非常适合的。”
——Andrew Morrison, CedarLug|,东南大学出版社,68.00元
python绝技：运用python成为顶级黑客,[美] TJ O'Connor,|Python 是一门常用的编程语言，它不仅上手容易，而且还拥有丰富的支持库。对经常需要针对自己所 处的特定场景编写专用工具的黑客、计算机犯罪调查人员、渗透测试师和安全工程师来说，Python 的这些 特点可以帮助他们又快又好地完成这一任务，以极少的代码量实现所需的功能。《Python绝技：运用Python成为顶级黑客》结合具体的场景和真 实的案例，详述了 Python 在渗透测试、电子取证、网络流量分析、无线安全、网站中信息的自动抓取、 病毒免杀等领域内所发挥的巨大作用。
《Python绝技：运用Python成为顶级黑客》适合计算机安全管理人员、计算机犯罪调查和电子取证人员、渗透测试人员，以及所有对计算机 安全感兴趣的爱好者阅读。同时也可供计算机、信息安全及相关专业的本\/专科院校师生学习参考。|,电子工业出版社,79.00元
Expert Python Programming,Tarek Ziadé,|Python is a dynamic programming language, used in a wide range of domains by programmers who find it simple, yet powerful. From the earliest version 15 years ago to the current one, it has constantly evolved with productivity and code readability in mind.
Even if you find writing Python code easy, writing code that is efficient and easy to maintain and reuse is not so straightforward. This book will show you how to do just that:  it will show you how Python development should be done. Python expert Tarek Ziadé takes you on a practical tour of Python application development, beginning with setting up the best development environment, and along the way looking at agile methodologies in Python, and applying proven object-oriented principles to your design.|,Packt,45
"笨办法"学Python,肖 (Zed A.Shaw),|本书是一本Python入门书籍，适合对计算机了解不多，没有学过编程，但对编程感兴趣的读者学习使用。这本书以习题的方式引导读者一步一步学习编程，从简单的打印一直讲到完整项目的实现，让初学者从基础的编程技术入手，最终体验到软件开发的基本过程。
本书结构非常简单，共包括52个习题，其中26个覆盖了输入\/输出、变量和函数三个主题，另外26个覆盖了一些比较高级的话题，如条件判断、循环、类和对象、代码测试及项目的实现等。每一章的格式基本相同，以代码习题开始，按照说明编写代码，运行并检查结果，然后再做附加练习。
Zed Shaw完善了这个堪称世上最好的Python学习系统。只要跟着学习，你就会和迄今为止数十万Zed教过的初学者一样获得成功。
在这本书中，你将通过完成52个精心设计的习题来学会Python。阅读这些习题，把习题的代码精确地写出来（禁止复制和粘贴！），修正你的错误，观察程序的运行。在这个过程中，你将了解软件是如何工作的，好的程序看起来是什么样子，怎样阅读、编写、思考代码，以及如何用专业程序员的技巧来找出并修正错误。最重要的是，你将学到下面这些编写优秀的Python软件必需的初始技能。
这本书会让你的每一分钟投入都有回报。Python是世界上最强大、最受欢迎的编程语言之一，很快你就会成为一名Python程序员。
你还可以看Zed的视频！随书附赠的DVD中包含5个多小时激情挥洒的教学内容：一部完整的Python视频教程！|,人民邮电出版社,CNY 49.00
Effective Python,布雷特·斯拉特金（Brett Slatkin）,|用Python编写程序，是相当容易的，所以这门语言非常流行。但若想掌握Python所特有的优势、魅力和表达能力，则相当困难，而且语言中还有很多隐藏的陷阱，容易令开发者犯错。
本书可以帮你掌握真正的Pythonic编程方式，令你能够完全发挥出Python语言的强大功能，并写出健壮而高效的代码。Scott Meyers在畅销书《Effective C++》中开创了一种以使用场景为主导的精练教学方式，本书作者Brett Slatkin就以这种方式汇聚了59条优秀的实践原则、开发技巧和便捷方案，并以实用的代码范例来解释它们。
Slatkin根据自己在Google公司多年开发Python基础架构所积累的经验，揭示Python语言中一些鲜为人知的微妙特性，并给出了能够改善代码功能及运行效率的习惯用法。通过本书，你能够了解到解决关键编程任务所用的最佳方式，并学会编写易于理解、便于维护且利于改进的代码。
本书核心内容包括：
涵盖Python 3.x及Python 2.x主要应用领域的实用指南，以及与之配套的详细解释及代码范例。
与函数相关的编程建议，这些建议有助于我们写出意图清晰、便于复用且缺陷较少的函数。
如何准确地表达类与对象的行为。
在使用元类和动态属性时，如何避免错误的用法。
更为高效的并发及并行方式。
与Python内置模块相关的编程技巧和习惯用法。
多人协作时所用的开发工具和最佳实践方式。
旨在改善代码质量和程序性能的调试、测试与优化方案。|,机械工业出版社,59
Python语言及其应用,[美] Bill Lubanovic,本书介绍Python 语言的基础知识及其在各个领域的具体应用，基于最新版本3.x。书中首先介绍了Python 语言的一些必备基本知识，然后介绍了在商业、科研以及艺术领域使用Python 开发各种应用的实例。文字简洁明了，案例丰富实用，是一本难得的Python 入门手册。,人民邮电出版社,79.00元
Python Cookbook,|Alex Martelli,Anna Ravenscroft,David Ascher|,|本书介绍了Python应用在各个领域中的一些使用技巧和方法，从最基本的字符、文件序列、字典和排序，到进阶的面向对象编程、数据库和数据持久化、 XML处理和Web编程，再到比较高级和抽象的描述符、装饰器、元类、迭代器和生成器，均有涉及。书中还介绍了一些第三方包和库的使用，包括 Twisted、GIL、PyWin32等。本书覆盖了Python应用中的很多常见问题，并提出了通用的解决方案。书中的代码和方法具有很强的实用性，可以方便地应用到实际的项目中，并产生立竿见影的效果。尤为难得的是，本书的各位作者都具有丰富的业界实践经验，因此，本书不仅给出了对各种问题的解决方案，同时还体现了很多专家的思维方式和良好的编程习惯，与具体的细节性知识相比，这部分内容无疑是本书的精华。
本书适合具有一定Python基础的读者阅读参考。|,人民邮电出版社,99.00元
Dive Into Python,Mark Pilgrim,Dive Into Python 是为有经验的程序员编写的一本 Python 书。,Apress,USD 39.99
Python for Data Analysis,Wesly McKinney,|这本书主要是用 pandas 连接 SciPy 和 NumPy，用pandas做数据处理是Pycon2012上一个很热门的话题。另一个功能强大的东西是Sage，它将很多开源的软件集成到统一的 Python 接口。
Python for Data Analysis is concerned with the nuts and bolts of manipulating, processing, cleaning, and crunching data in Python. It is also a practical, modern introduction to scientific computing in Python, tailored for data-intensive applications. This is a book about the parts of the Python language and libraries you’ll need to effectively solve a broad set of data analysis problems. This book is not an exposition on analytical methods using Python as the implementation language.
Written by Wes McKinney, the main author of the pandas library, this hands-on book is packed with practical cases studies. It’s ideal for analysts new to Python and for Python programmers new to scientific computing.
Use the IPython interactive shell as your primary development environment
Learn basic and advanced NumPy (Numerical Python) features
Get started with data analysis tools in the pandas library
Use high-performance tools to load, clean, transform, merge, and reshape data
Create scatter plots and static or interactive visualizations with matplotlib
Apply the pandas groupby facility to slice, dice, and summarize datasets
Measure data by points in time, whether it’s specific instances, fixed periods, or intervals
Learn how to solve problems in web analytics, social sciences, finance, and economics, through detailed examples|,O'Reilly Media,
Python学习手册（第4版）,[美] Mark Lutz,|Google和YouTube由于Python的高可适应性、易于维护以及适合于快速开发而采用它。如果你想要编写高质量、高效的并且易于与其他语言和工具集成的代码，《Python学习手册：第4 版》将帮助你使用Python快速实现这一点，不管你是编程新手还是Python初学者。本书是易于掌握和自学的教程，根据作者Python专家Mark Lutz的著名培训课程编写而成。
《Python学习手册：第4版》每一章都包含关于Python语言的关键内容的独立的一课，并且包含了一个独特的“练习题”部分，其中带有实际的练习和测试，以便你可以练习新的技能并随着学习而测试自己的理解。你会发现众多带有注释的示例以及图表，它们将帮助你开始学习Python 3.0。
《Python学习手册：第4版》包括以下内容：
学习Python的主要内建对象类型：数字、列表和字典。
使用Python语句创建和处理对象，并且学习Python的通用语法模型。
使用函数构造和重用代码，函数是Python的基本过程工具。
学习Python模块：封装语句、函数以及其他工具，从而可以组织成较大的组件。
Python的面向对象编程工具，用于组织程序代码。
学习异常处理模型，以及用于编写较大程序的开发工具。
了解包括装饰器、描述器、元类和Unicode处理等高级Python工具。|,机械工业出版社,119.00元
Flask Web Development,Miguel Grinberg,,O'Reilly Media,USD 24.99
可爱的Python,哲思社区,|本书的内容主要来自CPyUG社区的邮件列表，由Python的行者根据自身经验组织而成，是为从来没有听说过Python的其他语言程序员准备的一份实用的导学性质的书。笔者试图将优化后的学习体验，通过故事的方式传达给读者，同时也分享了蟒样（Pythonic式）的知识获取技巧，而且希望将最常用的代码和思路，通过作弊条（Cheat Sheet，提示表单）的形式分享给有初步基础的Python 用户，来帮助大家多快好省地完成功能。
本书期望成为学习使用Python的同好们的沟通话题，引发进一步的学习\/应用\/创造\/推广，就是笔者的追求！因为Python语言本身是种非常灵活的动态脚本语言，同一个目标可以使用多种方式完成，笔者为了让拥有各种不同技术背景的读者可以快速无碍地理解，选择了一种实际上可能比较笨拙的方式来实现功能，聪明的读者一定可以看出来的，那么请会心一笑，因为您已经和我们心灵相通了！|,电子工业出版社,55.00元
Effective Python,Brett Slatkin,,Addison-Wesley Professional,USD 39.99
Python网络数据采集,米切尔 (Ryan Mitchell),本书采用简洁强大的Python语言，介绍了网络数据采集，并为采集新式网络中的各种数据类型提供了全面的指导。第一部分重点介绍网络数据采集的基本原理：如何用Python从网络服务器请求信息，如何对服务器的响应进行基本处理，以及如何以自动化手段与网站进行交互。第二部分介绍如何用网络爬虫测试网站，自动化处理，以及如何通过更多的方式接入网络。,人民邮电出版社,CNY 59.00
贝叶斯思维,[美]Allen B. Downey（艾伦·唐尼）,|这本书帮助那些希望用数学工具解决实际问题的人们，仅有的要求可能就是懂一点概率知识和程序设计。而贝叶斯方法是一种常见的利用概率学知识去解决不确定性问题的数学方法，对于一个计算机专业的人士，应当熟悉其应用在诸如机器翻译，语音识别，垃圾邮件检测等常见的计算机问题领域。
可是本书实际上会远远扩大你的视野，即使不是一个计算机专业的人士，你也可以看到在战争环境下（二战德军坦克问题），法律问题上（肾肿瘤的假设验证），体育博彩领域（棕熊队和加人队NFL比赛问题）贝叶斯方法的威力。怎么从有限的信息判断德军装甲部队的规模，你所支持的球队有多大可能赢得冠军，在《龙与地下城》勇士中，你应当对游戏角色属性的最大值有什么样的期望，甚至在普通的彩弹射击游戏中，拥有一些贝叶斯思维也能帮助到你提高游戏水平。
除此以外，本书在共计15章的篇幅中讨论了怎样解决十几个现实生活中的实际问题。在这些问题的解决过程中，作者还潜移默化的帮助读者形成了建模决策的方法论，建模误差和数值误差怎么取舍，怎样为具体问题建立数学模型，如何抓住问题中的主要矛盾（模型中的关键参数），再一步一步的优化或者验证模型的有效性或者局限性。在这个意义上，这本书又是一本关于数学建模的成功样本。|,人民邮电出版社,49.00
Django Web开发指南,|Jeff Forcier,Paul Bissex|,本书讲述如何用Python框架Django构建出强大的Web解决方案，本书讲解了使用新的Django 1.0版的各种主要特性所需要的技术、工具以及概念。 全书分为12章和6个附录，内容包括，Django Python实战，Django速成：构建一个Blog，起始，定义和使用模型，URL、HTTP机制和视图，模板和表单处理，Photo Gallery，内容管理系统，Liveblog，Pastebin，高级Django编程，高级Django部署。附录内容包括命令行基础，安装运行Django，实用Django开发工具，发现、评估、使用Django应用程序，在Google App Engine上使用Django，参与Django项目。 本书适用于Python框架Django初学者，Django Web开发技术人员。,机械工业出版社,49.00元
Python源码剖析,陈儒,|作为主流的动态语言，Python不仅简单易学、移植性好，而且拥有强大丰富的库的支持。此外，Python强大的可扩展性，让开发人员既可以非常容易地利用C\/C++编写Python的扩展模块，还能将Python嵌入到C\/C++程序中，为自己的系统添加动态扩展和动态编程的能力。.
为了更好地利用Python语言，无论是使用Python语言本身，还是将Python与C\/C++交互使用，深刻理解Python的运行原理都是非常重要的。本书以CPython为研究对象，在C代码一级，深入细致地剖析了Python的实现。书中不仅包括了对大量Python内置对象的剖析，更将大量的篇幅用于对Python虚拟机及Python高级特性的剖析。通过此书，读者能够透彻地理解Python中的一般表达式、控制结构、异常机制、类机制、多线程机制、模块的动态加载机制、内存管理机制等核心技术的运行原理，同时，本书所揭示的动态语言的核心技术对于理解其他动态语言，如 Javascript、Ruby等也有较大的参考价值。..
本书适合于Python程序员、动态语言爱好者、C程序员阅读|,电子工业出版社,69.80元
Python学习手册,Mark Lutz,|《Python学习手册(第3版)》讲述了：Python可移植、功能强大、易于使用，是编写独立应用程序和脚本应用程序的理想选择。无论你是刚接触编程或者刚接触Python，通过学习《Python学习手册(第3版)》，你可以迅速高效地精通核心Python语言基础。读完《Python学习手册(第3版)》，你会对这门语言有足够的了解，从而可以在你所从事的任何应用领域中使用它。
《Python学习手册(第3版)》是作者根据过去10年用于教学而广为人知的培训课程的材料编写而成的。除了有许多详实说明和每章小结之外，每章还包括一个头脑风暴：这是《Python学习手册(第3版)》独特的一部分，配合以实用的练习题和复习题，让读者练习新学的技巧并测试自己的理解程度。
《Python学习手册(第3版)》包括：
类型和操作——深入讨论Python主要的内置对象类型：数字、列表和字典等。
语句和语法——在Python中输入代码来建立并处理对象，以及Python一般的语法模型。
函数——Python基本的面向过程工具，用于组织代码和重用。
模块——封装语句、函数以及其他工具，从而可以组织成较大的组件。
类和OOP——Python可选的面向对象编程工具，可用于组织程序代码从而实现定制和重用。
异常和工具——异常处理模型和语句，并介绍编写更大程序的开发工具。
讨论Python 3.0。
《Python学习手册(第3版)》让你对Python语言有深入而完整的了解，从而帮助你理解今后遇到的任何Python应用程序实例。如果你准备探索Google和YouTube为什么选中了Python，《Python学习手册(第3版)》就是你入门的最佳指南。|,机械工业出版社,89.00元
Python入门经典,(美)William F. Punch\/Richard Enbody,《Python入门经典:以解决计算问题为导向的Python编程实践》是一本系统而科学的Python入门教程，美国密歇根州立大学等多所美国知名高校采用其作为编程语言的入门教材，被奉为经典。它不仅从计算机教学和计算机科学的角度讲解了初学者如何才能更有效地去学习Python，而且特别强调用Python解决生活中的实际问题，精心组织了大量来源于生活中不同领域的与数值计算和数据处理相关的案例。通过《Python入门经典:以解决计算问题为导向的Python编程实践》，读者不仅能系统掌握Python编程相关的知识，而且还能掌握利用Python处理各种与数据相关的问题。《Python入门经典:以解决计算问题为导向的Python编程实践》分为五部分，第一部分介绍计算机设备的一般概念和一些计算机术语；第二部分开始介绍编程的基本知识，包括入门知识和控制语句，为后续内容做铺垫；第三部分讲述数据结构和函数，包括字符串、列表和元组、字典和集合、文件、函数、算法和程序等进阶内容，有助于读者提升编程技能；第四部分重点介绍如何使用类定义数据结构和算法、开发程序等，培养读者运用Python语言来实现基本的计算思想和策略的能力；第五部分主要介绍异常、测试和递归，旨在使读者成为更好的程序员。《Python入门经典:以解决计算问题为导向的Python编程实践》深入浅出，每一章节均给出了大量的实例、示范代码和自测练习，便于读者理解和掌握相关知识。读者通过学习《Python入门经典:以解决计算问题为导向的Python编程实践》，不仅能掌握Python语言的基本知识，还能学习如何在实践中运用该语言解决问题。,机械工业出版社,79.00元
学习Python,|Mark Lutz,David Ascher|,|Python是流行、开源、面向对象的编程语言，既可以用于编写单机运行的程序也可以编写脚本程序，具有可移植、强大、易用等特点。跟随专业教师学习是最快捷的掌握此语言的方式。新版的《学习Python》把你带到Mark Lutz和David Ascher面前，他们是著名的Python专家和培训师，他们的用语亲切、组织良好的文章已经指导了许多编程者精通这种语言。
《学习Python（第二版）》给程序员提供了一个学习Python和面向对象编程的综合学习工具。它根据1999年该书第一版发布以来Python语言的大量变化做了更新。本书介绍了最近发布的Python 2.3的基本要素并涵盖了新的特性，如列表内涵，嵌套作用域和迭代器\/产生器。
除了语言特性，《学习Python（第二版）》还为初级程序员提供了新的内容，包括新的面向对象编程和动态类型回顾，新的关于编程起步和配置选项的讨论，新的关于文档的内容等等。全书用新的实例使得语言特性的应用更加具体。
《学习Python（第二版）》首先给出了理解和构造Python程序必需的所有信息，包括类型、运算符、表达式、类、函数、模块和异常。然后，作者给出了更高级的内容，通过真实的应用和可用扩展库说明如何用Python完成一般的任务。全书提供了练习以检验自己的新技能。
《学习Python（第二版）》是本可灵活选读的图书，它让读者能够集中深入Python语言的核心。随着通读全书，你将获得对Python深入而完整的理解，这将帮助你自己开发大型的应用程序。本书适合于任何不仅仅想停留于了解Python而且想更好地掌握它的人。
对本书第一版的褒奖：
“这本书最优之处是作者在提供有用的实例与详细解释说明之间取得近乎完美的平衡。无论你是有经验的计算机程序员还是初学者，这本书对于学习Python语言都是非常适合的。”
——Andrew Morrison, CedarLug|,东南大学出版社,68.00元
python绝技：运用python成为顶级黑客,[美] TJ O'Connor,|Python 是一门常用的编程语言，它不仅上手容易，而且还拥有丰富的支持库。对经常需要针对自己所 处的特定场景编写专用工具的黑客、计算机犯罪调查人员、渗透测试师和安全工程师来说，Python 的这些 特点可以帮助他们又快又好地完成这一任务，以极少的代码量实现所需的功能。《Python绝技：运用Python成为顶级黑客》结合具体的场景和真 实的案例，详述了 Python 在渗透测试、电子取证、网络流量分析、无线安全、网站中信息的自动抓取、 病毒免杀等领域内所发挥的巨大作用。
《Python绝技：运用Python成为顶级黑客》适合计算机安全管理人员、计算机犯罪调查和电子取证人员、渗透测试人员，以及所有对计算机 安全感兴趣的爱好者阅读。同时也可供计算机、信息安全及相关专业的本\/专科院校师生学习参考。|,电子工业出版社,79.00元
Expert Python Programming,Tarek Ziadé,|Python is a dynamic programming language, used in a wide range of domains by programmers who find it simple, yet powerful. From the earliest version 15 years ago to the current one, it has constantly evolved with productivity and code readability in mind.
Even if you find writing Python code easy, writing code that is efficient and easy to maintain and reuse is not so straightforward. This book will show you how to do just that:  it will show you how Python development should be done. Python expert Tarek Ziadé takes you on a practical tour of Python application development, beginning with setting up the best development environment, and along the way looking at agile methodologies in Python, and applying proven object-oriented principles to your design.|,Packt,45
"笨办法"学Python,肖 (Zed A.Shaw),|本书是一本Python入门书籍，适合对计算机了解不多，没有学过编程，但对编程感兴趣的读者学习使用。这本书以习题的方式引导读者一步一步学习编程，从简单的打印一直讲到完整项目的实现，让初学者从基础的编程技术入手，最终体验到软件开发的基本过程。
本书结构非常简单，共包括52个习题，其中26个覆盖了输入\/输出、变量和函数三个主题，另外26个覆盖了一些比较高级的话题，如条件判断、循环、类和对象、代码测试及项目的实现等。每一章的格式基本相同，以代码习题开始，按照说明编写代码，运行并检查结果，然后再做附加练习。
Zed Shaw完善了这个堪称世上最好的Python学习系统。只要跟着学习，你就会和迄今为止数十万Zed教过的初学者一样获得成功。
在这本书中，你将通过完成52个精心设计的习题来学会Python。阅读这些习题，把习题的代码精确地写出来（禁止复制和粘贴！），修正你的错误，观察程序的运行。在这个过程中，你将了解软件是如何工作的，好的程序看起来是什么样子，怎样阅读、编写、思考代码，以及如何用专业程序员的技巧来找出并修正错误。最重要的是，你将学到下面这些编写优秀的Python软件必需的初始技能。
这本书会让你的每一分钟投入都有回报。Python是世界上最强大、最受欢迎的编程语言之一，很快你就会成为一名Python程序员。
你还可以看Zed的视频！随书附赠的DVD中包含5个多小时激情挥洒的教学内容：一部完整的Python视频教程！|,人民邮电出版社,CNY 49.00
Effective Python,布雷特·斯拉特金（Brett Slatkin）,|用Python编写程序，是相当容易的，所以这门语言非常流行。但若想掌握Python所特有的优势、魅力和表达能力，则相当困难，而且语言中还有很多隐藏的陷阱，容易令开发者犯错。
本书可以帮你掌握真正的Pythonic编程方式，令你能够完全发挥出Python语言的强大功能，并写出健壮而高效的代码。Scott Meyers在畅销书《Effective C++》中开创了一种以使用场景为主导的精练教学方式，本书作者Brett Slatkin就以这种方式汇聚了59条优秀的实践原则、开发技巧和便捷方案，并以实用的代码范例来解释它们。
Slatkin根据自己在Google公司多年开发Python基础架构所积累的经验，揭示Python语言中一些鲜为人知的微妙特性，并给出了能够改善代码功能及运行效率的习惯用法。通过本书，你能够了解到解决关键编程任务所用的最佳方式，并学会编写易于理解、便于维护且利于改进的代码。
本书核心内容包括：
涵盖Python 3.x及Python 2.x主要应用领域的实用指南，以及与之配套的详细解释及代码范例。
与函数相关的编程建议，这些建议有助于我们写出意图清晰、便于复用且缺陷较少的函数。
如何准确地表达类与对象的行为。
在使用元类和动态属性时，如何避免错误的用法。
更为高效的并发及并行方式。
与Python内置模块相关的编程技巧和习惯用法。
多人协作时所用的开发工具和最佳实践方式。
旨在改善代码质量和程序性能的调试、测试与优化方案。|,机械工业出版社,59
Python语言及其应用,[美] Bill Lubanovic,本书介绍Python 语言的基础知识及其在各个领域的具体应用，基于最新版本3.x。书中首先介绍了Python 语言的一些必备基本知识，然后介绍了在商业、科研以及艺术领域使用Python 开发各种应用的实例。文字简洁明了，案例丰富实用，是一本难得的Python 入门手册。,人民邮电出版社,79.00元
Python Cookbook,|Alex Martelli,Anna Ravenscroft,David Ascher|,|本书介绍了Python应用在各个领域中的一些使用技巧和方法，从最基本的字符、文件序列、字典和排序，到进阶的面向对象编程、数据库和数据持久化、 XML处理和Web编程，再到比较高级和抽象的描述符、装饰器、元类、迭代器和生成器，均有涉及。书中还介绍了一些第三方包和库的使用，包括 Twisted、GIL、PyWin32等。本书覆盖了Python应用中的很多常见问题，并提出了通用的解决方案。书中的代码和方法具有很强的实用性，可以方便地应用到实际的项目中，并产生立竿见影的效果。尤为难得的是，本书的各位作者都具有丰富的业界实践经验，因此，本书不仅给出了对各种问题的解决方案，同时还体现了很多专家的思维方式和良好的编程习惯，与具体的细节性知识相比，这部分内容无疑是本书的精华。
本书适合具有一定Python基础的读者阅读参考。|,人民邮电出版社,99.00元
Dive Into Python,Mark Pilgrim,Dive Into Python 是为有经验的程序员编写的一本 Python 书。,Apress,USD 39.99
Python for Data Analysis,Wesly McKinney,|这本书主要是用 pandas 连接 SciPy 和 NumPy，用pandas做数据处理是Pycon2012上一个很热门的话题。另一个功能强大的东西是Sage，它将很多开源的软件集成到统一的 Python 接口。
Python for Data Analysis is concerned with the nuts and bolts of manipulating, processing, cleaning, and crunching data in Python. It is also a practical, modern introduction to scientific computing in Python, tailored for data-intensive applications. This is a book about the parts of the Python language and libraries you’ll need to effectively solve a broad set of data analysis problems. This book is not an exposition on analytical methods using Python as the implementation language.
Written by Wes McKinney, the main author of the pandas library, this hands-on book is packed with practical cases studies. It’s ideal for analysts new to Python and for Python programmers new to scientific computing.
Use the IPython interactive shell as your primary development environment
Learn basic and advanced NumPy (Numerical Python) features
Get started with data analysis tools in the pandas library
Use high-performance tools to load, clean, transform, merge, and reshape data
Create scatter plots and static or interactive visualizations with matplotlib
Apply the pandas groupby facility to slice, dice, and summarize datasets
Measure data by points in time, whether it’s specific instances, fixed periods, or intervals
Learn how to solve problems in web analytics, social sciences, finance, and economics, through detailed examples|,O'Reilly Media,
Python学习手册（第4版）,[美] Mark Lutz,|Google和YouTube由于Python的高可适应性、易于维护以及适合于快速开发而采用它。如果你想要编写高质量、高效的并且易于与其他语言和工具集成的代码，《Python学习手册：第4 版》将帮助你使用Python快速实现这一点，不管你是编程新手还是Python初学者。本书是易于掌握和自学的教程，根据作者Python专家Mark Lutz的著名培训课程编写而成。
《Python学习手册：第4版》每一章都包含关于Python语言的关键内容的独立的一课，并且包含了一个独特的“练习题”部分，其中带有实际的练习和测试，以便你可以练习新的技能并随着学习而测试自己的理解。你会发现众多带有注释的示例以及图表，它们将帮助你开始学习Python 3.0。
《Python学习手册：第4版》包括以下内容：
学习Python的主要内建对象类型：数字、列表和字典。
使用Python语句创建和处理对象，并且学习Python的通用语法模型。
使用函数构造和重用代码，函数是Python的基本过程工具。
学习Python模块：封装语句、函数以及其他工具，从而可以组织成较大的组件。
Python的面向对象编程工具，用于组织程序代码。
学习异常处理模型，以及用于编写较大程序的开发工具。
了解包括装饰器、描述器、元类和Unicode处理等高级Python工具。|,机械工业出版社,119.00元
Flask Web Development,Miguel Grinberg,,O'Reilly Media,USD 24.99
可爱的Python,哲思社区,|本书的内容主要来自CPyUG社区的邮件列表，由Python的行者根据自身经验组织而成，是为从来没有听说过Python的其他语言程序员准备的一份实用的导学性质的书。笔者试图将优化后的学习体验，通过故事的方式传达给读者，同时也分享了蟒样（Pythonic式）的知识获取技巧，而且希望将最常用的代码和思路，通过作弊条（Cheat Sheet，提示表单）的形式分享给有初步基础的Python 用户，来帮助大家多快好省地完成功能。
本书期望成为学习使用Python的同好们的沟通话题，引发进一步的学习\/应用\/创造\/推广，就是笔者的追求！因为Python语言本身是种非常灵活的动态脚本语言，同一个目标可以使用多种方式完成，笔者为了让拥有各种不同技术背景的读者可以快速无碍地理解，选择了一种实际上可能比较笨拙的方式来实现功能，聪明的读者一定可以看出来的，那么请会心一笑，因为您已经和我们心灵相通了！|,电子工业出版社,55.00元
Effective Python,Brett Slatkin,,Addison-Wesley Professional,USD 39.99
Python网络数据采集,米切尔 (Ryan Mitchell),本书采用简洁强大的Python语言，介绍了网络数据采集，并为采集新式网络中的各种数据类型提供了全面的指导。第一部分重点介绍网络数据采集的基本原理：如何用Python从网络服务器请求信息，如何对服务器的响应进行基本处理，以及如何以自动化手段与网站进行交互。第二部分介绍如何用网络爬虫测试网站，自动化处理，以及如何通过更多的方式接入网络。,人民邮电出版社,CNY 59.00
Python高级编程,Tarek Ziadé,|《Python高级编程》通过大量的实例，介绍了Python语言的最佳实践和敏捷开发方法，并涉及整个软件生命周期的高级主题，诸如持续集成、版本控制系统、包的发行和分发、开发模式、文档编写等。《Python高级编程》首先介绍如何设置最优的开发环境，然后以Python敏捷开发方法为线索，阐述如何将已被验证的面向对象原则应用到设计中。这些内容为开发人员和项目管理人员提供了整个软件工程中的许多高级概念以及专家级的建议，其中有些内容的意义甚至超出了Python语言本身。
《Python高级编程》针对具备一定Python基础并希望通过在项目中应用最佳实践和新的开发技术来提升自己的Python开发人员。|,人民邮电出版社,45.00元
Django Web开发指南,|Jeff Forcier,Paul Bissex|,本书讲述如何用Python框架Django构建出强大的Web解决方案，本书讲解了使用新的Django 1.0版的各种主要特性所需要的技术、工具以及概念。 全书分为12章和6个附录，内容包括，Django Python实战，Django速成：构建一个Blog，起始，定义和使用模型，URL、HTTP机制和视图，模板和表单处理，Photo Gallery，内容管理系统，Liveblog，Pastebin，高级Django编程，高级Django部署。附录内容包括命令行基础，安装运行Django，实用Django开发工具，发现、评估、使用Django应用程序，在Google App Engine上使用Django，参与Django项目。 本书适用于Python框架Django初学者，Django Web开发技术人员。,机械工业出版社,49.00元
Python源码剖析,陈儒,|作为主流的动态语言，Python不仅简单易学、移植性好，而且拥有强大丰富的库的支持。此外，Python强大的可扩展性，让开发人员既可以非常容易地利用C\/C++编写Python的扩展模块，还能将Python嵌入到C\/C++程序中，为自己的系统添加动态扩展和动态编程的能力。.
为了更好地利用Python语言，无论是使用Python语言本身，还是将Python与C\/C++交互使用，深刻理解Python的运行原理都是非常重要的。本书以CPython为研究对象，在C代码一级，深入细致地剖析了Python的实现。书中不仅包括了对大量Python内置对象的剖析，更将大量的篇幅用于对Python虚拟机及Python高级特性的剖析。通过此书，读者能够透彻地理解Python中的一般表达式、控制结构、异常机制、类机制、多线程机制、模块的动态加载机制、内存管理机制等核心技术的运行原理，同时，本书所揭示的动态语言的核心技术对于理解其他动态语言，如 Javascript、Ruby等也有较大的参考价值。..
本书适合于Python程序员、动态语言爱好者、C程序员阅读|,电子工业出版社,69.80元
Python学习手册,Mark Lutz,|《Python学习手册(第3版)》讲述了：Python可移植、功能强大、易于使用，是编写独立应用程序和脚本应用程序的理想选择。无论你是刚接触编程或者刚接触Python，通过学习《Python学习手册(第3版)》，你可以迅速高效地精通核心Python语言基础。读完《Python学习手册(第3版)》，你会对这门语言有足够的了解，从而可以在你所从事的任何应用领域中使用它。
《Python学习手册(第3版)》是作者根据过去10年用于教学而广为人知的培训课程的材料编写而成的。除了有许多详实说明和每章小结之外，每章还包括一个头脑风暴：这是《Python学习手册(第3版)》独特的一部分，配合以实用的练习题和复习题，让读者练习新学的技巧并测试自己的理解程度。
《Python学习手册(第3版)》包括：
类型和操作——深入讨论Python主要的内置对象类型：数字、列表和字典等。
语句和语法——在Python中输入代码来建立并处理对象，以及Python一般的语法模型。
函数——Python基本的面向过程工具，用于组织代码和重用。
模块——封装语句、函数以及其他工具，从而可以组织成较大的组件。
类和OOP——Python可选的面向对象编程工具，可用于组织程序代码从而实现定制和重用。
异常和工具——异常处理模型和语句，并介绍编写更大程序的开发工具。
讨论Python 3.0。
《Python学习手册(第3版)》让你对Python语言有深入而完整的了解，从而帮助你理解今后遇到的任何Python应用程序实例。如果你准备探索Google和YouTube为什么选中了Python，《Python学习手册(第3版)》就是你入门的最佳指南。|,机械工业出版社,89.00元
Python入门经典,(美)William F. Punch\/Richard Enbody,《Python入门经典:以解决计算问题为导向的Python编程实践》是一本系统而科学的Python入门教程，美国密歇根州立大学等多所美国知名高校采用其作为编程语言的入门教材，被奉为经典。它不仅从计算机教学和计算机科学的角度讲解了初学者如何才能更有效地去学习Python，而且特别强调用Python解决生活中的实际问题，精心组织了大量来源于生活中不同领域的与数值计算和数据处理相关的案例。通过《Python入门经典:以解决计算问题为导向的Python编程实践》，读者不仅能系统掌握Python编程相关的知识，而且还能掌握利用Python处理各种与数据相关的问题。《Python入门经典:以解决计算问题为导向的Python编程实践》分为五部分，第一部分介绍计算机设备的一般概念和一些计算机术语；第二部分开始介绍编程的基本知识，包括入门知识和控制语句，为后续内容做铺垫；第三部分讲述数据结构和函数，包括字符串、列表和元组、字典和集合、文件、函数、算法和程序等进阶内容，有助于读者提升编程技能；第四部分重点介绍如何使用类定义数据结构和算法、开发程序等，培养读者运用Python语言来实现基本的计算思想和策略的能力；第五部分主要介绍异常、测试和递归，旨在使读者成为更好的程序员。《Python入门经典:以解决计算问题为导向的Python编程实践》深入浅出，每一章节均给出了大量的实例、示范代码和自测练习，便于读者理解和掌握相关知识。读者通过学习《Python入门经典:以解决计算问题为导向的Python编程实践》，不仅能掌握Python语言的基本知识，还能学习如何在实践中运用该语言解决问题。,机械工业出版社,79.00元
学习Python,|Mark Lutz,David Ascher|,|Python是流行、开源、面向对象的编程语言，既可以用于编写单机运行的程序也可以编写脚本程序，具有可移植、强大、易用等特点。跟随专业教师学习是最快捷的掌握此语言的方式。新版的《学习Python》把你带到Mark Lutz和David Ascher面前，他们是著名的Python专家和培训师，他们的用语亲切、组织良好的文章已经指导了许多编程者精通这种语言。
《学习Python（第二版）》给程序员提供了一个学习Python和面向对象编程的综合学习工具。它根据1999年该书第一版发布以来Python语言的大量变化做了更新。本书介绍了最近发布的Python 2.3的基本要素并涵盖了新的特性，如列表内涵，嵌套作用域和迭代器\/产生器。
除了语言特性，《学习Python（第二版）》还为初级程序员提供了新的内容，包括新的面向对象编程和动态类型回顾，新的关于编程起步和配置选项的讨论，新的关于文档的内容等等。全书用新的实例使得语言特性的应用更加具体。
《学习Python（第二版）》首先给出了理解和构造Python程序必需的所有信息，包括类型、运算符、表达式、类、函数、模块和异常。然后，作者给出了更高级的内容，通过真实的应用和可用扩展库说明如何用Python完成一般的任务。全书提供了练习以检验自己的新技能。
《学习Python（第二版）》是本可灵活选读的图书，它让读者能够集中深入Python语言的核心。随着通读全书，你将获得对Python深入而完整的理解，这将帮助你自己开发大型的应用程序。本书适合于任何不仅仅想停留于了解Python而且想更好地掌握它的人。
对本书第一版的褒奖：
“这本书最优之处是作者在提供有用的实例与详细解释说明之间取得近乎完美的平衡。无论你是有经验的计算机程序员还是初学者，这本书对于学习Python语言都是非常适合的。”
——Andrew Morrison, CedarLug|,东南大学出版社,68.00元
python绝技：运用python成为顶级黑客,[美] TJ O'Connor,|Python 是一门常用的编程语言，它不仅上手容易，而且还拥有丰富的支持库。对经常需要针对自己所 处的特定场景编写专用工具的黑客、计算机犯罪调查人员、渗透测试师和安全工程师来说，Python 的这些 特点可以帮助他们又快又好地完成这一任务，以极少的代码量实现所需的功能。《Python绝技：运用Python成为顶级黑客》结合具体的场景和真 实的案例，详述了 Python 在渗透测试、电子取证、网络流量分析、无线安全、网站中信息的自动抓取、 病毒免杀等领域内所发挥的巨大作用。
《Python绝技：运用Python成为顶级黑客》适合计算机安全管理人员、计算机犯罪调查和电子取证人员、渗透测试人员，以及所有对计算机 安全感兴趣的爱好者阅读。同时也可供计算机、信息安全及相关专业的本\/专科院校师生学习参考。|,电子工业出版社,79.00元
Expert Python Programming,Tarek Ziadé,|Python is a dynamic programming language, used in a wide range of domains by programmers who find it simple, yet powerful. From the earliest version 15 years ago to the current one, it has constantly evolved with productivity and code readability in mind.
Even if you find writing Python code easy, writing code that is efficient and easy to maintain and reuse is not so straightforward. This book will show you how to do just that:  it will show you how Python development should be done. Python expert Tarek Ziadé takes you on a practical tour of Python application development, beginning with setting up the best development environment, and along the way looking at agile methodologies in Python, and applying proven object-oriented principles to your design.|,Packt,45
"笨办法"学Python,肖 (Zed A.Shaw),|本书是一本Python入门书籍，适合对计算机了解不多，没有学过编程，但对编程感兴趣的读者学习使用。这本书以习题的方式引导读者一步一步学习编程，从简单的打印一直讲到完整项目的实现，让初学者从基础的编程技术入手，最终体验到软件开发的基本过程。
本书结构非常简单，共包括52个习题，其中26个覆盖了输入\/输出、变量和函数三个主题，另外26个覆盖了一些比较高级的话题，如条件判断、循环、类和对象、代码测试及项目的实现等。每一章的格式基本相同，以代码习题开始，按照说明编写代码，运行并检查结果，然后再做附加练习。
Zed Shaw完善了这个堪称世上最好的Python学习系统。只要跟着学习，你就会和迄今为止数十万Zed教过的初学者一样获得成功。
在这本书中，你将通过完成52个精心设计的习题来学会Python。阅读这些习题，把习题的代码精确地写出来（禁止复制和粘贴！），修正你的错误，观察程序的运行。在这个过程中，你将了解软件是如何工作的，好的程序看起来是什么样子，怎样阅读、编写、思考代码，以及如何用专业程序员的技巧来找出并修正错误。最重要的是，你将学到下面这些编写优秀的Python软件必需的初始技能。
这本书会让你的每一分钟投入都有回报。Python是世界上最强大、最受欢迎的编程语言之一，很快你就会成为一名Python程序员。
你还可以看Zed的视频！随书附赠的DVD中包含5个多小时激情挥洒的教学内容：一部完整的Python视频教程！|,人民邮电出版社,CNY 49.00
Effective Python,布雷特·斯拉特金（Brett Slatkin）,|用Python编写程序，是相当容易的，所以这门语言非常流行。但若想掌握Python所特有的优势、魅力和表达能力，则相当困难，而且语言中还有很多隐藏的陷阱，容易令开发者犯错。
本书可以帮你掌握真正的Pythonic编程方式，令你能够完全发挥出Python语言的强大功能，并写出健壮而高效的代码。Scott Meyers在畅销书《Effective C++》中开创了一种以使用场景为主导的精练教学方式，本书作者Brett Slatkin就以这种方式汇聚了59条优秀的实践原则、开发技巧和便捷方案，并以实用的代码范例来解释它们。
Slatkin根据自己在Google公司多年开发Python基础架构所积累的经验，揭示Python语言中一些鲜为人知的微妙特性，并给出了能够改善代码功能及运行效率的习惯用法。通过本书，你能够了解到解决关键编程任务所用的最佳方式，并学会编写易于理解、便于维护且利于改进的代码。
本书核心内容包括：
涵盖Python 3.x及Python 2.x主要应用领域的实用指南，以及与之配套的详细解释及代码范例。
与函数相关的编程建议，这些建议有助于我们写出意图清晰、便于复用且缺陷较少的函数。
如何准确地表达类与对象的行为。
在使用元类和动态属性时，如何避免错误的用法。
更为高效的并发及并行方式。
与Python内置模块相关的编程技巧和习惯用法。
多人协作时所用的开发工具和最佳实践方式。
旨在改善代码质量和程序性能的调试、测试与优化方案。|,机械工业出版社,59
Python语言及其应用,[美] Bill Lubanovic,本书介绍Python 语言的基础知识及其在各个领域的具体应用，基于最新版本3.x。书中首先介绍了Python 语言的一些必备基本知识，然后介绍了在商业、科研以及艺术领域使用Python 开发各种应用的实例。文字简洁明了，案例丰富实用，是一本难得的Python 入门手册。,人民邮电出版社,79.00元
Python Cookbook,|Alex Martelli,Anna Ravenscroft,David Ascher|,|本书介绍了Python应用在各个领域中的一些使用技巧和方法，从最基本的字符、文件序列、字典和排序，到进阶的面向对象编程、数据库和数据持久化、 XML处理和Web编程，再到比较高级和抽象的描述符、装饰器、元类、迭代器和生成器，均有涉及。书中还介绍了一些第三方包和库的使用，包括 Twisted、GIL、PyWin32等。本书覆盖了Python应用中的很多常见问题，并提出了通用的解决方案。书中的代码和方法具有很强的实用性，可以方便地应用到实际的项目中，并产生立竿见影的效果。尤为难得的是，本书的各位作者都具有丰富的业界实践经验，因此，本书不仅给出了对各种问题的解决方案，同时还体现了很多专家的思维方式和良好的编程习惯，与具体的细节性知识相比，这部分内容无疑是本书的精华。
本书适合具有一定Python基础的读者阅读参考。|,人民邮电出版社,99.00元
Dive Into Python,Mark Pilgrim,Dive Into Python 是为有经验的程序员编写的一本 Python 书。,Apress,USD 39.99
Python for Data Analysis,Wesly McKinney,|这本书主要是用 pandas 连接 SciPy 和 NumPy，用pandas做数据处理是Pycon2012上一个很热门的话题。另一个功能强大的东西是Sage，它将很多开源的软件集成到统一的 Python 接口。
Python for Data Analysis is concerned with the nuts and bolts of manipulating, processing, cleaning, and crunching data in Python. It is also a practical, modern introduction to scientific computing in Python, tailored for data-intensive applications. This is a book about the parts of the Python language and libraries you’ll need to effectively solve a broad set of data analysis problems. This book is not an exposition on analytical methods using Python as the implementation language.
Written by Wes McKinney, the main author of the pandas library, this hands-on book is packed with practical cases studies. It’s ideal for analysts new to Python and for Python programmers new to scientific computing.
Use the IPython interactive shell as your primary development environment
Learn basic and advanced NumPy (Numerical Python) features
Get started with data analysis tools in the pandas library
Use high-performance tools to load, clean, transform, merge, and reshape data
Create scatter plots and static or interactive visualizations with matplotlib
Apply the pandas groupby facility to slice, dice, and summarize datasets
Measure data by points in time, whether it’s specific instances, fixed periods, or intervals
Learn how to solve problems in web analytics, social sciences, finance, and economics, through detailed examples|,O'Reilly Media,
Python学习手册（第4版）,[美] Mark Lutz,|Google和YouTube由于Python的高可适应性、易于维护以及适合于快速开发而采用它。如果你想要编写高质量、高效的并且易于与其他语言和工具集成的代码，《Python学习手册：第4 版》将帮助你使用Python快速实现这一点，不管你是编程新手还是Python初学者。本书是易于掌握和自学的教程，根据作者Python专家Mark Lutz的著名培训课程编写而成。
《Python学习手册：第4版》每一章都包含关于Python语言的关键内容的独立的一课，并且包含了一个独特的“练习题”部分，其中带有实际的练习和测试，以便你可以练习新的技能并随着学习而测试自己的理解。你会发现众多带有注释的示例以及图表，它们将帮助你开始学习Python 3.0。
《Python学习手册：第4版》包括以下内容：
学习Python的主要内建对象类型：数字、列表和字典。
使用Python语句创建和处理对象，并且学习Python的通用语法模型。
使用函数构造和重用代码，函数是Python的基本过程工具。
学习Python模块：封装语句、函数以及其他工具，从而可以组织成较大的组件。
Python的面向对象编程工具，用于组织程序代码。
学习异常处理模型，以及用于编写较大程序的开发工具。
了解包括装饰器、描述器、元类和Unicode处理等高级Python工具。|,机械工业出版社,119.00元
Flask Web Development,Miguel Grinberg,,O'Reilly Media,USD 24.99
可爱的Python,哲思社区,|本书的内容主要来自CPyUG社区的邮件列表，由Python的行者根据自身经验组织而成，是为从来没有听说过Python的其他语言程序员准备的一份实用的导学性质的书。笔者试图将优化后的学习体验，通过故事的方式传达给读者，同时也分享了蟒样（Pythonic式）的知识获取技巧，而且希望将最常用的代码和思路，通过作弊条（Cheat Sheet，提示表单）的形式分享给有初步基础的Python 用户，来帮助大家多快好省地完成功能。
本书期望成为学习使用Python的同好们的沟通话题，引发进一步的学习\/应用\/创造\/推广，就是笔者的追求！因为Python语言本身是种非常灵活的动态脚本语言，同一个目标可以使用多种方式完成，笔者为了让拥有各种不同技术背景的读者可以快速无碍地理解，选择了一种实际上可能比较笨拙的方式来实现功能，聪明的读者一定可以看出来的，那么请会心一笑，因为您已经和我们心灵相通了！|,电子工业出版社,55.00元
Effective Python,Brett Slatkin,,Addison-Wesley Professional,USD 39.99
Python网络数据采集,米切尔 (Ryan Mitchell),本书采用简洁强大的Python语言，介绍了网络数据采集，并为采集新式网络中的各种数据类型提供了全面的指导。第一部分重点介绍网络数据采集的基本原理：如何用Python从网络服务器请求信息，如何对服务器的响应进行基本处理，以及如何以自动化手段与网站进行交互。第二部分介绍如何用网络爬虫测试网站，自动化处理，以及如何通过更多的方式接入网络。,人民邮电出版社,CNY 59.00
Python高级编程,Tarek Ziadé,|《Python高级编程》通过大量的实例，介绍了Python语言的最佳实践和敏捷开发方法，并涉及整个软件生命周期的高级主题，诸如持续集成、版本控制系统、包的发行和分发、开发模式、文档编写等。《Python高级编程》首先介绍如何设置最优的开发环境，然后以Python敏捷开发方法为线索，阐述如何将已被验证的面向对象原则应用到设计中。这些内容为开发人员和项目管理人员提供了整个软件工程中的许多高级概念以及专家级的建议，其中有些内容的意义甚至超出了Python语言本身。
《Python高级编程》针对具备一定Python基础并希望通过在项目中应用最佳实践和新的开发技术来提升自己的Python开发人员。|,人民邮电出版社,45.00元
数据结构与算法：Python语言描述,裘宗燕,本书基于Python语言介绍了数据结构与算法的基本知识，主要内容包括抽象数据类型和Python面向对象程序设计、线性表、字符串、栈和队列、二叉树和树、集合、排序以及算法的基本知识。本书延续问题求解的思路，从解决问题的目标来组织教学内容，注重理论与实践的并用。,机械工业出版社,CNY 45.00
Python源码剖析,陈儒,|作为主流的动态语言，Python不仅简单易学、移植性好，而且拥有强大丰富的库的支持。此外，Python强大的可扩展性，让开发人员既可以非常容易地利用C\/C++编写Python的扩展模块，还能将Python嵌入到C\/C++程序中，为自己的系统添加动态扩展和动态编程的能力。.
为了更好地利用Python语言，无论是使用Python语言本身，还是将Python与C\/C++交互使用，深刻理解Python的运行原理都是非常重要的。本书以CPython为研究对象，在C代码一级，深入细致地剖析了Python的实现。书中不仅包括了对大量Python内置对象的剖析，更将大量的篇幅用于对Python虚拟机及Python高级特性的剖析。通过此书，读者能够透彻地理解Python中的一般表达式、控制结构、异常机制、类机制、多线程机制、模块的动态加载机制、内存管理机制等核心技术的运行原理，同时，本书所揭示的动态语言的核心技术对于理解其他动态语言，如 Javascript、Ruby等也有较大的参考价值。..
本书适合于Python程序员、动态语言爱好者、C程序员阅读|,电子工业出版社,69.80元
Python学习手册,Mark Lutz,|《Python学习手册(第3版)》讲述了：Python可移植、功能强大、易于使用，是编写独立应用程序和脚本应用程序的理想选择。无论你是刚接触编程或者刚接触Python，通过学习《Python学习手册(第3版)》，你可以迅速高效地精通核心Python语言基础。读完《Python学习手册(第3版)》，你会对这门语言有足够的了解，从而可以在你所从事的任何应用领域中使用它。
《Python学习手册(第3版)》是作者根据过去10年用于教学而广为人知的培训课程的材料编写而成的。除了有许多详实说明和每章小结之外，每章还包括一个头脑风暴：这是《Python学习手册(第3版)》独特的一部分，配合以实用的练习题和复习题，让读者练习新学的技巧并测试自己的理解程度。
《Python学习手册(第3版)》包括：
类型和操作——深入讨论Python主要的内置对象类型：数字、列表和字典等。
语句和语法——在Python中输入代码来建立并处理对象，以及Python一般的语法模型。
函数——Python基本的面向过程工具，用于组织代码和重用。
模块——封装语句、函数以及其他工具，从而可以组织成较大的组件。
类和OOP——Python可选的面向对象编程工具，可用于组织程序代码从而实现定制和重用。
异常和工具——异常处理模型和语句，并介绍编写更大程序的开发工具。
讨论Python 3.0。
《Python学习手册(第3版)》让你对Python语言有深入而完整的了解，从而帮助你理解今后遇到的任何Python应用程序实例。如果你准备探索Google和YouTube为什么选中了Python，《Python学习手册(第3版)》就是你入门的最佳指南。|,机械工业出版社,89.00元
Python入门经典,(美)William F. Punch\/Richard Enbody,《Python入门经典:以解决计算问题为导向的Python编程实践》是一本系统而科学的Python入门教程，美国密歇根州立大学等多所美国知名高校采用其作为编程语言的入门教材，被奉为经典。它不仅从计算机教学和计算机科学的角度讲解了初学者如何才能更有效地去学习Python，而且特别强调用Python解决生活中的实际问题，精心组织了大量来源于生活中不同领域的与数值计算和数据处理相关的案例。通过《Python入门经典:以解决计算问题为导向的Python编程实践》，读者不仅能系统掌握Python编程相关的知识，而且还能掌握利用Python处理各种与数据相关的问题。《Python入门经典:以解决计算问题为导向的Python编程实践》分为五部分，第一部分介绍计算机设备的一般概念和一些计算机术语；第二部分开始介绍编程的基本知识，包括入门知识和控制语句，为后续内容做铺垫；第三部分讲述数据结构和函数，包括字符串、列表和元组、字典和集合、文件、函数、算法和程序等进阶内容，有助于读者提升编程技能；第四部分重点介绍如何使用类定义数据结构和算法、开发程序等，培养读者运用Python语言来实现基本的计算思想和策略的能力；第五部分主要介绍异常、测试和递归，旨在使读者成为更好的程序员。《Python入门经典:以解决计算问题为导向的Python编程实践》深入浅出，每一章节均给出了大量的实例、示范代码和自测练习，便于读者理解和掌握相关知识。读者通过学习《Python入门经典:以解决计算问题为导向的Python编程实践》，不仅能掌握Python语言的基本知识，还能学习如何在实践中运用该语言解决问题。,机械工业出版社,79.00元
学习Python,|Mark Lutz,David Ascher|,|Python是流行、开源、面向对象的编程语言，既可以用于编写单机运行的程序也可以编写脚本程序，具有可移植、强大、易用等特点。跟随专业教师学习是最快捷的掌握此语言的方式。新版的《学习Python》把你带到Mark Lutz和David Ascher面前，他们是著名的Python专家和培训师，他们的用语亲切、组织良好的文章已经指导了许多编程者精通这种语言。
《学习Python（第二版）》给程序员提供了一个学习Python和面向对象编程的综合学习工具。它根据1999年该书第一版发布以来Python语言的大量变化做了更新。本书介绍了最近发布的Python 2.3的基本要素并涵盖了新的特性，如列表内涵，嵌套作用域和迭代器\/产生器。
除了语言特性，《学习Python（第二版）》还为初级程序员提供了新的内容，包括新的面向对象编程和动态类型回顾，新的关于编程起步和配置选项的讨论，新的关于文档的内容等等。全书用新的实例使得语言特性的应用更加具体。
《学习Python（第二版）》首先给出了理解和构造Python程序必需的所有信息，包括类型、运算符、表达式、类、函数、模块和异常。然后，作者给出了更高级的内容，通过真实的应用和可用扩展库说明如何用Python完成一般的任务。全书提供了练习以检验自己的新技能。
《学习Python（第二版）》是本可灵活选读的图书，它让读者能够集中深入Python语言的核心。随着通读全书，你将获得对Python深入而完整的理解，这将帮助你自己开发大型的应用程序。本书适合于任何不仅仅想停留于了解Python而且想更好地掌握它的人。
对本书第一版的褒奖：
“这本书最优之处是作者在提供有用的实例与详细解释说明之间取得近乎完美的平衡。无论你是有经验的计算机程序员还是初学者，这本书对于学习Python语言都是非常适合的。”
——Andrew Morrison, CedarLug|,东南大学出版社,68.00元
python绝技：运用python成为顶级黑客,[美] TJ O'Connor,|Python 是一门常用的编程语言，它不仅上手容易，而且还拥有丰富的支持库。对经常需要针对自己所 处的特定场景编写专用工具的黑客、计算机犯罪调查人员、渗透测试师和安全工程师来说，Python 的这些 特点可以帮助他们又快又好地完成这一任务，以极少的代码量实现所需的功能。《Python绝技：运用Python成为顶级黑客》结合具体的场景和真 实的案例，详述了 Python 在渗透测试、电子取证、网络流量分析、无线安全、网站中信息的自动抓取、 病毒免杀等领域内所发挥的巨大作用。
《Python绝技：运用Python成为顶级黑客》适合计算机安全管理人员、计算机犯罪调查和电子取证人员、渗透测试人员，以及所有对计算机 安全感兴趣的爱好者阅读。同时也可供计算机、信息安全及相关专业的本\/专科院校师生学习参考。|,电子工业出版社,79.00元
Expert Python Programming,Tarek Ziadé,|Python is a dynamic programming language, used in a wide range of domains by programmers who find it simple, yet powerful. From the earliest version 15 years ago to the current one, it has constantly evolved with productivity and code readability in mind.
Even if you find writing Python code easy, writing code that is efficient and easy to maintain and reuse is not so straightforward. This book will show you how to do just that:  it will show you how Python development should be done. Python expert Tarek Ziadé takes you on a practical tour of Python application development, beginning with setting up the best development environment, and along the way looking at agile methodologies in Python, and applying proven object-oriented principles to your design.|,Packt,45
"笨办法"学Python,肖 (Zed A.Shaw),|本书是一本Python入门书籍，适合对计算机了解不多，没有学过编程，但对编程感兴趣的读者学习使用。这本书以习题的方式引导读者一步一步学习编程，从简单的打印一直讲到完整项目的实现，让初学者从基础的编程技术入手，最终体验到软件开发的基本过程。
本书结构非常简单，共包括52个习题，其中26个覆盖了输入\/输出、变量和函数三个主题，另外26个覆盖了一些比较高级的话题，如条件判断、循环、类和对象、代码测试及项目的实现等。每一章的格式基本相同，以代码习题开始，按照说明编写代码，运行并检查结果，然后再做附加练习。
Zed Shaw完善了这个堪称世上最好的Python学习系统。只要跟着学习，你就会和迄今为止数十万Zed教过的初学者一样获得成功。
在这本书中，你将通过完成52个精心设计的习题来学会Python。阅读这些习题，把习题的代码精确地写出来（禁止复制和粘贴！），修正你的错误，观察程序的运行。在这个过程中，你将了解软件是如何工作的，好的程序看起来是什么样子，怎样阅读、编写、思考代码，以及如何用专业程序员的技巧来找出并修正错误。最重要的是，你将学到下面这些编写优秀的Python软件必需的初始技能。
这本书会让你的每一分钟投入都有回报。Python是世界上最强大、最受欢迎的编程语言之一，很快你就会成为一名Python程序员。
你还可以看Zed的视频！随书附赠的DVD中包含5个多小时激情挥洒的教学内容：一部完整的Python视频教程！|,人民邮电出版社,CNY 49.00
Effective Python,布雷特·斯拉特金（Brett Slatkin）,|用Python编写程序，是相当容易的，所以这门语言非常流行。但若想掌握Python所特有的优势、魅力和表达能力，则相当困难，而且语言中还有很多隐藏的陷阱，容易令开发者犯错。
本书可以帮你掌握真正的Pythonic编程方式，令你能够完全发挥出Python语言的强大功能，并写出健壮而高效的代码。Scott Meyers在畅销书《Effective C++》中开创了一种以使用场景为主导的精练教学方式，本书作者Brett Slatkin就以这种方式汇聚了59条优秀的实践原则、开发技巧和便捷方案，并以实用的代码范例来解释它们。
Slatkin根据自己在Google公司多年开发Python基础架构所积累的经验，揭示Python语言中一些鲜为人知的微妙特性，并给出了能够改善代码功能及运行效率的习惯用法。通过本书，你能够了解到解决关键编程任务所用的最佳方式，并学会编写易于理解、便于维护且利于改进的代码。
本书核心内容包括：
涵盖Python 3.x及Python 2.x主要应用领域的实用指南，以及与之配套的详细解释及代码范例。
与函数相关的编程建议，这些建议有助于我们写出意图清晰、便于复用且缺陷较少的函数。
如何准确地表达类与对象的行为。
在使用元类和动态属性时，如何避免错误的用法。
更为高效的并发及并行方式。
与Python内置模块相关的编程技巧和习惯用法。
多人协作时所用的开发工具和最佳实践方式。
旨在改善代码质量和程序性能的调试、测试与优化方案。|,机械工业出版社,59
Python语言及其应用,[美] Bill Lubanovic,本书介绍Python 语言的基础知识及其在各个领域的具体应用，基于最新版本3.x。书中首先介绍了Python 语言的一些必备基本知识，然后介绍了在商业、科研以及艺术领域使用Python 开发各种应用的实例。文字简洁明了，案例丰富实用，是一本难得的Python 入门手册。,人民邮电出版社,79.00元
Python Cookbook,|Alex Martelli,Anna Ravenscroft,David Ascher|,|本书介绍了Python应用在各个领域中的一些使用技巧和方法，从最基本的字符、文件序列、字典和排序，到进阶的面向对象编程、数据库和数据持久化、 XML处理和Web编程，再到比较高级和抽象的描述符、装饰器、元类、迭代器和生成器，均有涉及。书中还介绍了一些第三方包和库的使用，包括 Twisted、GIL、PyWin32等。本书覆盖了Python应用中的很多常见问题，并提出了通用的解决方案。书中的代码和方法具有很强的实用性，可以方便地应用到实际的项目中，并产生立竿见影的效果。尤为难得的是，本书的各位作者都具有丰富的业界实践经验，因此，本书不仅给出了对各种问题的解决方案，同时还体现了很多专家的思维方式和良好的编程习惯，与具体的细节性知识相比，这部分内容无疑是本书的精华。
本书适合具有一定Python基础的读者阅读参考。|,人民邮电出版社,99.00元
Dive Into Python,Mark Pilgrim,Dive Into Python 是为有经验的程序员编写的一本 Python 书。,Apress,USD 39.99
Python for Data Analysis,Wesly McKinney,|这本书主要是用 pandas 连接 SciPy 和 NumPy，用pandas做数据处理是Pycon2012上一个很热门的话题。另一个功能强大的东西是Sage，它将很多开源的软件集成到统一的 Python 接口。
Python for Data Analysis is concerned with the nuts and bolts of manipulating, processing, cleaning, and crunching data in Python. It is also a practical, modern introduction to scientific computing in Python, tailored for data-intensive applications. This is a book about the parts of the Python language and libraries you’ll need to effectively solve a broad set of data analysis problems. This book is not an exposition on analytical methods using Python as the implementation language.
Written by Wes McKinney, the main author of the pandas library, this hands-on book is packed with practical cases studies. It’s ideal for analysts new to Python and for Python programmers new to scientific computing.
Use the IPython interactive shell as your primary development environment
Learn basic and advanced NumPy (Numerical Python) features
Get started with data analysis tools in the pandas library
Use high-performance tools to load, clean, transform, merge, and reshape data
Create scatter plots and static or interactive visualizations with matplotlib
Apply the pandas groupby facility to slice, dice, and summarize datasets
Measure data by points in time, whether it’s specific instances, fixed periods, or intervals
Learn how to solve problems in web analytics, social sciences, finance, and economics, through detailed examples|,O'Reilly Media,
Python学习手册（第4版）,[美] Mark Lutz,|Google和YouTube由于Python的高可适应性、易于维护以及适合于快速开发而采用它。如果你想要编写高质量、高效的并且易于与其他语言和工具集成的代码，《Python学习手册：第4 版》将帮助你使用Python快速实现这一点，不管你是编程新手还是Python初学者。本书是易于掌握和自学的教程，根据作者Python专家Mark Lutz的著名培训课程编写而成。
《Python学习手册：第4版》每一章都包含关于Python语言的关键内容的独立的一课，并且包含了一个独特的“练习题”部分，其中带有实际的练习和测试，以便你可以练习新的技能并随着学习而测试自己的理解。你会发现众多带有注释的示例以及图表，它们将帮助你开始学习Python 3.0。
《Python学习手册：第4版》包括以下内容：
学习Python的主要内建对象类型：数字、列表和字典。
使用Python语句创建和处理对象，并且学习Python的通用语法模型。
使用函数构造和重用代码，函数是Python的基本过程工具。
学习Python模块：封装语句、函数以及其他工具，从而可以组织成较大的组件。
Python的面向对象编程工具，用于组织程序代码。
学习异常处理模型，以及用于编写较大程序的开发工具。
了解包括装饰器、描述器、元类和Unicode处理等高级Python工具。|,机械工业出版社,119.00元
Flask Web Development,Miguel Grinberg,,O'Reilly Media,USD 24.99
可爱的Python,哲思社区,|本书的内容主要来自CPyUG社区的邮件列表，由Python的行者根据自身经验组织而成，是为从来没有听说过Python的其他语言程序员准备的一份实用的导学性质的书。笔者试图将优化后的学习体验，通过故事的方式传达给读者，同时也分享了蟒样（Pythonic式）的知识获取技巧，而且希望将最常用的代码和思路，通过作弊条（Cheat Sheet，提示表单）的形式分享给有初步基础的Python 用户，来帮助大家多快好省地完成功能。
本书期望成为学习使用Python的同好们的沟通话题，引发进一步的学习\/应用\/创造\/推广，就是笔者的追求！因为Python语言本身是种非常灵活的动态脚本语言，同一个目标可以使用多种方式完成，笔者为了让拥有各种不同技术背景的读者可以快速无碍地理解，选择了一种实际上可能比较笨拙的方式来实现功能，聪明的读者一定可以看出来的，那么请会心一笑，因为您已经和我们心灵相通了！|,电子工业出版社,55.00元
Effective Python,Brett Slatkin,,Addison-Wesley Professional,USD 39.99
Python网络数据采集,米切尔 (Ryan Mitchell),本书采用简洁强大的Python语言，介绍了网络数据采集，并为采集新式网络中的各种数据类型提供了全面的指导。第一部分重点介绍网络数据采集的基本原理：如何用Python从网络服务器请求信息，如何对服务器的响应进行基本处理，以及如何以自动化手段与网站进行交互。第二部分介绍如何用网络爬虫测试网站，自动化处理，以及如何通过更多的方式接入网络。,人民邮电出版社,CNY 59.00
Python高级编程,Tarek Ziadé,|《Python高级编程》通过大量的实例，介绍了Python语言的最佳实践和敏捷开发方法，并涉及整个软件生命周期的高级主题，诸如持续集成、版本控制系统、包的发行和分发、开发模式、文档编写等。《Python高级编程》首先介绍如何设置最优的开发环境，然后以Python敏捷开发方法为线索，阐述如何将已被验证的面向对象原则应用到设计中。这些内容为开发人员和项目管理人员提供了整个软件工程中的许多高级概念以及专家级的建议，其中有些内容的意义甚至超出了Python语言本身。
《Python高级编程》针对具备一定Python基础并希望通过在项目中应用最佳实践和新的开发技术来提升自己的Python开发人员。|,人民邮电出版社,45.00元
数据结构与算法：Python语言描述,裘宗燕,本书基于Python语言介绍了数据结构与算法的基本知识，主要内容包括抽象数据类型和Python面向对象程序设计、线性表、字符串、栈和队列、二叉树和树、集合、排序以及算法的基本知识。本书延续问题求解的思路，从解决问题的目标来组织教学内容，注重理论与实践的并用。,机械工业出版社,CNY 45.00
深入理解 Flask,[美]Jack Stouffer,|Flask 是一种具有平缓学习曲线和庞大社区支持的微框架，利用它可以构建大规模的web应用。学习上手Flask非常轻松，但要深入理解却并不容易。
本书从一个简单的Flask应用开始，通过解决若干实战中的问题，对一系列进阶的话题进行了探讨。书中使用MVC（模型-视图-控制器）架构对示例应用进行了转化重构，以演示如何正确地组织应用代码结构。有了可扩展性强的应用结构之后，接下来的章节使用Flask扩展为应用提供了额外的功能，包括用户登录和注册、NoSQL查询、REST API、一套后台管理界面，以及其他特性。然后，你会学到如何使用单元测试，保障代码持续按照正确的方式工作，避免极具风险的猜测式编程。本书最后会讨论可用于部署Flask应用的诸多不同平台，以及你必须考虑的，每个平台的优劣利弊。|,电子工业出版社,79.00
Python学习手册,Mark Lutz,|《Python学习手册(第3版)》讲述了：Python可移植、功能强大、易于使用，是编写独立应用程序和脚本应用程序的理想选择。无论你是刚接触编程或者刚接触Python，通过学习《Python学习手册(第3版)》，你可以迅速高效地精通核心Python语言基础。读完《Python学习手册(第3版)》，你会对这门语言有足够的了解，从而可以在你所从事的任何应用领域中使用它。
《Python学习手册(第3版)》是作者根据过去10年用于教学而广为人知的培训课程的材料编写而成的。除了有许多详实说明和每章小结之外，每章还包括一个头脑风暴：这是《Python学习手册(第3版)》独特的一部分，配合以实用的练习题和复习题，让读者练习新学的技巧并测试自己的理解程度。
《Python学习手册(第3版)》包括：
类型和操作——深入讨论Python主要的内置对象类型：数字、列表和字典等。
语句和语法——在Python中输入代码来建立并处理对象，以及Python一般的语法模型。
函数——Python基本的面向过程工具，用于组织代码和重用。
模块——封装语句、函数以及其他工具，从而可以组织成较大的组件。
类和OOP——Python可选的面向对象编程工具，可用于组织程序代码从而实现定制和重用。
异常和工具——异常处理模型和语句，并介绍编写更大程序的开发工具。
讨论Python 3.0。
《Python学习手册(第3版)》让你对Python语言有深入而完整的了解，从而帮助你理解今后遇到的任何Python应用程序实例。如果你准备探索Google和YouTube为什么选中了Python，《Python学习手册(第3版)》就是你入门的最佳指南。|,机械工业出版社,89.00元
Python入门经典,(美)William F. Punch\/Richard Enbody,《Python入门经典:以解决计算问题为导向的Python编程实践》是一本系统而科学的Python入门教程，美国密歇根州立大学等多所美国知名高校采用其作为编程语言的入门教材，被奉为经典。它不仅从计算机教学和计算机科学的角度讲解了初学者如何才能更有效地去学习Python，而且特别强调用Python解决生活中的实际问题，精心组织了大量来源于生活中不同领域的与数值计算和数据处理相关的案例。通过《Python入门经典:以解决计算问题为导向的Python编程实践》，读者不仅能系统掌握Python编程相关的知识，而且还能掌握利用Python处理各种与数据相关的问题。《Python入门经典:以解决计算问题为导向的Python编程实践》分为五部分，第一部分介绍计算机设备的一般概念和一些计算机术语；第二部分开始介绍编程的基本知识，包括入门知识和控制语句，为后续内容做铺垫；第三部分讲述数据结构和函数，包括字符串、列表和元组、字典和集合、文件、函数、算法和程序等进阶内容，有助于读者提升编程技能；第四部分重点介绍如何使用类定义数据结构和算法、开发程序等，培养读者运用Python语言来实现基本的计算思想和策略的能力；第五部分主要介绍异常、测试和递归，旨在使读者成为更好的程序员。《Python入门经典:以解决计算问题为导向的Python编程实践》深入浅出，每一章节均给出了大量的实例、示范代码和自测练习，便于读者理解和掌握相关知识。读者通过学习《Python入门经典:以解决计算问题为导向的Python编程实践》，不仅能掌握Python语言的基本知识，还能学习如何在实践中运用该语言解决问题。,机械工业出版社,79.00元
学习Python,|Mark Lutz,David Ascher|,|Python是流行、开源、面向对象的编程语言，既可以用于编写单机运行的程序也可以编写脚本程序，具有可移植、强大、易用等特点。跟随专业教师学习是最快捷的掌握此语言的方式。新版的《学习Python》把你带到Mark Lutz和David Ascher面前，他们是著名的Python专家和培训师，他们的用语亲切、组织良好的文章已经指导了许多编程者精通这种语言。
《学习Python（第二版）》给程序员提供了一个学习Python和面向对象编程的综合学习工具。它根据1999年该书第一版发布以来Python语言的大量变化做了更新。本书介绍了最近发布的Python 2.3的基本要素并涵盖了新的特性，如列表内涵，嵌套作用域和迭代器\/产生器。
除了语言特性，《学习Python（第二版）》还为初级程序员提供了新的内容，包括新的面向对象编程和动态类型回顾，新的关于编程起步和配置选项的讨论，新的关于文档的内容等等。全书用新的实例使得语言特性的应用更加具体。
《学习Python（第二版）》首先给出了理解和构造Python程序必需的所有信息，包括类型、运算符、表达式、类、函数、模块和异常。然后，作者给出了更高级的内容，通过真实的应用和可用扩展库说明如何用Python完成一般的任务。全书提供了练习以检验自己的新技能。
《学习Python（第二版）》是本可灵活选读的图书，它让读者能够集中深入Python语言的核心。随着通读全书，你将获得对Python深入而完整的理解，这将帮助你自己开发大型的应用程序。本书适合于任何不仅仅想停留于了解Python而且想更好地掌握它的人。
对本书第一版的褒奖：
“这本书最优之处是作者在提供有用的实例与详细解释说明之间取得近乎完美的平衡。无论你是有经验的计算机程序员还是初学者，这本书对于学习Python语言都是非常适合的。”
——Andrew Morrison, CedarLug|,东南大学出版社,68.00元
python绝技：运用python成为顶级黑客,[美] TJ O'Connor,|Python 是一门常用的编程语言，它不仅上手容易，而且还拥有丰富的支持库。对经常需要针对自己所 处的特定场景编写专用工具的黑客、计算机犯罪调查人员、渗透测试师和安全工程师来说，Python 的这些 特点可以帮助他们又快又好地完成这一任务，以极少的代码量实现所需的功能。《Python绝技：运用Python成为顶级黑客》结合具体的场景和真 实的案例，详述了 Python 在渗透测试、电子取证、网络流量分析、无线安全、网站中信息的自动抓取、 病毒免杀等领域内所发挥的巨大作用。
《Python绝技：运用Python成为顶级黑客》适合计算机安全管理人员、计算机犯罪调查和电子取证人员、渗透测试人员，以及所有对计算机 安全感兴趣的爱好者阅读。同时也可供计算机、信息安全及相关专业的本\/专科院校师生学习参考。|,电子工业出版社,79.00元
Expert Python Programming,Tarek Ziadé,|Python is a dynamic programming language, used in a wide range of domains by programmers who find it simple, yet powerful. From the earliest version 15 years ago to the current one, it has constantly evolved with productivity and code readability in mind.
Even if you find writing Python code easy, writing code that is efficient and easy to maintain and reuse is not so straightforward. This book will show you how to do just that:  it will show you how Python development should be done. Python expert Tarek Ziadé takes you on a practical tour of Python application development, beginning with setting up the best development environment, and along the way looking at agile methodologies in Python, and applying proven object-oriented principles to your design.|,Packt,45
"笨办法"学Python,肖 (Zed A.Shaw),|本书是一本Python入门书籍，适合对计算机了解不多，没有学过编程，但对编程感兴趣的读者学习使用。这本书以习题的方式引导读者一步一步学习编程，从简单的打印一直讲到完整项目的实现，让初学者从基础的编程技术入手，最终体验到软件开发的基本过程。
本书结构非常简单，共包括52个习题，其中26个覆盖了输入\/输出、变量和函数三个主题，另外26个覆盖了一些比较高级的话题，如条件判断、循环、类和对象、代码测试及项目的实现等。每一章的格式基本相同，以代码习题开始，按照说明编写代码，运行并检查结果，然后再做附加练习。
Zed Shaw完善了这个堪称世上最好的Python学习系统。只要跟着学习，你就会和迄今为止数十万Zed教过的初学者一样获得成功。
在这本书中，你将通过完成52个精心设计的习题来学会Python。阅读这些习题，把习题的代码精确地写出来（禁止复制和粘贴！），修正你的错误，观察程序的运行。在这个过程中，你将了解软件是如何工作的，好的程序看起来是什么样子，怎样阅读、编写、思考代码，以及如何用专业程序员的技巧来找出并修正错误。最重要的是，你将学到下面这些编写优秀的Python软件必需的初始技能。
这本书会让你的每一分钟投入都有回报。Python是世界上最强大、最受欢迎的编程语言之一，很快你就会成为一名Python程序员。
你还可以看Zed的视频！随书附赠的DVD中包含5个多小时激情挥洒的教学内容：一部完整的Python视频教程！|,人民邮电出版社,CNY 49.00
Effective Python,布雷特·斯拉特金（Brett Slatkin）,|用Python编写程序，是相当容易的，所以这门语言非常流行。但若想掌握Python所特有的优势、魅力和表达能力，则相当困难，而且语言中还有很多隐藏的陷阱，容易令开发者犯错。
本书可以帮你掌握真正的Pythonic编程方式，令你能够完全发挥出Python语言的强大功能，并写出健壮而高效的代码。Scott Meyers在畅销书《Effective C++》中开创了一种以使用场景为主导的精练教学方式，本书作者Brett Slatkin就以这种方式汇聚了59条优秀的实践原则、开发技巧和便捷方案，并以实用的代码范例来解释它们。
Slatkin根据自己在Google公司多年开发Python基础架构所积累的经验，揭示Python语言中一些鲜为人知的微妙特性，并给出了能够改善代码功能及运行效率的习惯用法。通过本书，你能够了解到解决关键编程任务所用的最佳方式，并学会编写易于理解、便于维护且利于改进的代码。
本书核心内容包括：
涵盖Python 3.x及Python 2.x主要应用领域的实用指南，以及与之配套的详细解释及代码范例。
与函数相关的编程建议，这些建议有助于我们写出意图清晰、便于复用且缺陷较少的函数。
如何准确地表达类与对象的行为。
在使用元类和动态属性时，如何避免错误的用法。
更为高效的并发及并行方式。
与Python内置模块相关的编程技巧和习惯用法。
多人协作时所用的开发工具和最佳实践方式。
旨在改善代码质量和程序性能的调试、测试与优化方案。|,机械工业出版社,59
Python语言及其应用,[美] Bill Lubanovic,本书介绍Python 语言的基础知识及其在各个领域的具体应用，基于最新版本3.x。书中首先介绍了Python 语言的一些必备基本知识，然后介绍了在商业、科研以及艺术领域使用Python 开发各种应用的实例。文字简洁明了，案例丰富实用，是一本难得的Python 入门手册。,人民邮电出版社,79.00元
Python Cookbook,|Alex Martelli,Anna Ravenscroft,David Ascher|,|本书介绍了Python应用在各个领域中的一些使用技巧和方法，从最基本的字符、文件序列、字典和排序，到进阶的面向对象编程、数据库和数据持久化、 XML处理和Web编程，再到比较高级和抽象的描述符、装饰器、元类、迭代器和生成器，均有涉及。书中还介绍了一些第三方包和库的使用，包括 Twisted、GIL、PyWin32等。本书覆盖了Python应用中的很多常见问题，并提出了通用的解决方案。书中的代码和方法具有很强的实用性，可以方便地应用到实际的项目中，并产生立竿见影的效果。尤为难得的是，本书的各位作者都具有丰富的业界实践经验，因此，本书不仅给出了对各种问题的解决方案，同时还体现了很多专家的思维方式和良好的编程习惯，与具体的细节性知识相比，这部分内容无疑是本书的精华。
本书适合具有一定Python基础的读者阅读参考。|,人民邮电出版社,99.00元
Dive Into Python,Mark Pilgrim,Dive Into Python 是为有经验的程序员编写的一本 Python 书。,Apress,USD 39.99
Python for Data Analysis,Wesly McKinney,|这本书主要是用 pandas 连接 SciPy 和 NumPy，用pandas做数据处理是Pycon2012上一个很热门的话题。另一个功能强大的东西是Sage，它将很多开源的软件集成到统一的 Python 接口。
Python for Data Analysis is concerned with the nuts and bolts of manipulating, processing, cleaning, and crunching data in Python. It is also a practical, modern introduction to scientific computing in Python, tailored for data-intensive applications. This is a book about the parts of the Python language and libraries you’ll need to effectively solve a broad set of data analysis problems. This book is not an exposition on analytical methods using Python as the implementation language.
Written by Wes McKinney, the main author of the pandas library, this hands-on book is packed with practical cases studies. It’s ideal for analysts new to Python and for Python programmers new to scientific computing.
Use the IPython interactive shell as your primary development environment
Learn basic and advanced NumPy (Numerical Python) features
Get started with data analysis tools in the pandas library
Use high-performance tools to load, clean, transform, merge, and reshape data
Create scatter plots and static or interactive visualizations with matplotlib
Apply the pandas groupby facility to slice, dice, and summarize datasets
Measure data by points in time, whether it’s specific instances, fixed periods, or intervals
Learn how to solve problems in web analytics, social sciences, finance, and economics, through detailed examples|,O'Reilly Media,
Python学习手册（第4版）,[美] Mark Lutz,|Google和YouTube由于Python的高可适应性、易于维护以及适合于快速开发而采用它。如果你想要编写高质量、高效的并且易于与其他语言和工具集成的代码，《Python学习手册：第4 版》将帮助你使用Python快速实现这一点，不管你是编程新手还是Python初学者。本书是易于掌握和自学的教程，根据作者Python专家Mark Lutz的著名培训课程编写而成。
《Python学习手册：第4版》每一章都包含关于Python语言的关键内容的独立的一课，并且包含了一个独特的“练习题”部分，其中带有实际的练习和测试，以便你可以练习新的技能并随着学习而测试自己的理解。你会发现众多带有注释的示例以及图表，它们将帮助你开始学习Python 3.0。
《Python学习手册：第4版》包括以下内容：
学习Python的主要内建对象类型：数字、列表和字典。
使用Python语句创建和处理对象，并且学习Python的通用语法模型。
使用函数构造和重用代码，函数是Python的基本过程工具。
学习Python模块：封装语句、函数以及其他工具，从而可以组织成较大的组件。
Python的面向对象编程工具，用于组织程序代码。
学习异常处理模型，以及用于编写较大程序的开发工具。
了解包括装饰器、描述器、元类和Unicode处理等高级Python工具。|,机械工业出版社,119.00元
Flask Web Development,Miguel Grinberg,,O'Reilly Media,USD 24.99
可爱的Python,哲思社区,|本书的内容主要来自CPyUG社区的邮件列表，由Python的行者根据自身经验组织而成，是为从来没有听说过Python的其他语言程序员准备的一份实用的导学性质的书。笔者试图将优化后的学习体验，通过故事的方式传达给读者，同时也分享了蟒样（Pythonic式）的知识获取技巧，而且希望将最常用的代码和思路，通过作弊条（Cheat Sheet，提示表单）的形式分享给有初步基础的Python 用户，来帮助大家多快好省地完成功能。
本书期望成为学习使用Python的同好们的沟通话题，引发进一步的学习\/应用\/创造\/推广，就是笔者的追求！因为Python语言本身是种非常灵活的动态脚本语言，同一个目标可以使用多种方式完成，笔者为了让拥有各种不同技术背景的读者可以快速无碍地理解，选择了一种实际上可能比较笨拙的方式来实现功能，聪明的读者一定可以看出来的，那么请会心一笑，因为您已经和我们心灵相通了！|,电子工业出版社,55.00元
Effective Python,Brett Slatkin,,Addison-Wesley Professional,USD 39.99
Python网络数据采集,米切尔 (Ryan Mitchell),本书采用简洁强大的Python语言，介绍了网络数据采集，并为采集新式网络中的各种数据类型提供了全面的指导。第一部分重点介绍网络数据采集的基本原理：如何用Python从网络服务器请求信息，如何对服务器的响应进行基本处理，以及如何以自动化手段与网站进行交互。第二部分介绍如何用网络爬虫测试网站，自动化处理，以及如何通过更多的方式接入网络。,人民邮电出版社,CNY 59.00
Python高级编程,Tarek Ziadé,|《Python高级编程》通过大量的实例，介绍了Python语言的最佳实践和敏捷开发方法，并涉及整个软件生命周期的高级主题，诸如持续集成、版本控制系统、包的发行和分发、开发模式、文档编写等。《Python高级编程》首先介绍如何设置最优的开发环境，然后以Python敏捷开发方法为线索，阐述如何将已被验证的面向对象原则应用到设计中。这些内容为开发人员和项目管理人员提供了整个软件工程中的许多高级概念以及专家级的建议，其中有些内容的意义甚至超出了Python语言本身。
《Python高级编程》针对具备一定Python基础并希望通过在项目中应用最佳实践和新的开发技术来提升自己的Python开发人员。|,人民邮电出版社,45.00元
数据结构与算法：Python语言描述,裘宗燕,本书基于Python语言介绍了数据结构与算法的基本知识，主要内容包括抽象数据类型和Python面向对象程序设计、线性表、字符串、栈和队列、二叉树和树、集合、排序以及算法的基本知识。本书延续问题求解的思路，从解决问题的目标来组织教学内容，注重理论与实践的并用。,机械工业出版社,CNY 45.00
深入理解 Flask,[美]Jack Stouffer,|Flask 是一种具有平缓学习曲线和庞大社区支持的微框架，利用它可以构建大规模的web应用。学习上手Flask非常轻松，但要深入理解却并不容易。
本书从一个简单的Flask应用开始，通过解决若干实战中的问题，对一系列进阶的话题进行了探讨。书中使用MVC（模型-视图-控制器）架构对示例应用进行了转化重构，以演示如何正确地组织应用代码结构。有了可扩展性强的应用结构之后，接下来的章节使用Flask扩展为应用提供了额外的功能，包括用户登录和注册、NoSQL查询、REST API、一套后台管理界面，以及其他特性。然后，你会学到如何使用单元测试，保障代码持续按照正确的方式工作，避免极具风险的猜测式编程。本书最后会讨论可用于部署Flask应用的诸多不同平台，以及你必须考虑的，每个平台的优劣利弊。|,电子工业出版社,79.00
Python语言入门,|[美] Mark Lutz,David Ascber|,书中描述了Python程序的基本构件：类型、操作符、语句、函数、模块、类以及异常，此外还介绍了更多高级主题，包括复杂的实例，最后讲述了如何使用Python定制库来创建大型程序。,中国电力出版社,55.00元
Python入门经典,(美)William F. Punch\/Richard Enbody,《Python入门经典:以解决计算问题为导向的Python编程实践》是一本系统而科学的Python入门教程，美国密歇根州立大学等多所美国知名高校采用其作为编程语言的入门教材，被奉为经典。它不仅从计算机教学和计算机科学的角度讲解了初学者如何才能更有效地去学习Python，而且特别强调用Python解决生活中的实际问题，精心组织了大量来源于生活中不同领域的与数值计算和数据处理相关的案例。通过《Python入门经典:以解决计算问题为导向的Python编程实践》，读者不仅能系统掌握Python编程相关的知识，而且还能掌握利用Python处理各种与数据相关的问题。《Python入门经典:以解决计算问题为导向的Python编程实践》分为五部分，第一部分介绍计算机设备的一般概念和一些计算机术语；第二部分开始介绍编程的基本知识，包括入门知识和控制语句，为后续内容做铺垫；第三部分讲述数据结构和函数，包括字符串、列表和元组、字典和集合、文件、函数、算法和程序等进阶内容，有助于读者提升编程技能；第四部分重点介绍如何使用类定义数据结构和算法、开发程序等，培养读者运用Python语言来实现基本的计算思想和策略的能力；第五部分主要介绍异常、测试和递归，旨在使读者成为更好的程序员。《Python入门经典:以解决计算问题为导向的Python编程实践》深入浅出，每一章节均给出了大量的实例、示范代码和自测练习，便于读者理解和掌握相关知识。读者通过学习《Python入门经典:以解决计算问题为导向的Python编程实践》，不仅能掌握Python语言的基本知识，还能学习如何在实践中运用该语言解决问题。,机械工业出版社,79.00元
学习Python,|Mark Lutz,David Ascher|,|Python是流行、开源、面向对象的编程语言，既可以用于编写单机运行的程序也可以编写脚本程序，具有可移植、强大、易用等特点。跟随专业教师学习是最快捷的掌握此语言的方式。新版的《学习Python》把你带到Mark Lutz和David Ascher面前，他们是著名的Python专家和培训师，他们的用语亲切、组织良好的文章已经指导了许多编程者精通这种语言。
《学习Python（第二版）》给程序员提供了一个学习Python和面向对象编程的综合学习工具。它根据1999年该书第一版发布以来Python语言的大量变化做了更新。本书介绍了最近发布的Python 2.3的基本要素并涵盖了新的特性，如列表内涵，嵌套作用域和迭代器\/产生器。
除了语言特性，《学习Python（第二版）》还为初级程序员提供了新的内容，包括新的面向对象编程和动态类型回顾，新的关于编程起步和配置选项的讨论，新的关于文档的内容等等。全书用新的实例使得语言特性的应用更加具体。
《学习Python（第二版）》首先给出了理解和构造Python程序必需的所有信息，包括类型、运算符、表达式、类、函数、模块和异常。然后，作者给出了更高级的内容，通过真实的应用和可用扩展库说明如何用Python完成一般的任务。全书提供了练习以检验自己的新技能。
《学习Python（第二版）》是本可灵活选读的图书，它让读者能够集中深入Python语言的核心。随着通读全书，你将获得对Python深入而完整的理解，这将帮助你自己开发大型的应用程序。本书适合于任何不仅仅想停留于了解Python而且想更好地掌握它的人。
对本书第一版的褒奖：
“这本书最优之处是作者在提供有用的实例与详细解释说明之间取得近乎完美的平衡。无论你是有经验的计算机程序员还是初学者，这本书对于学习Python语言都是非常适合的。”
——Andrew Morrison, CedarLug|,东南大学出版社,68.00元
python绝技：运用python成为顶级黑客,[美] TJ O'Connor,|Python 是一门常用的编程语言，它不仅上手容易，而且还拥有丰富的支持库。对经常需要针对自己所 处的特定场景编写专用工具的黑客、计算机犯罪调查人员、渗透测试师和安全工程师来说，Python 的这些 特点可以帮助他们又快又好地完成这一任务，以极少的代码量实现所需的功能。《Python绝技：运用Python成为顶级黑客》结合具体的场景和真 实的案例，详述了 Python 在渗透测试、电子取证、网络流量分析、无线安全、网站中信息的自动抓取、 病毒免杀等领域内所发挥的巨大作用。
《Python绝技：运用Python成为顶级黑客》适合计算机安全管理人员、计算机犯罪调查和电子取证人员、渗透测试人员，以及所有对计算机 安全感兴趣的爱好者阅读。同时也可供计算机、信息安全及相关专业的本\/专科院校师生学习参考。|,电子工业出版社,79.00元
Expert Python Programming,Tarek Ziadé,|Python is a dynamic programming language, used in a wide range of domains by programmers who find it simple, yet powerful. From the earliest version 15 years ago to the current one, it has constantly evolved with productivity and code readability in mind.
Even if you find writing Python code easy, writing code that is efficient and easy to maintain and reuse is not so straightforward. This book will show you how to do just that:  it will show you how Python development should be done. Python expert Tarek Ziadé takes you on a practical tour of Python application development, beginning with setting up the best development environment, and along the way looking at agile methodologies in Python, and applying proven object-oriented principles to your design.|,Packt,45
"笨办法"学Python,肖 (Zed A.Shaw),|本书是一本Python入门书籍，适合对计算机了解不多，没有学过编程，但对编程感兴趣的读者学习使用。这本书以习题的方式引导读者一步一步学习编程，从简单的打印一直讲到完整项目的实现，让初学者从基础的编程技术入手，最终体验到软件开发的基本过程。
本书结构非常简单，共包括52个习题，其中26个覆盖了输入\/输出、变量和函数三个主题，另外26个覆盖了一些比较高级的话题，如条件判断、循环、类和对象、代码测试及项目的实现等。每一章的格式基本相同，以代码习题开始，按照说明编写代码，运行并检查结果，然后再做附加练习。
Zed Shaw完善了这个堪称世上最好的Python学习系统。只要跟着学习，你就会和迄今为止数十万Zed教过的初学者一样获得成功。
在这本书中，你将通过完成52个精心设计的习题来学会Python。阅读这些习题，把习题的代码精确地写出来（禁止复制和粘贴！），修正你的错误，观察程序的运行。在这个过程中，你将了解软件是如何工作的，好的程序看起来是什么样子，怎样阅读、编写、思考代码，以及如何用专业程序员的技巧来找出并修正错误。最重要的是，你将学到下面这些编写优秀的Python软件必需的初始技能。
这本书会让你的每一分钟投入都有回报。Python是世界上最强大、最受欢迎的编程语言之一，很快你就会成为一名Python程序员。
你还可以看Zed的视频！随书附赠的DVD中包含5个多小时激情挥洒的教学内容：一部完整的Python视频教程！|,人民邮电出版社,CNY 49.00
Effective Python,布雷特·斯拉特金（Brett Slatkin）,|用Python编写程序，是相当容易的，所以这门语言非常流行。但若想掌握Python所特有的优势、魅力和表达能力，则相当困难，而且语言中还有很多隐藏的陷阱，容易令开发者犯错。
本书可以帮你掌握真正的Pythonic编程方式，令你能够完全发挥出Python语言的强大功能，并写出健壮而高效的代码。Scott Meyers在畅销书《Effective C++》中开创了一种以使用场景为主导的精练教学方式，本书作者Brett Slatkin就以这种方式汇聚了59条优秀的实践原则、开发技巧和便捷方案，并以实用的代码范例来解释它们。
Slatkin根据自己在Google公司多年开发Python基础架构所积累的经验，揭示Python语言中一些鲜为人知的微妙特性，并给出了能够改善代码功能及运行效率的习惯用法。通过本书，你能够了解到解决关键编程任务所用的最佳方式，并学会编写易于理解、便于维护且利于改进的代码。
本书核心内容包括：
涵盖Python 3.x及Python 2.x主要应用领域的实用指南，以及与之配套的详细解释及代码范例。
与函数相关的编程建议，这些建议有助于我们写出意图清晰、便于复用且缺陷较少的函数。
如何准确地表达类与对象的行为。
在使用元类和动态属性时，如何避免错误的用法。
更为高效的并发及并行方式。
与Python内置模块相关的编程技巧和习惯用法。
多人协作时所用的开发工具和最佳实践方式。
旨在改善代码质量和程序性能的调试、测试与优化方案。|,机械工业出版社,59
Python语言及其应用,[美] Bill Lubanovic,本书介绍Python 语言的基础知识及其在各个领域的具体应用，基于最新版本3.x。书中首先介绍了Python 语言的一些必备基本知识，然后介绍了在商业、科研以及艺术领域使用Python 开发各种应用的实例。文字简洁明了，案例丰富实用，是一本难得的Python 入门手册。,人民邮电出版社,79.00元
Python Cookbook,|Alex Martelli,Anna Ravenscroft,David Ascher|,|本书介绍了Python应用在各个领域中的一些使用技巧和方法，从最基本的字符、文件序列、字典和排序，到进阶的面向对象编程、数据库和数据持久化、 XML处理和Web编程，再到比较高级和抽象的描述符、装饰器、元类、迭代器和生成器，均有涉及。书中还介绍了一些第三方包和库的使用，包括 Twisted、GIL、PyWin32等。本书覆盖了Python应用中的很多常见问题，并提出了通用的解决方案。书中的代码和方法具有很强的实用性，可以方便地应用到实际的项目中，并产生立竿见影的效果。尤为难得的是，本书的各位作者都具有丰富的业界实践经验，因此，本书不仅给出了对各种问题的解决方案，同时还体现了很多专家的思维方式和良好的编程习惯，与具体的细节性知识相比，这部分内容无疑是本书的精华。
本书适合具有一定Python基础的读者阅读参考。|,人民邮电出版社,99.00元
Dive Into Python,Mark Pilgrim,Dive Into Python 是为有经验的程序员编写的一本 Python 书。,Apress,USD 39.99
Python for Data Analysis,Wesly McKinney,|这本书主要是用 pandas 连接 SciPy 和 NumPy，用pandas做数据处理是Pycon2012上一个很热门的话题。另一个功能强大的东西是Sage，它将很多开源的软件集成到统一的 Python 接口。
Python for Data Analysis is concerned with the nuts and bolts of manipulating, processing, cleaning, and crunching data in Python. It is also a practical, modern introduction to scientific computing in Python, tailored for data-intensive applications. This is a book about the parts of the Python language and libraries you’ll need to effectively solve a broad set of data analysis problems. This book is not an exposition on analytical methods using Python as the implementation language.
Written by Wes McKinney, the main author of the pandas library, this hands-on book is packed with practical cases studies. It’s ideal for analysts new to Python and for Python programmers new to scientific computing.
Use the IPython interactive shell as your primary development environment
Learn basic and advanced NumPy (Numerical Python) features
Get started with data analysis tools in the pandas library
Use high-performance tools to load, clean, transform, merge, and reshape data
Create scatter plots and static or interactive visualizations with matplotlib
Apply the pandas groupby facility to slice, dice, and summarize datasets
Measure data by points in time, whether it’s specific instances, fixed periods, or intervals
Learn how to solve problems in web analytics, social sciences, finance, and economics, through detailed examples|,O'Reilly Media,
Python学习手册（第4版）,[美] Mark Lutz,|Google和YouTube由于Python的高可适应性、易于维护以及适合于快速开发而采用它。如果你想要编写高质量、高效的并且易于与其他语言和工具集成的代码，《Python学习手册：第4 版》将帮助你使用Python快速实现这一点，不管你是编程新手还是Python初学者。本书是易于掌握和自学的教程，根据作者Python专家Mark Lutz的著名培训课程编写而成。
《Python学习手册：第4版》每一章都包含关于Python语言的关键内容的独立的一课，并且包含了一个独特的“练习题”部分，其中带有实际的练习和测试，以便你可以练习新的技能并随着学习而测试自己的理解。你会发现众多带有注释的示例以及图表，它们将帮助你开始学习Python 3.0。
《Python学习手册：第4版》包括以下内容：
学习Python的主要内建对象类型：数字、列表和字典。
使用Python语句创建和处理对象，并且学习Python的通用语法模型。
使用函数构造和重用代码，函数是Python的基本过程工具。
学习Python模块：封装语句、函数以及其他工具，从而可以组织成较大的组件。
Python的面向对象编程工具，用于组织程序代码。
学习异常处理模型，以及用于编写较大程序的开发工具。
了解包括装饰器、描述器、元类和Unicode处理等高级Python工具。|,机械工业出版社,119.00元
Flask Web Development,Miguel Grinberg,,O'Reilly Media,USD 24.99
可爱的Python,哲思社区,|本书的内容主要来自CPyUG社区的邮件列表，由Python的行者根据自身经验组织而成，是为从来没有听说过Python的其他语言程序员准备的一份实用的导学性质的书。笔者试图将优化后的学习体验，通过故事的方式传达给读者，同时也分享了蟒样（Pythonic式）的知识获取技巧，而且希望将最常用的代码和思路，通过作弊条（Cheat Sheet，提示表单）的形式分享给有初步基础的Python 用户，来帮助大家多快好省地完成功能。
本书期望成为学习使用Python的同好们的沟通话题，引发进一步的学习\/应用\/创造\/推广，就是笔者的追求！因为Python语言本身是种非常灵活的动态脚本语言，同一个目标可以使用多种方式完成，笔者为了让拥有各种不同技术背景的读者可以快速无碍地理解，选择了一种实际上可能比较笨拙的方式来实现功能，聪明的读者一定可以看出来的，那么请会心一笑，因为您已经和我们心灵相通了！|,电子工业出版社,55.00元
Effective Python,Brett Slatkin,,Addison-Wesley Professional,USD 39.99
Python网络数据采集,米切尔 (Ryan Mitchell),本书采用简洁强大的Python语言，介绍了网络数据采集，并为采集新式网络中的各种数据类型提供了全面的指导。第一部分重点介绍网络数据采集的基本原理：如何用Python从网络服务器请求信息，如何对服务器的响应进行基本处理，以及如何以自动化手段与网站进行交互。第二部分介绍如何用网络爬虫测试网站，自动化处理，以及如何通过更多的方式接入网络。,人民邮电出版社,CNY 59.00
Python高级编程,Tarek Ziadé,|《Python高级编程》通过大量的实例，介绍了Python语言的最佳实践和敏捷开发方法，并涉及整个软件生命周期的高级主题，诸如持续集成、版本控制系统、包的发行和分发、开发模式、文档编写等。《Python高级编程》首先介绍如何设置最优的开发环境，然后以Python敏捷开发方法为线索，阐述如何将已被验证的面向对象原则应用到设计中。这些内容为开发人员和项目管理人员提供了整个软件工程中的许多高级概念以及专家级的建议，其中有些内容的意义甚至超出了Python语言本身。
《Python高级编程》针对具备一定Python基础并希望通过在项目中应用最佳实践和新的开发技术来提升自己的Python开发人员。|,人民邮电出版社,45.00元
数据结构与算法：Python语言描述,裘宗燕,本书基于Python语言介绍了数据结构与算法的基本知识，主要内容包括抽象数据类型和Python面向对象程序设计、线性表、字符串、栈和队列、二叉树和树、集合、排序以及算法的基本知识。本书延续问题求解的思路，从解决问题的目标来组织教学内容，注重理论与实践的并用。,机械工业出版社,CNY 45.00
深入理解 Flask,[美]Jack Stouffer,|Flask 是一种具有平缓学习曲线和庞大社区支持的微框架，利用它可以构建大规模的web应用。学习上手Flask非常轻松，但要深入理解却并不容易。
本书从一个简单的Flask应用开始，通过解决若干实战中的问题，对一系列进阶的话题进行了探讨。书中使用MVC（模型-视图-控制器）架构对示例应用进行了转化重构，以演示如何正确地组织应用代码结构。有了可扩展性强的应用结构之后，接下来的章节使用Flask扩展为应用提供了额外的功能，包括用户登录和注册、NoSQL查询、REST API、一套后台管理界面，以及其他特性。然后，你会学到如何使用单元测试，保障代码持续按照正确的方式工作，避免极具风险的猜测式编程。本书最后会讨论可用于部署Flask应用的诸多不同平台，以及你必须考虑的，每个平台的优劣利弊。|,电子工业出版社,79.00
Python语言入门,|[美] Mark Lutz,David Ascber|,书中描述了Python程序的基本构件：类型、操作符、语句、函数、模块、类以及异常，此外还介绍了更多高级主题，包括复杂的实例，最后讲述了如何使用Python定制库来创建大型程序。,中国电力出版社,55.00元
Python科学计算,张若愚,|本书介绍如何用Python开发科学计算的应用程序，除了介绍数值计算之外，还着重介绍如何制作交互式的2D、3D图像，如何设计精巧的程序界面，如何与C语言编写的高速计算程序结合，如何编写声音、图像处理算法等内容。书中涉及的Python扩展库包括NumPy、SciPy、SymPy、matplotlib、Traits、TraitsUI、Chaco、TVTK、Mayavi、VPython、OpenCV等，涉及的应用领域包括数值运算、符号运算、二维图表、三维数据可视化、三维动画演示、图像处理以及界面设计等。
书中以大量实例引导读者逐步深入学习，每个实例程序都有详尽的解释，并都能在本书推荐的运行环境中正常运行。此外，本书附有大量的图表和插图，力求减少长篇的理论介绍和公式推导，以便读者通过实例和数据学习并掌握理论知识。|,清华大学出版社,98.00元
学习Python,|Mark Lutz,David Ascher|,|Python是流行、开源、面向对象的编程语言，既可以用于编写单机运行的程序也可以编写脚本程序，具有可移植、强大、易用等特点。跟随专业教师学习是最快捷的掌握此语言的方式。新版的《学习Python》把你带到Mark Lutz和David Ascher面前，他们是著名的Python专家和培训师，他们的用语亲切、组织良好的文章已经指导了许多编程者精通这种语言。
《学习Python（第二版）》给程序员提供了一个学习Python和面向对象编程的综合学习工具。它根据1999年该书第一版发布以来Python语言的大量变化做了更新。本书介绍了最近发布的Python 2.3的基本要素并涵盖了新的特性，如列表内涵，嵌套作用域和迭代器\/产生器。
除了语言特性，《学习Python（第二版）》还为初级程序员提供了新的内容，包括新的面向对象编程和动态类型回顾，新的关于编程起步和配置选项的讨论，新的关于文档的内容等等。全书用新的实例使得语言特性的应用更加具体。
《学习Python（第二版）》首先给出了理解和构造Python程序必需的所有信息，包括类型、运算符、表达式、类、函数、模块和异常。然后，作者给出了更高级的内容，通过真实的应用和可用扩展库说明如何用Python完成一般的任务。全书提供了练习以检验自己的新技能。
《学习Python（第二版）》是本可灵活选读的图书，它让读者能够集中深入Python语言的核心。随着通读全书，你将获得对Python深入而完整的理解，这将帮助你自己开发大型的应用程序。本书适合于任何不仅仅想停留于了解Python而且想更好地掌握它的人。
对本书第一版的褒奖：
“这本书最优之处是作者在提供有用的实例与详细解释说明之间取得近乎完美的平衡。无论你是有经验的计算机程序员还是初学者，这本书对于学习Python语言都是非常适合的。”
——Andrew Morrison, CedarLug|,东南大学出版社,68.00元
python绝技：运用python成为顶级黑客,[美] TJ O'Connor,|Python 是一门常用的编程语言，它不仅上手容易，而且还拥有丰富的支持库。对经常需要针对自己所 处的特定场景编写专用工具的黑客、计算机犯罪调查人员、渗透测试师和安全工程师来说，Python 的这些 特点可以帮助他们又快又好地完成这一任务，以极少的代码量实现所需的功能。《Python绝技：运用Python成为顶级黑客》结合具体的场景和真 实的案例，详述了 Python 在渗透测试、电子取证、网络流量分析、无线安全、网站中信息的自动抓取、 病毒免杀等领域内所发挥的巨大作用。
《Python绝技：运用Python成为顶级黑客》适合计算机安全管理人员、计算机犯罪调查和电子取证人员、渗透测试人员，以及所有对计算机 安全感兴趣的爱好者阅读。同时也可供计算机、信息安全及相关专业的本\/专科院校师生学习参考。|,电子工业出版社,79.00元
Expert Python Programming,Tarek Ziadé,|Python is a dynamic programming language, used in a wide range of domains by programmers who find it simple, yet powerful. From the earliest version 15 years ago to the current one, it has constantly evolved with productivity and code readability in mind.
Even if you find writing Python code easy, writing code that is efficient and easy to maintain and reuse is not so straightforward. This book will show you how to do just that:  it will show you how Python development should be done. Python expert Tarek Ziadé takes you on a practical tour of Python application development, beginning with setting up the best development environment, and along the way looking at agile methodologies in Python, and applying proven object-oriented principles to your design.|,Packt,45
"笨办法"学Python,肖 (Zed A.Shaw),|本书是一本Python入门书籍，适合对计算机了解不多，没有学过编程，但对编程感兴趣的读者学习使用。这本书以习题的方式引导读者一步一步学习编程，从简单的打印一直讲到完整项目的实现，让初学者从基础的编程技术入手，最终体验到软件开发的基本过程。
本书结构非常简单，共包括52个习题，其中26个覆盖了输入\/输出、变量和函数三个主题，另外26个覆盖了一些比较高级的话题，如条件判断、循环、类和对象、代码测试及项目的实现等。每一章的格式基本相同，以代码习题开始，按照说明编写代码，运行并检查结果，然后再做附加练习。
Zed Shaw完善了这个堪称世上最好的Python学习系统。只要跟着学习，你就会和迄今为止数十万Zed教过的初学者一样获得成功。
在这本书中，你将通过完成52个精心设计的习题来学会Python。阅读这些习题，把习题的代码精确地写出来（禁止复制和粘贴！），修正你的错误，观察程序的运行。在这个过程中，你将了解软件是如何工作的，好的程序看起来是什么样子，怎样阅读、编写、思考代码，以及如何用专业程序员的技巧来找出并修正错误。最重要的是，你将学到下面这些编写优秀的Python软件必需的初始技能。
这本书会让你的每一分钟投入都有回报。Python是世界上最强大、最受欢迎的编程语言之一，很快你就会成为一名Python程序员。
你还可以看Zed的视频！随书附赠的DVD中包含5个多小时激情挥洒的教学内容：一部完整的Python视频教程！|,人民邮电出版社,CNY 49.00
Effective Python,布雷特·斯拉特金（Brett Slatkin）,|用Python编写程序，是相当容易的，所以这门语言非常流行。但若想掌握Python所特有的优势、魅力和表达能力，则相当困难，而且语言中还有很多隐藏的陷阱，容易令开发者犯错。
本书可以帮你掌握真正的Pythonic编程方式，令你能够完全发挥出Python语言的强大功能，并写出健壮而高效的代码。Scott Meyers在畅销书《Effective C++》中开创了一种以使用场景为主导的精练教学方式，本书作者Brett Slatkin就以这种方式汇聚了59条优秀的实践原则、开发技巧和便捷方案，并以实用的代码范例来解释它们。
Slatkin根据自己在Google公司多年开发Python基础架构所积累的经验，揭示Python语言中一些鲜为人知的微妙特性，并给出了能够改善代码功能及运行效率的习惯用法。通过本书，你能够了解到解决关键编程任务所用的最佳方式，并学会编写易于理解、便于维护且利于改进的代码。
本书核心内容包括：
涵盖Python 3.x及Python 2.x主要应用领域的实用指南，以及与之配套的详细解释及代码范例。
与函数相关的编程建议，这些建议有助于我们写出意图清晰、便于复用且缺陷较少的函数。
如何准确地表达类与对象的行为。
在使用元类和动态属性时，如何避免错误的用法。
更为高效的并发及并行方式。
与Python内置模块相关的编程技巧和习惯用法。
多人协作时所用的开发工具和最佳实践方式。
旨在改善代码质量和程序性能的调试、测试与优化方案。|,机械工业出版社,59
Python语言及其应用,[美] Bill Lubanovic,本书介绍Python 语言的基础知识及其在各个领域的具体应用，基于最新版本3.x。书中首先介绍了Python 语言的一些必备基本知识，然后介绍了在商业、科研以及艺术领域使用Python 开发各种应用的实例。文字简洁明了，案例丰富实用，是一本难得的Python 入门手册。,人民邮电出版社,79.00元
Python Cookbook,|Alex Martelli,Anna Ravenscroft,David Ascher|,|本书介绍了Python应用在各个领域中的一些使用技巧和方法，从最基本的字符、文件序列、字典和排序，到进阶的面向对象编程、数据库和数据持久化、 XML处理和Web编程，再到比较高级和抽象的描述符、装饰器、元类、迭代器和生成器，均有涉及。书中还介绍了一些第三方包和库的使用，包括 Twisted、GIL、PyWin32等。本书覆盖了Python应用中的很多常见问题，并提出了通用的解决方案。书中的代码和方法具有很强的实用性，可以方便地应用到实际的项目中，并产生立竿见影的效果。尤为难得的是，本书的各位作者都具有丰富的业界实践经验，因此，本书不仅给出了对各种问题的解决方案，同时还体现了很多专家的思维方式和良好的编程习惯，与具体的细节性知识相比，这部分内容无疑是本书的精华。
本书适合具有一定Python基础的读者阅读参考。|,人民邮电出版社,99.00元
Dive Into Python,Mark Pilgrim,Dive Into Python 是为有经验的程序员编写的一本 Python 书。,Apress,USD 39.99
Python for Data Analysis,Wesly McKinney,|这本书主要是用 pandas 连接 SciPy 和 NumPy，用pandas做数据处理是Pycon2012上一个很热门的话题。另一个功能强大的东西是Sage，它将很多开源的软件集成到统一的 Python 接口。
Python for Data Analysis is concerned with the nuts and bolts of manipulating, processing, cleaning, and crunching data in Python. It is also a practical, modern introduction to scientific computing in Python, tailored for data-intensive applications. This is a book about the parts of the Python language and libraries you’ll need to effectively solve a broad set of data analysis problems. This book is not an exposition on analytical methods using Python as the implementation language.
Written by Wes McKinney, the main author of the pandas library, this hands-on book is packed with practical cases studies. It’s ideal for analysts new to Python and for Python programmers new to scientific computing.
Use the IPython interactive shell as your primary development environment
Learn basic and advanced NumPy (Numerical Python) features
Get started with data analysis tools in the pandas library
Use high-performance tools to load, clean, transform, merge, and reshape data
Create scatter plots and static or interactive visualizations with matplotlib
Apply the pandas groupby facility to slice, dice, and summarize datasets
Measure data by points in time, whether it’s specific instances, fixed periods, or intervals
Learn how to solve problems in web analytics, social sciences, finance, and economics, through detailed examples|,O'Reilly Media,
Python学习手册（第4版）,[美] Mark Lutz,|Google和YouTube由于Python的高可适应性、易于维护以及适合于快速开发而采用它。如果你想要编写高质量、高效的并且易于与其他语言和工具集成的代码，《Python学习手册：第4 版》将帮助你使用Python快速实现这一点，不管你是编程新手还是Python初学者。本书是易于掌握和自学的教程，根据作者Python专家Mark Lutz的著名培训课程编写而成。
《Python学习手册：第4版》每一章都包含关于Python语言的关键内容的独立的一课，并且包含了一个独特的“练习题”部分，其中带有实际的练习和测试，以便你可以练习新的技能并随着学习而测试自己的理解。你会发现众多带有注释的示例以及图表，它们将帮助你开始学习Python 3.0。
《Python学习手册：第4版》包括以下内容：
学习Python的主要内建对象类型：数字、列表和字典。
使用Python语句创建和处理对象，并且学习Python的通用语法模型。
使用函数构造和重用代码，函数是Python的基本过程工具。
学习Python模块：封装语句、函数以及其他工具，从而可以组织成较大的组件。
Python的面向对象编程工具，用于组织程序代码。
学习异常处理模型，以及用于编写较大程序的开发工具。
了解包括装饰器、描述器、元类和Unicode处理等高级Python工具。|,机械工业出版社,119.00元
Flask Web Development,Miguel Grinberg,,O'Reilly Media,USD 24.99
可爱的Python,哲思社区,|本书的内容主要来自CPyUG社区的邮件列表，由Python的行者根据自身经验组织而成，是为从来没有听说过Python的其他语言程序员准备的一份实用的导学性质的书。笔者试图将优化后的学习体验，通过故事的方式传达给读者，同时也分享了蟒样（Pythonic式）的知识获取技巧，而且希望将最常用的代码和思路，通过作弊条（Cheat Sheet，提示表单）的形式分享给有初步基础的Python 用户，来帮助大家多快好省地完成功能。
本书期望成为学习使用Python的同好们的沟通话题，引发进一步的学习\/应用\/创造\/推广，就是笔者的追求！因为Python语言本身是种非常灵活的动态脚本语言，同一个目标可以使用多种方式完成，笔者为了让拥有各种不同技术背景的读者可以快速无碍地理解，选择了一种实际上可能比较笨拙的方式来实现功能，聪明的读者一定可以看出来的，那么请会心一笑，因为您已经和我们心灵相通了！|,电子工业出版社,55.00元
Effective Python,Brett Slatkin,,Addison-Wesley Professional,USD 39.99
Python网络数据采集,米切尔 (Ryan Mitchell),本书采用简洁强大的Python语言，介绍了网络数据采集，并为采集新式网络中的各种数据类型提供了全面的指导。第一部分重点介绍网络数据采集的基本原理：如何用Python从网络服务器请求信息，如何对服务器的响应进行基本处理，以及如何以自动化手段与网站进行交互。第二部分介绍如何用网络爬虫测试网站，自动化处理，以及如何通过更多的方式接入网络。,人民邮电出版社,CNY 59.00
Python高级编程,Tarek Ziadé,|《Python高级编程》通过大量的实例，介绍了Python语言的最佳实践和敏捷开发方法，并涉及整个软件生命周期的高级主题，诸如持续集成、版本控制系统、包的发行和分发、开发模式、文档编写等。《Python高级编程》首先介绍如何设置最优的开发环境，然后以Python敏捷开发方法为线索，阐述如何将已被验证的面向对象原则应用到设计中。这些内容为开发人员和项目管理人员提供了整个软件工程中的许多高级概念以及专家级的建议，其中有些内容的意义甚至超出了Python语言本身。
《Python高级编程》针对具备一定Python基础并希望通过在项目中应用最佳实践和新的开发技术来提升自己的Python开发人员。|,人民邮电出版社,45.00元
数据结构与算法：Python语言描述,裘宗燕,本书基于Python语言介绍了数据结构与算法的基本知识，主要内容包括抽象数据类型和Python面向对象程序设计、线性表、字符串、栈和队列、二叉树和树、集合、排序以及算法的基本知识。本书延续问题求解的思路，从解决问题的目标来组织教学内容，注重理论与实践的并用。,机械工业出版社,CNY 45.00
深入理解 Flask,[美]Jack Stouffer,|Flask 是一种具有平缓学习曲线和庞大社区支持的微框架，利用它可以构建大规模的web应用。学习上手Flask非常轻松，但要深入理解却并不容易。
本书从一个简单的Flask应用开始，通过解决若干实战中的问题，对一系列进阶的话题进行了探讨。书中使用MVC（模型-视图-控制器）架构对示例应用进行了转化重构，以演示如何正确地组织应用代码结构。有了可扩展性强的应用结构之后，接下来的章节使用Flask扩展为应用提供了额外的功能，包括用户登录和注册、NoSQL查询、REST API、一套后台管理界面，以及其他特性。然后，你会学到如何使用单元测试，保障代码持续按照正确的方式工作，避免极具风险的猜测式编程。本书最后会讨论可用于部署Flask应用的诸多不同平台，以及你必须考虑的，每个平台的优劣利弊。|,电子工业出版社,79.00
Python语言入门,|[美] Mark Lutz,David Ascber|,书中描述了Python程序的基本构件：类型、操作符、语句、函数、模块、类以及异常，此外还介绍了更多高级主题，包括复杂的实例，最后讲述了如何使用Python定制库来创建大型程序。,中国电力出版社,55.00元
Python科学计算,张若愚,|本书介绍如何用Python开发科学计算的应用程序，除了介绍数值计算之外，还着重介绍如何制作交互式的2D、3D图像，如何设计精巧的程序界面，如何与C语言编写的高速计算程序结合，如何编写声音、图像处理算法等内容。书中涉及的Python扩展库包括NumPy、SciPy、SymPy、matplotlib、Traits、TraitsUI、Chaco、TVTK、Mayavi、VPython、OpenCV等，涉及的应用领域包括数值运算、符号运算、二维图表、三维数据可视化、三维动画演示、图像处理以及界面设计等。
书中以大量实例引导读者逐步深入学习，每个实例程序都有详尽的解释，并都能在本书推荐的运行环境中正常运行。此外，本书附有大量的图表和插图，力求减少长篇的理论介绍和公式推导，以便读者通过实例和数据学习并掌握理论知识。|,清华大学出版社,98.00元
Python标准库,Doug Hellmann,|本书由资深Python专家亲自执笔，Python语言的核心开发人员作序推荐，权威性毋庸置疑。
对于程序员而言，标准库与语言本身同样重要，它好比一个百宝箱，能为各种常见的任务提供完美的解决方案，所以本书是所有Python程序员都必备的工具书！本书以案例驱动的方式讲解了标准库中一百多个模块的使用方法（如何工作）和工作原理（为什么要这样工作），比标准库的官方文档更容易理解（一个简单的示例比一份手册文档更有帮助），为Python程序员熟练掌握和使用这些模块提供了绝佳指导。
全书一共19章，系统而全面地对Python标准库中的一百多个模块进行了生动的讲解。这些模块主要包括：文本处理工具模块、与数据结构相关的模块、与算法有关的模块、管理日期和时间值的模块、用于数学计算的模块、管理文件系统的模块、用于数据存储与交换的模块、用于数据压缩与归档的模块、用于加密的模块、与进程和线程相关的模块、与网络通信和Email相关的模块、构建模块、支持处理多种自然语言和文化设置的模块、开发工具模块、与运行时特性相关的模块，等等。|,机械工业出版社华章公司,139.00元
python绝技：运用python成为顶级黑客,[美] TJ O'Connor,|Python 是一门常用的编程语言，它不仅上手容易，而且还拥有丰富的支持库。对经常需要针对自己所 处的特定场景编写专用工具的黑客、计算机犯罪调查人员、渗透测试师和安全工程师来说，Python 的这些 特点可以帮助他们又快又好地完成这一任务，以极少的代码量实现所需的功能。《Python绝技：运用Python成为顶级黑客》结合具体的场景和真 实的案例，详述了 Python 在渗透测试、电子取证、网络流量分析、无线安全、网站中信息的自动抓取、 病毒免杀等领域内所发挥的巨大作用。
《Python绝技：运用Python成为顶级黑客》适合计算机安全管理人员、计算机犯罪调查和电子取证人员、渗透测试人员，以及所有对计算机 安全感兴趣的爱好者阅读。同时也可供计算机、信息安全及相关专业的本\/专科院校师生学习参考。|,电子工业出版社,79.00元
Expert Python Programming,Tarek Ziadé,|Python is a dynamic programming language, used in a wide range of domains by programmers who find it simple, yet powerful. From the earliest version 15 years ago to the current one, it has constantly evolved with productivity and code readability in mind.
Even if you find writing Python code easy, writing code that is efficient and easy to maintain and reuse is not so straightforward. This book will show you how to do just that:  it will show you how Python development should be done. Python expert Tarek Ziadé takes you on a practical tour of Python application development, beginning with setting up the best development environment, and along the way looking at agile methodologies in Python, and applying proven object-oriented principles to your design.|,Packt,45
"笨办法"学Python,肖 (Zed A.Shaw),|本书是一本Python入门书籍，适合对计算机了解不多，没有学过编程，但对编程感兴趣的读者学习使用。这本书以习题的方式引导读者一步一步学习编程，从简单的打印一直讲到完整项目的实现，让初学者从基础的编程技术入手，最终体验到软件开发的基本过程。
本书结构非常简单，共包括52个习题，其中26个覆盖了输入\/输出、变量和函数三个主题，另外26个覆盖了一些比较高级的话题，如条件判断、循环、类和对象、代码测试及项目的实现等。每一章的格式基本相同，以代码习题开始，按照说明编写代码，运行并检查结果，然后再做附加练习。
Zed Shaw完善了这个堪称世上最好的Python学习系统。只要跟着学习，你就会和迄今为止数十万Zed教过的初学者一样获得成功。
在这本书中，你将通过完成52个精心设计的习题来学会Python。阅读这些习题，把习题的代码精确地写出来（禁止复制和粘贴！），修正你的错误，观察程序的运行。在这个过程中，你将了解软件是如何工作的，好的程序看起来是什么样子，怎样阅读、编写、思考代码，以及如何用专业程序员的技巧来找出并修正错误。最重要的是，你将学到下面这些编写优秀的Python软件必需的初始技能。
这本书会让你的每一分钟投入都有回报。Python是世界上最强大、最受欢迎的编程语言之一，很快你就会成为一名Python程序员。
你还可以看Zed的视频！随书附赠的DVD中包含5个多小时激情挥洒的教学内容：一部完整的Python视频教程！|,人民邮电出版社,CNY 49.00
Effective Python,布雷特·斯拉特金（Brett Slatkin）,|用Python编写程序，是相当容易的，所以这门语言非常流行。但若想掌握Python所特有的优势、魅力和表达能力，则相当困难，而且语言中还有很多隐藏的陷阱，容易令开发者犯错。
本书可以帮你掌握真正的Pythonic编程方式，令你能够完全发挥出Python语言的强大功能，并写出健壮而高效的代码。Scott Meyers在畅销书《Effective C++》中开创了一种以使用场景为主导的精练教学方式，本书作者Brett Slatkin就以这种方式汇聚了59条优秀的实践原则、开发技巧和便捷方案，并以实用的代码范例来解释它们。
Slatkin根据自己在Google公司多年开发Python基础架构所积累的经验，揭示Python语言中一些鲜为人知的微妙特性，并给出了能够改善代码功能及运行效率的习惯用法。通过本书，你能够了解到解决关键编程任务所用的最佳方式，并学会编写易于理解、便于维护且利于改进的代码。
本书核心内容包括：
涵盖Python 3.x及Python 2.x主要应用领域的实用指南，以及与之配套的详细解释及代码范例。
与函数相关的编程建议，这些建议有助于我们写出意图清晰、便于复用且缺陷较少的函数。
如何准确地表达类与对象的行为。
在使用元类和动态属性时，如何避免错误的用法。
更为高效的并发及并行方式。
与Python内置模块相关的编程技巧和习惯用法。
多人协作时所用的开发工具和最佳实践方式。
旨在改善代码质量和程序性能的调试、测试与优化方案。|,机械工业出版社,59
Python语言及其应用,[美] Bill Lubanovic,本书介绍Python 语言的基础知识及其在各个领域的具体应用，基于最新版本3.x。书中首先介绍了Python 语言的一些必备基本知识，然后介绍了在商业、科研以及艺术领域使用Python 开发各种应用的实例。文字简洁明了，案例丰富实用，是一本难得的Python 入门手册。,人民邮电出版社,79.00元
Python Cookbook,|Alex Martelli,Anna Ravenscroft,David Ascher|,|本书介绍了Python应用在各个领域中的一些使用技巧和方法，从最基本的字符、文件序列、字典和排序，到进阶的面向对象编程、数据库和数据持久化、 XML处理和Web编程，再到比较高级和抽象的描述符、装饰器、元类、迭代器和生成器，均有涉及。书中还介绍了一些第三方包和库的使用，包括 Twisted、GIL、PyWin32等。本书覆盖了Python应用中的很多常见问题，并提出了通用的解决方案。书中的代码和方法具有很强的实用性，可以方便地应用到实际的项目中，并产生立竿见影的效果。尤为难得的是，本书的各位作者都具有丰富的业界实践经验，因此，本书不仅给出了对各种问题的解决方案，同时还体现了很多专家的思维方式和良好的编程习惯，与具体的细节性知识相比，这部分内容无疑是本书的精华。
本书适合具有一定Python基础的读者阅读参考。|,人民邮电出版社,99.00元
Dive Into Python,Mark Pilgrim,Dive Into Python 是为有经验的程序员编写的一本 Python 书。,Apress,USD 39.99
Python for Data Analysis,Wesly McKinney,|这本书主要是用 pandas 连接 SciPy 和 NumPy，用pandas做数据处理是Pycon2012上一个很热门的话题。另一个功能强大的东西是Sage，它将很多开源的软件集成到统一的 Python 接口。
Python for Data Analysis is concerned with the nuts and bolts of manipulating, processing, cleaning, and crunching data in Python. It is also a practical, modern introduction to scientific computing in Python, tailored for data-intensive applications. This is a book about the parts of the Python language and libraries you’ll need to effectively solve a broad set of data analysis problems. This book is not an exposition on analytical methods using Python as the implementation language.
Written by Wes McKinney, the main author of the pandas library, this hands-on book is packed with practical cases studies. It’s ideal for analysts new to Python and for Python programmers new to scientific computing.
Use the IPython interactive shell as your primary development environment
Learn basic and advanced NumPy (Numerical Python) features
Get started with data analysis tools in the pandas library
Use high-performance tools to load, clean, transform, merge, and reshape data
Create scatter plots and static or interactive visualizations with matplotlib
Apply the pandas groupby facility to slice, dice, and summarize datasets
Measure data by points in time, whether it’s specific instances, fixed periods, or intervals
Learn how to solve problems in web analytics, social sciences, finance, and economics, through detailed examples|,O'Reilly Media,
Python学习手册（第4版）,[美] Mark Lutz,|Google和YouTube由于Python的高可适应性、易于维护以及适合于快速开发而采用它。如果你想要编写高质量、高效的并且易于与其他语言和工具集成的代码，《Python学习手册：第4 版》将帮助你使用Python快速实现这一点，不管你是编程新手还是Python初学者。本书是易于掌握和自学的教程，根据作者Python专家Mark Lutz的著名培训课程编写而成。
《Python学习手册：第4版》每一章都包含关于Python语言的关键内容的独立的一课，并且包含了一个独特的“练习题”部分，其中带有实际的练习和测试，以便你可以练习新的技能并随着学习而测试自己的理解。你会发现众多带有注释的示例以及图表，它们将帮助你开始学习Python 3.0。
《Python学习手册：第4版》包括以下内容：
学习Python的主要内建对象类型：数字、列表和字典。
使用Python语句创建和处理对象，并且学习Python的通用语法模型。
使用函数构造和重用代码，函数是Python的基本过程工具。
学习Python模块：封装语句、函数以及其他工具，从而可以组织成较大的组件。
Python的面向对象编程工具，用于组织程序代码。
学习异常处理模型，以及用于编写较大程序的开发工具。
了解包括装饰器、描述器、元类和Unicode处理等高级Python工具。|,机械工业出版社,119.00元
Flask Web Development,Miguel Grinberg,,O'Reilly Media,USD 24.99
可爱的Python,哲思社区,|本书的内容主要来自CPyUG社区的邮件列表，由Python的行者根据自身经验组织而成，是为从来没有听说过Python的其他语言程序员准备的一份实用的导学性质的书。笔者试图将优化后的学习体验，通过故事的方式传达给读者，同时也分享了蟒样（Pythonic式）的知识获取技巧，而且希望将最常用的代码和思路，通过作弊条（Cheat Sheet，提示表单）的形式分享给有初步基础的Python 用户，来帮助大家多快好省地完成功能。
本书期望成为学习使用Python的同好们的沟通话题，引发进一步的学习\/应用\/创造\/推广，就是笔者的追求！因为Python语言本身是种非常灵活的动态脚本语言，同一个目标可以使用多种方式完成，笔者为了让拥有各种不同技术背景的读者可以快速无碍地理解，选择了一种实际上可能比较笨拙的方式来实现功能，聪明的读者一定可以看出来的，那么请会心一笑，因为您已经和我们心灵相通了！|,电子工业出版社,55.00元
Effective Python,Brett Slatkin,,Addison-Wesley Professional,USD 39.99
Python网络数据采集,米切尔 (Ryan Mitchell),本书采用简洁强大的Python语言，介绍了网络数据采集，并为采集新式网络中的各种数据类型提供了全面的指导。第一部分重点介绍网络数据采集的基本原理：如何用Python从网络服务器请求信息，如何对服务器的响应进行基本处理，以及如何以自动化手段与网站进行交互。第二部分介绍如何用网络爬虫测试网站，自动化处理，以及如何通过更多的方式接入网络。,人民邮电出版社,CNY 59.00
Python高级编程,Tarek Ziadé,|《Python高级编程》通过大量的实例，介绍了Python语言的最佳实践和敏捷开发方法，并涉及整个软件生命周期的高级主题，诸如持续集成、版本控制系统、包的发行和分发、开发模式、文档编写等。《Python高级编程》首先介绍如何设置最优的开发环境，然后以Python敏捷开发方法为线索，阐述如何将已被验证的面向对象原则应用到设计中。这些内容为开发人员和项目管理人员提供了整个软件工程中的许多高级概念以及专家级的建议，其中有些内容的意义甚至超出了Python语言本身。
《Python高级编程》针对具备一定Python基础并希望通过在项目中应用最佳实践和新的开发技术来提升自己的Python开发人员。|,人民邮电出版社,45.00元
数据结构与算法：Python语言描述,裘宗燕,本书基于Python语言介绍了数据结构与算法的基本知识，主要内容包括抽象数据类型和Python面向对象程序设计、线性表、字符串、栈和队列、二叉树和树、集合、排序以及算法的基本知识。本书延续问题求解的思路，从解决问题的目标来组织教学内容，注重理论与实践的并用。,机械工业出版社,CNY 45.00
深入理解 Flask,[美]Jack Stouffer,|Flask 是一种具有平缓学习曲线和庞大社区支持的微框架，利用它可以构建大规模的web应用。学习上手Flask非常轻松，但要深入理解却并不容易。
本书从一个简单的Flask应用开始，通过解决若干实战中的问题，对一系列进阶的话题进行了探讨。书中使用MVC（模型-视图-控制器）架构对示例应用进行了转化重构，以演示如何正确地组织应用代码结构。有了可扩展性强的应用结构之后，接下来的章节使用Flask扩展为应用提供了额外的功能，包括用户登录和注册、NoSQL查询、REST API、一套后台管理界面，以及其他特性。然后，你会学到如何使用单元测试，保障代码持续按照正确的方式工作，避免极具风险的猜测式编程。本书最后会讨论可用于部署Flask应用的诸多不同平台，以及你必须考虑的，每个平台的优劣利弊。|,电子工业出版社,79.00
Python语言入门,|[美] Mark Lutz,David Ascber|,书中描述了Python程序的基本构件：类型、操作符、语句、函数、模块、类以及异常，此外还介绍了更多高级主题，包括复杂的实例，最后讲述了如何使用Python定制库来创建大型程序。,中国电力出版社,55.00元
Python科学计算,张若愚,|本书介绍如何用Python开发科学计算的应用程序，除了介绍数值计算之外，还着重介绍如何制作交互式的2D、3D图像，如何设计精巧的程序界面，如何与C语言编写的高速计算程序结合，如何编写声音、图像处理算法等内容。书中涉及的Python扩展库包括NumPy、SciPy、SymPy、matplotlib、Traits、TraitsUI、Chaco、TVTK、Mayavi、VPython、OpenCV等，涉及的应用领域包括数值运算、符号运算、二维图表、三维数据可视化、三维动画演示、图像处理以及界面设计等。
书中以大量实例引导读者逐步深入学习，每个实例程序都有详尽的解释，并都能在本书推荐的运行环境中正常运行。此外，本书附有大量的图表和插图，力求减少长篇的理论介绍和公式推导，以便读者通过实例和数据学习并掌握理论知识。|,清华大学出版社,98.00元
Python标准库,Doug Hellmann,|本书由资深Python专家亲自执笔，Python语言的核心开发人员作序推荐，权威性毋庸置疑。
对于程序员而言，标准库与语言本身同样重要，它好比一个百宝箱，能为各种常见的任务提供完美的解决方案，所以本书是所有Python程序员都必备的工具书！本书以案例驱动的方式讲解了标准库中一百多个模块的使用方法（如何工作）和工作原理（为什么要这样工作），比标准库的官方文档更容易理解（一个简单的示例比一份手册文档更有帮助），为Python程序员熟练掌握和使用这些模块提供了绝佳指导。
全书一共19章，系统而全面地对Python标准库中的一百多个模块进行了生动的讲解。这些模块主要包括：文本处理工具模块、与数据结构相关的模块、与算法有关的模块、管理日期和时间值的模块、用于数学计算的模块、管理文件系统的模块、用于数据存储与交换的模块、用于数据压缩与归档的模块、用于加密的模块、与进程和线程相关的模块、与网络通信和Email相关的模块、构建模块、支持处理多种自然语言和文化设置的模块、开发工具模块、与运行时特性相关的模块，等等。|,机械工业出版社华章公司,139.00元
Flask Web开发：基于Python的Web应用开发实战,[美] Miguel Grinberg,|本书不仅适合初级Web开发人员学习阅读，更是Python程序员用来学习高级Web开发技术的优秀参考书。
•	学习Flask应用的基本结构，编写示例应用；
•	使用必备的组件，包括模板、数据库、Web表单和电子邮件支持；
•	使用包和模块构建可伸缩的大型应用；
•	实现用户认证、角色和个人资料；
•	在博客网站中重用模板、分页显示列表以及使用富文本；
•	使用基于Flask的REST式API，在智能手机、平板电脑和其他第三方客户端上实现可用功能；
•	学习运行单元测试以及提升性能；
•	将Web应用部署到生产服务器。|,人民邮电出版社,59.00元
Expert Python Programming,Tarek Ziadé,|Python is a dynamic programming language, used in a wide range of domains by programmers who find it simple, yet powerful. From the earliest version 15 years ago to the current one, it has constantly evolved with productivity and code readability in mind.
Even if you find writing Python code easy, writing code that is efficient and easy to maintain and reuse is not so straightforward. This book will show you how to do just that:  it will show you how Python development should be done. Python expert Tarek Ziadé takes you on a practical tour of Python application development, beginning with setting up the best development environment, and along the way looking at agile methodologies in Python, and applying proven object-oriented principles to your design.|,Packt,45
"笨办法"学Python,肖 (Zed A.Shaw),|本书是一本Python入门书籍，适合对计算机了解不多，没有学过编程，但对编程感兴趣的读者学习使用。这本书以习题的方式引导读者一步一步学习编程，从简单的打印一直讲到完整项目的实现，让初学者从基础的编程技术入手，最终体验到软件开发的基本过程。
本书结构非常简单，共包括52个习题，其中26个覆盖了输入\/输出、变量和函数三个主题，另外26个覆盖了一些比较高级的话题，如条件判断、循环、类和对象、代码测试及项目的实现等。每一章的格式基本相同，以代码习题开始，按照说明编写代码，运行并检查结果，然后再做附加练习。
Zed Shaw完善了这个堪称世上最好的Python学习系统。只要跟着学习，你就会和迄今为止数十万Zed教过的初学者一样获得成功。
在这本书中，你将通过完成52个精心设计的习题来学会Python。阅读这些习题，把习题的代码精确地写出来（禁止复制和粘贴！），修正你的错误，观察程序的运行。在这个过程中，你将了解软件是如何工作的，好的程序看起来是什么样子，怎样阅读、编写、思考代码，以及如何用专业程序员的技巧来找出并修正错误。最重要的是，你将学到下面这些编写优秀的Python软件必需的初始技能。
这本书会让你的每一分钟投入都有回报。Python是世界上最强大、最受欢迎的编程语言之一，很快你就会成为一名Python程序员。
你还可以看Zed的视频！随书附赠的DVD中包含5个多小时激情挥洒的教学内容：一部完整的Python视频教程！|,人民邮电出版社,CNY 49.00
Effective Python,布雷特·斯拉特金（Brett Slatkin）,|用Python编写程序，是相当容易的，所以这门语言非常流行。但若想掌握Python所特有的优势、魅力和表达能力，则相当困难，而且语言中还有很多隐藏的陷阱，容易令开发者犯错。
本书可以帮你掌握真正的Pythonic编程方式，令你能够完全发挥出Python语言的强大功能，并写出健壮而高效的代码。Scott Meyers在畅销书《Effective C++》中开创了一种以使用场景为主导的精练教学方式，本书作者Brett Slatkin就以这种方式汇聚了59条优秀的实践原则、开发技巧和便捷方案，并以实用的代码范例来解释它们。
Slatkin根据自己在Google公司多年开发Python基础架构所积累的经验，揭示Python语言中一些鲜为人知的微妙特性，并给出了能够改善代码功能及运行效率的习惯用法。通过本书，你能够了解到解决关键编程任务所用的最佳方式，并学会编写易于理解、便于维护且利于改进的代码。
本书核心内容包括：
涵盖Python 3.x及Python 2.x主要应用领域的实用指南，以及与之配套的详细解释及代码范例。
与函数相关的编程建议，这些建议有助于我们写出意图清晰、便于复用且缺陷较少的函数。
如何准确地表达类与对象的行为。
在使用元类和动态属性时，如何避免错误的用法。
更为高效的并发及并行方式。
与Python内置模块相关的编程技巧和习惯用法。
多人协作时所用的开发工具和最佳实践方式。
旨在改善代码质量和程序性能的调试、测试与优化方案。|,机械工业出版社,59
Python语言及其应用,[美] Bill Lubanovic,本书介绍Python 语言的基础知识及其在各个领域的具体应用，基于最新版本3.x。书中首先介绍了Python 语言的一些必备基本知识，然后介绍了在商业、科研以及艺术领域使用Python 开发各种应用的实例。文字简洁明了，案例丰富实用，是一本难得的Python 入门手册。,人民邮电出版社,79.00元
Python Cookbook,|Alex Martelli,Anna Ravenscroft,David Ascher|,|本书介绍了Python应用在各个领域中的一些使用技巧和方法，从最基本的字符、文件序列、字典和排序，到进阶的面向对象编程、数据库和数据持久化、 XML处理和Web编程，再到比较高级和抽象的描述符、装饰器、元类、迭代器和生成器，均有涉及。书中还介绍了一些第三方包和库的使用，包括 Twisted、GIL、PyWin32等。本书覆盖了Python应用中的很多常见问题，并提出了通用的解决方案。书中的代码和方法具有很强的实用性，可以方便地应用到实际的项目中，并产生立竿见影的效果。尤为难得的是，本书的各位作者都具有丰富的业界实践经验，因此，本书不仅给出了对各种问题的解决方案，同时还体现了很多专家的思维方式和良好的编程习惯，与具体的细节性知识相比，这部分内容无疑是本书的精华。
本书适合具有一定Python基础的读者阅读参考。|,人民邮电出版社,99.00元
Dive Into Python,Mark Pilgrim,Dive Into Python 是为有经验的程序员编写的一本 Python 书。,Apress,USD 39.99
Python for Data Analysis,Wesly McKinney,|这本书主要是用 pandas 连接 SciPy 和 NumPy，用pandas做数据处理是Pycon2012上一个很热门的话题。另一个功能强大的东西是Sage，它将很多开源的软件集成到统一的 Python 接口。
Python for Data Analysis is concerned with the nuts and bolts of manipulating, processing, cleaning, and crunching data in Python. It is also a practical, modern introduction to scientific computing in Python, tailored for data-intensive applications. This is a book about the parts of the Python language and libraries you’ll need to effectively solve a broad set of data analysis problems. This book is not an exposition on analytical methods using Python as the implementation language.
Written by Wes McKinney, the main author of the pandas library, this hands-on book is packed with practical cases studies. It’s ideal for analysts new to Python and for Python programmers new to scientific computing.
Use the IPython interactive shell as your primary development environment
Learn basic and advanced NumPy (Numerical Python) features
Get started with data analysis tools in the pandas library
Use high-performance tools to load, clean, transform, merge, and reshape data
Create scatter plots and static or interactive visualizations with matplotlib
Apply the pandas groupby facility to slice, dice, and summarize datasets
Measure data by points in time, whether it’s specific instances, fixed periods, or intervals
Learn how to solve problems in web analytics, social sciences, finance, and economics, through detailed examples|,O'Reilly Media,
Python学习手册（第4版）,[美] Mark Lutz,|Google和YouTube由于Python的高可适应性、易于维护以及适合于快速开发而采用它。如果你想要编写高质量、高效的并且易于与其他语言和工具集成的代码，《Python学习手册：第4 版》将帮助你使用Python快速实现这一点，不管你是编程新手还是Python初学者。本书是易于掌握和自学的教程，根据作者Python专家Mark Lutz的著名培训课程编写而成。
《Python学习手册：第4版》每一章都包含关于Python语言的关键内容的独立的一课，并且包含了一个独特的“练习题”部分，其中带有实际的练习和测试，以便你可以练习新的技能并随着学习而测试自己的理解。你会发现众多带有注释的示例以及图表，它们将帮助你开始学习Python 3.0。
《Python学习手册：第4版》包括以下内容：
学习Python的主要内建对象类型：数字、列表和字典。
使用Python语句创建和处理对象，并且学习Python的通用语法模型。
使用函数构造和重用代码，函数是Python的基本过程工具。
学习Python模块：封装语句、函数以及其他工具，从而可以组织成较大的组件。
Python的面向对象编程工具，用于组织程序代码。
学习异常处理模型，以及用于编写较大程序的开发工具。
了解包括装饰器、描述器、元类和Unicode处理等高级Python工具。|,机械工业出版社,119.00元
Flask Web Development,Miguel Grinberg,,O'Reilly Media,USD 24.99
可爱的Python,哲思社区,|本书的内容主要来自CPyUG社区的邮件列表，由Python的行者根据自身经验组织而成，是为从来没有听说过Python的其他语言程序员准备的一份实用的导学性质的书。笔者试图将优化后的学习体验，通过故事的方式传达给读者，同时也分享了蟒样（Pythonic式）的知识获取技巧，而且希望将最常用的代码和思路，通过作弊条（Cheat Sheet，提示表单）的形式分享给有初步基础的Python 用户，来帮助大家多快好省地完成功能。
本书期望成为学习使用Python的同好们的沟通话题，引发进一步的学习\/应用\/创造\/推广，就是笔者的追求！因为Python语言本身是种非常灵活的动态脚本语言，同一个目标可以使用多种方式完成，笔者为了让拥有各种不同技术背景的读者可以快速无碍地理解，选择了一种实际上可能比较笨拙的方式来实现功能，聪明的读者一定可以看出来的，那么请会心一笑，因为您已经和我们心灵相通了！|,电子工业出版社,55.00元
Effective Python,Brett Slatkin,,Addison-Wesley Professional,USD 39.99
Python网络数据采集,米切尔 (Ryan Mitchell),本书采用简洁强大的Python语言，介绍了网络数据采集，并为采集新式网络中的各种数据类型提供了全面的指导。第一部分重点介绍网络数据采集的基本原理：如何用Python从网络服务器请求信息，如何对服务器的响应进行基本处理，以及如何以自动化手段与网站进行交互。第二部分介绍如何用网络爬虫测试网站，自动化处理，以及如何通过更多的方式接入网络。,人民邮电出版社,CNY 59.00
Python高级编程,Tarek Ziadé,|《Python高级编程》通过大量的实例，介绍了Python语言的最佳实践和敏捷开发方法，并涉及整个软件生命周期的高级主题，诸如持续集成、版本控制系统、包的发行和分发、开发模式、文档编写等。《Python高级编程》首先介绍如何设置最优的开发环境，然后以Python敏捷开发方法为线索，阐述如何将已被验证的面向对象原则应用到设计中。这些内容为开发人员和项目管理人员提供了整个软件工程中的许多高级概念以及专家级的建议，其中有些内容的意义甚至超出了Python语言本身。
《Python高级编程》针对具备一定Python基础并希望通过在项目中应用最佳实践和新的开发技术来提升自己的Python开发人员。|,人民邮电出版社,45.00元
数据结构与算法：Python语言描述,裘宗燕,本书基于Python语言介绍了数据结构与算法的基本知识，主要内容包括抽象数据类型和Python面向对象程序设计、线性表、字符串、栈和队列、二叉树和树、集合、排序以及算法的基本知识。本书延续问题求解的思路，从解决问题的目标来组织教学内容，注重理论与实践的并用。,机械工业出版社,CNY 45.00
深入理解 Flask,[美]Jack Stouffer,|Flask 是一种具有平缓学习曲线和庞大社区支持的微框架，利用它可以构建大规模的web应用。学习上手Flask非常轻松，但要深入理解却并不容易。
本书从一个简单的Flask应用开始，通过解决若干实战中的问题，对一系列进阶的话题进行了探讨。书中使用MVC（模型-视图-控制器）架构对示例应用进行了转化重构，以演示如何正确地组织应用代码结构。有了可扩展性强的应用结构之后，接下来的章节使用Flask扩展为应用提供了额外的功能，包括用户登录和注册、NoSQL查询、REST API、一套后台管理界面，以及其他特性。然后，你会学到如何使用单元测试，保障代码持续按照正确的方式工作，避免极具风险的猜测式编程。本书最后会讨论可用于部署Flask应用的诸多不同平台，以及你必须考虑的，每个平台的优劣利弊。|,电子工业出版社,79.00
Python语言入门,|[美] Mark Lutz,David Ascber|,书中描述了Python程序的基本构件：类型、操作符、语句、函数、模块、类以及异常，此外还介绍了更多高级主题，包括复杂的实例，最后讲述了如何使用Python定制库来创建大型程序。,中国电力出版社,55.00元
Python科学计算,张若愚,|本书介绍如何用Python开发科学计算的应用程序，除了介绍数值计算之外，还着重介绍如何制作交互式的2D、3D图像，如何设计精巧的程序界面，如何与C语言编写的高速计算程序结合，如何编写声音、图像处理算法等内容。书中涉及的Python扩展库包括NumPy、SciPy、SymPy、matplotlib、Traits、TraitsUI、Chaco、TVTK、Mayavi、VPython、OpenCV等，涉及的应用领域包括数值运算、符号运算、二维图表、三维数据可视化、三维动画演示、图像处理以及界面设计等。
书中以大量实例引导读者逐步深入学习，每个实例程序都有详尽的解释，并都能在本书推荐的运行环境中正常运行。此外，本书附有大量的图表和插图，力求减少长篇的理论介绍和公式推导，以便读者通过实例和数据学习并掌握理论知识。|,清华大学出版社,98.00元
Python标准库,Doug Hellmann,|本书由资深Python专家亲自执笔，Python语言的核心开发人员作序推荐，权威性毋庸置疑。
对于程序员而言，标准库与语言本身同样重要，它好比一个百宝箱，能为各种常见的任务提供完美的解决方案，所以本书是所有Python程序员都必备的工具书！本书以案例驱动的方式讲解了标准库中一百多个模块的使用方法（如何工作）和工作原理（为什么要这样工作），比标准库的官方文档更容易理解（一个简单的示例比一份手册文档更有帮助），为Python程序员熟练掌握和使用这些模块提供了绝佳指导。
全书一共19章，系统而全面地对Python标准库中的一百多个模块进行了生动的讲解。这些模块主要包括：文本处理工具模块、与数据结构相关的模块、与算法有关的模块、管理日期和时间值的模块、用于数学计算的模块、管理文件系统的模块、用于数据存储与交换的模块、用于数据压缩与归档的模块、用于加密的模块、与进程和线程相关的模块、与网络通信和Email相关的模块、构建模块、支持处理多种自然语言和文化设置的模块、开发工具模块、与运行时特性相关的模块，等等。|,机械工业出版社华章公司,139.00元
Flask Web开发：基于Python的Web应用开发实战,[美] Miguel Grinberg,|本书不仅适合初级Web开发人员学习阅读，更是Python程序员用来学习高级Web开发技术的优秀参考书。
•	学习Flask应用的基本结构，编写示例应用；
•	使用必备的组件，包括模板、数据库、Web表单和电子邮件支持；
•	使用包和模块构建可伸缩的大型应用；
•	实现用户认证、角色和个人资料；
•	在博客网站中重用模板、分页显示列表以及使用富文本；
•	使用基于Flask的REST式API，在智能手机、平板电脑和其他第三方客户端上实现可用功能；
•	学习运行单元测试以及提升性能；
•	将Web应用部署到生产服务器。|,人民邮电出版社,59.00元
Python for Data Analysis,Wes McKinney,|Finding great data analysts is difficult. Despite the explosive growth of data in industries ranging from manufacturing and retail to high technology, finance, and healthcare, learning and accessing data analysis tools has remained a challenge. This pragmatic guide will help train you in one of the most important tools in the field - Python. Filled with practical case studies, Python for Data Analysis demonstrates the nuts and bolts of manipulating, processing, cleaning, and crunching data with Python. It also serves as a modern introduction to scientific computing in Python for data-intensive applications. Learn about the growing field of data analysis from an expert in the community. Learn everything you need to start doing real data analysis work with Python Get the most complete instruction on the basics of the "modern scientific Python platform" Learn from an insider who builds tools for the scientific stack Get an excellent introduction for novices and a wealth of advanced methods for experienced analysts|,O'Reilly Media,USD 39.99
"笨办法"学Python,肖 (Zed A.Shaw),|本书是一本Python入门书籍，适合对计算机了解不多，没有学过编程，但对编程感兴趣的读者学习使用。这本书以习题的方式引导读者一步一步学习编程，从简单的打印一直讲到完整项目的实现，让初学者从基础的编程技术入手，最终体验到软件开发的基本过程。
本书结构非常简单，共包括52个习题，其中26个覆盖了输入\/输出、变量和函数三个主题，另外26个覆盖了一些比较高级的话题，如条件判断、循环、类和对象、代码测试及项目的实现等。每一章的格式基本相同，以代码习题开始，按照说明编写代码，运行并检查结果，然后再做附加练习。
Zed Shaw完善了这个堪称世上最好的Python学习系统。只要跟着学习，你就会和迄今为止数十万Zed教过的初学者一样获得成功。
在这本书中，你将通过完成52个精心设计的习题来学会Python。阅读这些习题，把习题的代码精确地写出来（禁止复制和粘贴！），修正你的错误，观察程序的运行。在这个过程中，你将了解软件是如何工作的，好的程序看起来是什么样子，怎样阅读、编写、思考代码，以及如何用专业程序员的技巧来找出并修正错误。最重要的是，你将学到下面这些编写优秀的Python软件必需的初始技能。
这本书会让你的每一分钟投入都有回报。Python是世界上最强大、最受欢迎的编程语言之一，很快你就会成为一名Python程序员。
你还可以看Zed的视频！随书附赠的DVD中包含5个多小时激情挥洒的教学内容：一部完整的Python视频教程！|,人民邮电出版社,CNY 49.00
Effective Python,布雷特·斯拉特金（Brett Slatkin）,|用Python编写程序，是相当容易的，所以这门语言非常流行。但若想掌握Python所特有的优势、魅力和表达能力，则相当困难，而且语言中还有很多隐藏的陷阱，容易令开发者犯错。
本书可以帮你掌握真正的Pythonic编程方式，令你能够完全发挥出Python语言的强大功能，并写出健壮而高效的代码。Scott Meyers在畅销书《Effective C++》中开创了一种以使用场景为主导的精练教学方式，本书作者Brett Slatkin就以这种方式汇聚了59条优秀的实践原则、开发技巧和便捷方案，并以实用的代码范例来解释它们。
Slatkin根据自己在Google公司多年开发Python基础架构所积累的经验，揭示Python语言中一些鲜为人知的微妙特性，并给出了能够改善代码功能及运行效率的习惯用法。通过本书，你能够了解到解决关键编程任务所用的最佳方式，并学会编写易于理解、便于维护且利于改进的代码。
本书核心内容包括：
涵盖Python 3.x及Python 2.x主要应用领域的实用指南，以及与之配套的详细解释及代码范例。
与函数相关的编程建议，这些建议有助于我们写出意图清晰、便于复用且缺陷较少的函数。
如何准确地表达类与对象的行为。
在使用元类和动态属性时，如何避免错误的用法。
更为高效的并发及并行方式。
与Python内置模块相关的编程技巧和习惯用法。
多人协作时所用的开发工具和最佳实践方式。
旨在改善代码质量和程序性能的调试、测试与优化方案。|,机械工业出版社,59
Python语言及其应用,[美] Bill Lubanovic,本书介绍Python 语言的基础知识及其在各个领域的具体应用，基于最新版本3.x。书中首先介绍了Python 语言的一些必备基本知识，然后介绍了在商业、科研以及艺术领域使用Python 开发各种应用的实例。文字简洁明了，案例丰富实用，是一本难得的Python 入门手册。,人民邮电出版社,79.00元
Python Cookbook,|Alex Martelli,Anna Ravenscroft,David Ascher|,|本书介绍了Python应用在各个领域中的一些使用技巧和方法，从最基本的字符、文件序列、字典和排序，到进阶的面向对象编程、数据库和数据持久化、 XML处理和Web编程，再到比较高级和抽象的描述符、装饰器、元类、迭代器和生成器，均有涉及。书中还介绍了一些第三方包和库的使用，包括 Twisted、GIL、PyWin32等。本书覆盖了Python应用中的很多常见问题，并提出了通用的解决方案。书中的代码和方法具有很强的实用性，可以方便地应用到实际的项目中，并产生立竿见影的效果。尤为难得的是，本书的各位作者都具有丰富的业界实践经验，因此，本书不仅给出了对各种问题的解决方案，同时还体现了很多专家的思维方式和良好的编程习惯，与具体的细节性知识相比，这部分内容无疑是本书的精华。
本书适合具有一定Python基础的读者阅读参考。|,人民邮电出版社,99.00元
Dive Into Python,Mark Pilgrim,Dive Into Python 是为有经验的程序员编写的一本 Python 书。,Apress,USD 39.99
Python for Data Analysis,Wesly McKinney,|这本书主要是用 pandas 连接 SciPy 和 NumPy，用pandas做数据处理是Pycon2012上一个很热门的话题。另一个功能强大的东西是Sage，它将很多开源的软件集成到统一的 Python 接口。
Python for Data Analysis is concerned with the nuts and bolts of manipulating, processing, cleaning, and crunching data in Python. It is also a practical, modern introduction to scientific computing in Python, tailored for data-intensive applications. This is a book about the parts of the Python language and libraries you’ll need to effectively solve a broad set of data analysis problems. This book is not an exposition on analytical methods using Python as the implementation language.
Written by Wes McKinney, the main author of the pandas library, this hands-on book is packed with practical cases studies. It’s ideal for analysts new to Python and for Python programmers new to scientific computing.
Use the IPython interactive shell as your primary development environment
Learn basic and advanced NumPy (Numerical Python) features
Get started with data analysis tools in the pandas library
Use high-performance tools to load, clean, transform, merge, and reshape data
Create scatter plots and static or interactive visualizations with matplotlib
Apply the pandas groupby facility to slice, dice, and summarize datasets
Measure data by points in time, whether it’s specific instances, fixed periods, or intervals
Learn how to solve problems in web analytics, social sciences, finance, and economics, through detailed examples|,O'Reilly Media,
Python学习手册（第4版）,[美] Mark Lutz,|Google和YouTube由于Python的高可适应性、易于维护以及适合于快速开发而采用它。如果你想要编写高质量、高效的并且易于与其他语言和工具集成的代码，《Python学习手册：第4 版》将帮助你使用Python快速实现这一点，不管你是编程新手还是Python初学者。本书是易于掌握和自学的教程，根据作者Python专家Mark Lutz的著名培训课程编写而成。
《Python学习手册：第4版》每一章都包含关于Python语言的关键内容的独立的一课，并且包含了一个独特的“练习题”部分，其中带有实际的练习和测试，以便你可以练习新的技能并随着学习而测试自己的理解。你会发现众多带有注释的示例以及图表，它们将帮助你开始学习Python 3.0。
《Python学习手册：第4版》包括以下内容：
学习Python的主要内建对象类型：数字、列表和字典。
使用Python语句创建和处理对象，并且学习Python的通用语法模型。
使用函数构造和重用代码，函数是Python的基本过程工具。
学习Python模块：封装语句、函数以及其他工具，从而可以组织成较大的组件。
Python的面向对象编程工具，用于组织程序代码。
学习异常处理模型，以及用于编写较大程序的开发工具。
了解包括装饰器、描述器、元类和Unicode处理等高级Python工具。|,机械工业出版社,119.00元
Flask Web Development,Miguel Grinberg,,O'Reilly Media,USD 24.99
可爱的Python,哲思社区,|本书的内容主要来自CPyUG社区的邮件列表，由Python的行者根据自身经验组织而成，是为从来没有听说过Python的其他语言程序员准备的一份实用的导学性质的书。笔者试图将优化后的学习体验，通过故事的方式传达给读者，同时也分享了蟒样（Pythonic式）的知识获取技巧，而且希望将最常用的代码和思路，通过作弊条（Cheat Sheet，提示表单）的形式分享给有初步基础的Python 用户，来帮助大家多快好省地完成功能。
本书期望成为学习使用Python的同好们的沟通话题，引发进一步的学习\/应用\/创造\/推广，就是笔者的追求！因为Python语言本身是种非常灵活的动态脚本语言，同一个目标可以使用多种方式完成，笔者为了让拥有各种不同技术背景的读者可以快速无碍地理解，选择了一种实际上可能比较笨拙的方式来实现功能，聪明的读者一定可以看出来的，那么请会心一笑，因为您已经和我们心灵相通了！|,电子工业出版社,55.00元
Effective Python,Brett Slatkin,,Addison-Wesley Professional,USD 39.99
Python网络数据采集,米切尔 (Ryan Mitchell),本书采用简洁强大的Python语言，介绍了网络数据采集，并为采集新式网络中的各种数据类型提供了全面的指导。第一部分重点介绍网络数据采集的基本原理：如何用Python从网络服务器请求信息，如何对服务器的响应进行基本处理，以及如何以自动化手段与网站进行交互。第二部分介绍如何用网络爬虫测试网站，自动化处理，以及如何通过更多的方式接入网络。,人民邮电出版社,CNY 59.00
Python高级编程,Tarek Ziadé,|《Python高级编程》通过大量的实例，介绍了Python语言的最佳实践和敏捷开发方法，并涉及整个软件生命周期的高级主题，诸如持续集成、版本控制系统、包的发行和分发、开发模式、文档编写等。《Python高级编程》首先介绍如何设置最优的开发环境，然后以Python敏捷开发方法为线索，阐述如何将已被验证的面向对象原则应用到设计中。这些内容为开发人员和项目管理人员提供了整个软件工程中的许多高级概念以及专家级的建议，其中有些内容的意义甚至超出了Python语言本身。
《Python高级编程》针对具备一定Python基础并希望通过在项目中应用最佳实践和新的开发技术来提升自己的Python开发人员。|,人民邮电出版社,45.00元
数据结构与算法：Python语言描述,裘宗燕,本书基于Python语言介绍了数据结构与算法的基本知识，主要内容包括抽象数据类型和Python面向对象程序设计、线性表、字符串、栈和队列、二叉树和树、集合、排序以及算法的基本知识。本书延续问题求解的思路，从解决问题的目标来组织教学内容，注重理论与实践的并用。,机械工业出版社,CNY 45.00
深入理解 Flask,[美]Jack Stouffer,|Flask 是一种具有平缓学习曲线和庞大社区支持的微框架，利用它可以构建大规模的web应用。学习上手Flask非常轻松，但要深入理解却并不容易。
本书从一个简单的Flask应用开始，通过解决若干实战中的问题，对一系列进阶的话题进行了探讨。书中使用MVC（模型-视图-控制器）架构对示例应用进行了转化重构，以演示如何正确地组织应用代码结构。有了可扩展性强的应用结构之后，接下来的章节使用Flask扩展为应用提供了额外的功能，包括用户登录和注册、NoSQL查询、REST API、一套后台管理界面，以及其他特性。然后，你会学到如何使用单元测试，保障代码持续按照正确的方式工作，避免极具风险的猜测式编程。本书最后会讨论可用于部署Flask应用的诸多不同平台，以及你必须考虑的，每个平台的优劣利弊。|,电子工业出版社,79.00
Python语言入门,|[美] Mark Lutz,David Ascber|,书中描述了Python程序的基本构件：类型、操作符、语句、函数、模块、类以及异常，此外还介绍了更多高级主题，包括复杂的实例，最后讲述了如何使用Python定制库来创建大型程序。,中国电力出版社,55.00元
Python科学计算,张若愚,|本书介绍如何用Python开发科学计算的应用程序，除了介绍数值计算之外，还着重介绍如何制作交互式的2D、3D图像，如何设计精巧的程序界面，如何与C语言编写的高速计算程序结合，如何编写声音、图像处理算法等内容。书中涉及的Python扩展库包括NumPy、SciPy、SymPy、matplotlib、Traits、TraitsUI、Chaco、TVTK、Mayavi、VPython、OpenCV等，涉及的应用领域包括数值运算、符号运算、二维图表、三维数据可视化、三维动画演示、图像处理以及界面设计等。
书中以大量实例引导读者逐步深入学习，每个实例程序都有详尽的解释，并都能在本书推荐的运行环境中正常运行。此外，本书附有大量的图表和插图，力求减少长篇的理论介绍和公式推导，以便读者通过实例和数据学习并掌握理论知识。|,清华大学出版社,98.00元
Python标准库,Doug Hellmann,|本书由资深Python专家亲自执笔，Python语言的核心开发人员作序推荐，权威性毋庸置疑。
对于程序员而言，标准库与语言本身同样重要，它好比一个百宝箱，能为各种常见的任务提供完美的解决方案，所以本书是所有Python程序员都必备的工具书！本书以案例驱动的方式讲解了标准库中一百多个模块的使用方法（如何工作）和工作原理（为什么要这样工作），比标准库的官方文档更容易理解（一个简单的示例比一份手册文档更有帮助），为Python程序员熟练掌握和使用这些模块提供了绝佳指导。
全书一共19章，系统而全面地对Python标准库中的一百多个模块进行了生动的讲解。这些模块主要包括：文本处理工具模块、与数据结构相关的模块、与算法有关的模块、管理日期和时间值的模块、用于数学计算的模块、管理文件系统的模块、用于数据存储与交换的模块、用于数据压缩与归档的模块、用于加密的模块、与进程和线程相关的模块、与网络通信和Email相关的模块、构建模块、支持处理多种自然语言和文化设置的模块、开发工具模块、与运行时特性相关的模块，等等。|,机械工业出版社华章公司,139.00元
Flask Web开发：基于Python的Web应用开发实战,[美] Miguel Grinberg,|本书不仅适合初级Web开发人员学习阅读，更是Python程序员用来学习高级Web开发技术的优秀参考书。
•	学习Flask应用的基本结构，编写示例应用；
•	使用必备的组件，包括模板、数据库、Web表单和电子邮件支持；
•	使用包和模块构建可伸缩的大型应用；
•	实现用户认证、角色和个人资料；
•	在博客网站中重用模板、分页显示列表以及使用富文本；
•	使用基于Flask的REST式API，在智能手机、平板电脑和其他第三方客户端上实现可用功能；
•	学习运行单元测试以及提升性能；
•	将Web应用部署到生产服务器。|,人民邮电出版社,59.00元
Python for Data Analysis,Wes McKinney,|Finding great data analysts is difficult. Despite the explosive growth of data in industries ranging from manufacturing and retail to high technology, finance, and healthcare, learning and accessing data analysis tools has remained a challenge. This pragmatic guide will help train you in one of the most important tools in the field - Python. Filled with practical case studies, Python for Data Analysis demonstrates the nuts and bolts of manipulating, processing, cleaning, and crunching data with Python. It also serves as a modern introduction to scientific computing in Python for data-intensive applications. Learn about the growing field of data analysis from an expert in the community. Learn everything you need to start doing real data analysis work with Python Get the most complete instruction on the basics of the "modern scientific Python platform" Learn from an insider who builds tools for the scientific stack Get an excellent introduction for novices and a wealth of advanced methods for experienced analysts|,O'Reilly Media,USD 39.99
Data Science from Scratch,Joel Grus,|Data science libraries, frameworks, modules, and toolkits are great for doing data science, but they’re also a good way to dive into the discipline without actually understanding data science. In this book, you’ll learn how many of the most fundamental data science tools and algorithms work by implementing them from scratch.
If you have an aptitude for mathematics and some programming skills, author Joel Grus will help you get comfortable with the math and statistics at the core of data science, and with hacking skills you need to get started as a data scientist. Today’s messy glut of data holds answers to questions no one’s even thought to ask. This book provides you with the know-how to dig those answers out.
Get a crash course in Python
Learn the basics of linear algebra, statistics, and probability—and understand how and when they're used in data science
Collect, explore, clean, munge, and manipulate data
Dive into the fundamentals of machine learning
Implement models such as k-nearest Neighbors, Naive Bayes, linear and logistic regression, decision trees, neural networks, and clustering
Explore recommender systems, natural language processing, network analysis, MapReduce, and databases|,O'Reilly Media,USD 39.99
Effective Python,布雷特·斯拉特金（Brett Slatkin）,|用Python编写程序，是相当容易的，所以这门语言非常流行。但若想掌握Python所特有的优势、魅力和表达能力，则相当困难，而且语言中还有很多隐藏的陷阱，容易令开发者犯错。
本书可以帮你掌握真正的Pythonic编程方式，令你能够完全发挥出Python语言的强大功能，并写出健壮而高效的代码。Scott Meyers在畅销书《Effective C++》中开创了一种以使用场景为主导的精练教学方式，本书作者Brett Slatkin就以这种方式汇聚了59条优秀的实践原则、开发技巧和便捷方案，并以实用的代码范例来解释它们。
Slatkin根据自己在Google公司多年开发Python基础架构所积累的经验，揭示Python语言中一些鲜为人知的微妙特性，并给出了能够改善代码功能及运行效率的习惯用法。通过本书，你能够了解到解决关键编程任务所用的最佳方式，并学会编写易于理解、便于维护且利于改进的代码。
本书核心内容包括：
涵盖Python 3.x及Python 2.x主要应用领域的实用指南，以及与之配套的详细解释及代码范例。
与函数相关的编程建议，这些建议有助于我们写出意图清晰、便于复用且缺陷较少的函数。
如何准确地表达类与对象的行为。
在使用元类和动态属性时，如何避免错误的用法。
更为高效的并发及并行方式。
与Python内置模块相关的编程技巧和习惯用法。
多人协作时所用的开发工具和最佳实践方式。
旨在改善代码质量和程序性能的调试、测试与优化方案。|,机械工业出版社,59
Python语言及其应用,[美] Bill Lubanovic,本书介绍Python 语言的基础知识及其在各个领域的具体应用，基于最新版本3.x。书中首先介绍了Python 语言的一些必备基本知识，然后介绍了在商业、科研以及艺术领域使用Python 开发各种应用的实例。文字简洁明了，案例丰富实用，是一本难得的Python 入门手册。,人民邮电出版社,79.00元
Python Cookbook,|Alex Martelli,Anna Ravenscroft,David Ascher|,|本书介绍了Python应用在各个领域中的一些使用技巧和方法，从最基本的字符、文件序列、字典和排序，到进阶的面向对象编程、数据库和数据持久化、 XML处理和Web编程，再到比较高级和抽象的描述符、装饰器、元类、迭代器和生成器，均有涉及。书中还介绍了一些第三方包和库的使用，包括 Twisted、GIL、PyWin32等。本书覆盖了Python应用中的很多常见问题，并提出了通用的解决方案。书中的代码和方法具有很强的实用性，可以方便地应用到实际的项目中，并产生立竿见影的效果。尤为难得的是，本书的各位作者都具有丰富的业界实践经验，因此，本书不仅给出了对各种问题的解决方案，同时还体现了很多专家的思维方式和良好的编程习惯，与具体的细节性知识相比，这部分内容无疑是本书的精华。
本书适合具有一定Python基础的读者阅读参考。|,人民邮电出版社,99.00元
Dive Into Python,Mark Pilgrim,Dive Into Python 是为有经验的程序员编写的一本 Python 书。,Apress,USD 39.99
Python for Data Analysis,Wesly McKinney,|这本书主要是用 pandas 连接 SciPy 和 NumPy，用pandas做数据处理是Pycon2012上一个很热门的话题。另一个功能强大的东西是Sage，它将很多开源的软件集成到统一的 Python 接口。
Python for Data Analysis is concerned with the nuts and bolts of manipulating, processing, cleaning, and crunching data in Python. It is also a practical, modern introduction to scientific computing in Python, tailored for data-intensive applications. This is a book about the parts of the Python language and libraries you’ll need to effectively solve a broad set of data analysis problems. This book is not an exposition on analytical methods using Python as the implementation language.
Written by Wes McKinney, the main author of the pandas library, this hands-on book is packed with practical cases studies. It’s ideal for analysts new to Python and for Python programmers new to scientific computing.
Use the IPython interactive shell as your primary development environment
Learn basic and advanced NumPy (Numerical Python) features
Get started with data analysis tools in the pandas library
Use high-performance tools to load, clean, transform, merge, and reshape data
Create scatter plots and static or interactive visualizations with matplotlib
Apply the pandas groupby facility to slice, dice, and summarize datasets
Measure data by points in time, whether it’s specific instances, fixed periods, or intervals
Learn how to solve problems in web analytics, social sciences, finance, and economics, through detailed examples|,O'Reilly Media,
Python学习手册（第4版）,[美] Mark Lutz,|Google和YouTube由于Python的高可适应性、易于维护以及适合于快速开发而采用它。如果你想要编写高质量、高效的并且易于与其他语言和工具集成的代码，《Python学习手册：第4 版》将帮助你使用Python快速实现这一点，不管你是编程新手还是Python初学者。本书是易于掌握和自学的教程，根据作者Python专家Mark Lutz的著名培训课程编写而成。
《Python学习手册：第4版》每一章都包含关于Python语言的关键内容的独立的一课，并且包含了一个独特的“练习题”部分，其中带有实际的练习和测试，以便你可以练习新的技能并随着学习而测试自己的理解。你会发现众多带有注释的示例以及图表，它们将帮助你开始学习Python 3.0。
《Python学习手册：第4版》包括以下内容：
学习Python的主要内建对象类型：数字、列表和字典。
使用Python语句创建和处理对象，并且学习Python的通用语法模型。
使用函数构造和重用代码，函数是Python的基本过程工具。
学习Python模块：封装语句、函数以及其他工具，从而可以组织成较大的组件。
Python的面向对象编程工具，用于组织程序代码。
学习异常处理模型，以及用于编写较大程序的开发工具。
了解包括装饰器、描述器、元类和Unicode处理等高级Python工具。|,机械工业出版社,119.00元
Flask Web Development,Miguel Grinberg,,O'Reilly Media,USD 24.99
可爱的Python,哲思社区,|本书的内容主要来自CPyUG社区的邮件列表，由Python的行者根据自身经验组织而成，是为从来没有听说过Python的其他语言程序员准备的一份实用的导学性质的书。笔者试图将优化后的学习体验，通过故事的方式传达给读者，同时也分享了蟒样（Pythonic式）的知识获取技巧，而且希望将最常用的代码和思路，通过作弊条（Cheat Sheet，提示表单）的形式分享给有初步基础的Python 用户，来帮助大家多快好省地完成功能。
本书期望成为学习使用Python的同好们的沟通话题，引发进一步的学习\/应用\/创造\/推广，就是笔者的追求！因为Python语言本身是种非常灵活的动态脚本语言，同一个目标可以使用多种方式完成，笔者为了让拥有各种不同技术背景的读者可以快速无碍地理解，选择了一种实际上可能比较笨拙的方式来实现功能，聪明的读者一定可以看出来的，那么请会心一笑，因为您已经和我们心灵相通了！|,电子工业出版社,55.00元
Effective Python,Brett Slatkin,,Addison-Wesley Professional,USD 39.99
Python网络数据采集,米切尔 (Ryan Mitchell),本书采用简洁强大的Python语言，介绍了网络数据采集，并为采集新式网络中的各种数据类型提供了全面的指导。第一部分重点介绍网络数据采集的基本原理：如何用Python从网络服务器请求信息，如何对服务器的响应进行基本处理，以及如何以自动化手段与网站进行交互。第二部分介绍如何用网络爬虫测试网站，自动化处理，以及如何通过更多的方式接入网络。,人民邮电出版社,CNY 59.00
Python高级编程,Tarek Ziadé,|《Python高级编程》通过大量的实例，介绍了Python语言的最佳实践和敏捷开发方法，并涉及整个软件生命周期的高级主题，诸如持续集成、版本控制系统、包的发行和分发、开发模式、文档编写等。《Python高级编程》首先介绍如何设置最优的开发环境，然后以Python敏捷开发方法为线索，阐述如何将已被验证的面向对象原则应用到设计中。这些内容为开发人员和项目管理人员提供了整个软件工程中的许多高级概念以及专家级的建议，其中有些内容的意义甚至超出了Python语言本身。
《Python高级编程》针对具备一定Python基础并希望通过在项目中应用最佳实践和新的开发技术来提升自己的Python开发人员。|,人民邮电出版社,45.00元
数据结构与算法：Python语言描述,裘宗燕,本书基于Python语言介绍了数据结构与算法的基本知识，主要内容包括抽象数据类型和Python面向对象程序设计、线性表、字符串、栈和队列、二叉树和树、集合、排序以及算法的基本知识。本书延续问题求解的思路，从解决问题的目标来组织教学内容，注重理论与实践的并用。,机械工业出版社,CNY 45.00
深入理解 Flask,[美]Jack Stouffer,|Flask 是一种具有平缓学习曲线和庞大社区支持的微框架，利用它可以构建大规模的web应用。学习上手Flask非常轻松，但要深入理解却并不容易。
本书从一个简单的Flask应用开始，通过解决若干实战中的问题，对一系列进阶的话题进行了探讨。书中使用MVC（模型-视图-控制器）架构对示例应用进行了转化重构，以演示如何正确地组织应用代码结构。有了可扩展性强的应用结构之后，接下来的章节使用Flask扩展为应用提供了额外的功能，包括用户登录和注册、NoSQL查询、REST API、一套后台管理界面，以及其他特性。然后，你会学到如何使用单元测试，保障代码持续按照正确的方式工作，避免极具风险的猜测式编程。本书最后会讨论可用于部署Flask应用的诸多不同平台，以及你必须考虑的，每个平台的优劣利弊。|,电子工业出版社,79.00
Python语言入门,|[美] Mark Lutz,David Ascber|,书中描述了Python程序的基本构件：类型、操作符、语句、函数、模块、类以及异常，此外还介绍了更多高级主题，包括复杂的实例，最后讲述了如何使用Python定制库来创建大型程序。,中国电力出版社,55.00元
Python科学计算,张若愚,|本书介绍如何用Python开发科学计算的应用程序，除了介绍数值计算之外，还着重介绍如何制作交互式的2D、3D图像，如何设计精巧的程序界面，如何与C语言编写的高速计算程序结合，如何编写声音、图像处理算法等内容。书中涉及的Python扩展库包括NumPy、SciPy、SymPy、matplotlib、Traits、TraitsUI、Chaco、TVTK、Mayavi、VPython、OpenCV等，涉及的应用领域包括数值运算、符号运算、二维图表、三维数据可视化、三维动画演示、图像处理以及界面设计等。
书中以大量实例引导读者逐步深入学习，每个实例程序都有详尽的解释，并都能在本书推荐的运行环境中正常运行。此外，本书附有大量的图表和插图，力求减少长篇的理论介绍和公式推导，以便读者通过实例和数据学习并掌握理论知识。|,清华大学出版社,98.00元
Python标准库,Doug Hellmann,|本书由资深Python专家亲自执笔，Python语言的核心开发人员作序推荐，权威性毋庸置疑。
对于程序员而言，标准库与语言本身同样重要，它好比一个百宝箱，能为各种常见的任务提供完美的解决方案，所以本书是所有Python程序员都必备的工具书！本书以案例驱动的方式讲解了标准库中一百多个模块的使用方法（如何工作）和工作原理（为什么要这样工作），比标准库的官方文档更容易理解（一个简单的示例比一份手册文档更有帮助），为Python程序员熟练掌握和使用这些模块提供了绝佳指导。
全书一共19章，系统而全面地对Python标准库中的一百多个模块进行了生动的讲解。这些模块主要包括：文本处理工具模块、与数据结构相关的模块、与算法有关的模块、管理日期和时间值的模块、用于数学计算的模块、管理文件系统的模块、用于数据存储与交换的模块、用于数据压缩与归档的模块、用于加密的模块、与进程和线程相关的模块、与网络通信和Email相关的模块、构建模块、支持处理多种自然语言和文化设置的模块、开发工具模块、与运行时特性相关的模块，等等。|,机械工业出版社华章公司,139.00元
Flask Web开发：基于Python的Web应用开发实战,[美] Miguel Grinberg,|本书不仅适合初级Web开发人员学习阅读，更是Python程序员用来学习高级Web开发技术的优秀参考书。
•	学习Flask应用的基本结构，编写示例应用；
•	使用必备的组件，包括模板、数据库、Web表单和电子邮件支持；
•	使用包和模块构建可伸缩的大型应用；
•	实现用户认证、角色和个人资料；
•	在博客网站中重用模板、分页显示列表以及使用富文本；
•	使用基于Flask的REST式API，在智能手机、平板电脑和其他第三方客户端上实现可用功能；
•	学习运行单元测试以及提升性能；
•	将Web应用部署到生产服务器。|,人民邮电出版社,59.00元
Python for Data Analysis,Wes McKinney,|Finding great data analysts is difficult. Despite the explosive growth of data in industries ranging from manufacturing and retail to high technology, finance, and healthcare, learning and accessing data analysis tools has remained a challenge. This pragmatic guide will help train you in one of the most important tools in the field - Python. Filled with practical case studies, Python for Data Analysis demonstrates the nuts and bolts of manipulating, processing, cleaning, and crunching data with Python. It also serves as a modern introduction to scientific computing in Python for data-intensive applications. Learn about the growing field of data analysis from an expert in the community. Learn everything you need to start doing real data analysis work with Python Get the most complete instruction on the basics of the "modern scientific Python platform" Learn from an insider who builds tools for the scientific stack Get an excellent introduction for novices and a wealth of advanced methods for experienced analysts|,O'Reilly Media,USD 39.99
Data Science from Scratch,Joel Grus,|Data science libraries, frameworks, modules, and toolkits are great for doing data science, but they’re also a good way to dive into the discipline without actually understanding data science. In this book, you’ll learn how many of the most fundamental data science tools and algorithms work by implementing them from scratch.
If you have an aptitude for mathematics and some programming skills, author Joel Grus will help you get comfortable with the math and statistics at the core of data science, and with hacking skills you need to get started as a data scientist. Today’s messy glut of data holds answers to questions no one’s even thought to ask. This book provides you with the know-how to dig those answers out.
Get a crash course in Python
Learn the basics of linear algebra, statistics, and probability—and understand how and when they're used in data science
Collect, explore, clean, munge, and manipulate data
Dive into the fundamentals of machine learning
Implement models such as k-nearest Neighbors, Naive Bayes, linear and logistic regression, decision trees, neural networks, and clustering
Explore recommender systems, natural language processing, network analysis, MapReduce, and databases|,O'Reilly Media,USD 39.99
Learn Python the Hard Way,Zed A. Shaw,|Master Python and become a programmer-even if you never thought you could! This breakthrough book and CD can help practically anyone get started in programming. It's called "The Hard Way," but it's really quite simple. What's "hard" is this: it requires discipline, practice, and persistence. Zed A. Shaw teaches the Python programming language through a series of 52 brilliantly-crafted exercises-all formatted consistently, and most no longer than two pages (including "extra credit"). Just read each exercise, type in its sample code precisely (no copy-and-paste!), and make the programs run. As you read, type, fix your mistakes, and watch the results, you'll learn how software works, how programming works, what good programs look like, and how to read, write, and see code. You'll discover how to spot crucial differences that fundamentally affect program behavior, and you'll learn everything you need to know about Python logic, input\/output, variables, and functions. Above all, you'll learn the attention to detail that is indispensable to successful programming (and so much else in life). At first, yes, it can be difficult. But it gets easier. And Shaw offers plenty of extra guidance and insight through 5+ full hours of teaching video on the accompanying CD. As Shaw's thousands of online readers and fans will attest, the moment will come when you just "get it"-and that moment feels great. Nothing important comes without discipline, practice, and persistence. But, with Learn Python the Hard Way, readers who bring those qualities to programming will master it-and they will reap the rewards, both personally and in their careers.|,Addison-Wesley Professional,USD 39.99
Python语言及其应用,[美] Bill Lubanovic,本书介绍Python 语言的基础知识及其在各个领域的具体应用，基于最新版本3.x。书中首先介绍了Python 语言的一些必备基本知识，然后介绍了在商业、科研以及艺术领域使用Python 开发各种应用的实例。文字简洁明了，案例丰富实用，是一本难得的Python 入门手册。,人民邮电出版社,79.00元
Python Cookbook,|Alex Martelli,Anna Ravenscroft,David Ascher|,|本书介绍了Python应用在各个领域中的一些使用技巧和方法，从最基本的字符、文件序列、字典和排序，到进阶的面向对象编程、数据库和数据持久化、 XML处理和Web编程，再到比较高级和抽象的描述符、装饰器、元类、迭代器和生成器，均有涉及。书中还介绍了一些第三方包和库的使用，包括 Twisted、GIL、PyWin32等。本书覆盖了Python应用中的很多常见问题，并提出了通用的解决方案。书中的代码和方法具有很强的实用性，可以方便地应用到实际的项目中，并产生立竿见影的效果。尤为难得的是，本书的各位作者都具有丰富的业界实践经验，因此，本书不仅给出了对各种问题的解决方案，同时还体现了很多专家的思维方式和良好的编程习惯，与具体的细节性知识相比，这部分内容无疑是本书的精华。
本书适合具有一定Python基础的读者阅读参考。|,人民邮电出版社,99.00元
Dive Into Python,Mark Pilgrim,Dive Into Python 是为有经验的程序员编写的一本 Python 书。,Apress,USD 39.99
Python for Data Analysis,Wesly McKinney,|这本书主要是用 pandas 连接 SciPy 和 NumPy，用pandas做数据处理是Pycon2012上一个很热门的话题。另一个功能强大的东西是Sage，它将很多开源的软件集成到统一的 Python 接口。
Python for Data Analysis is concerned with the nuts and bolts of manipulating, processing, cleaning, and crunching data in Python. It is also a practical, modern introduction to scientific computing in Python, tailored for data-intensive applications. This is a book about the parts of the Python language and libraries you’ll need to effectively solve a broad set of data analysis problems. This book is not an exposition on analytical methods using Python as the implementation language.
Written by Wes McKinney, the main author of the pandas library, this hands-on book is packed with practical cases studies. It’s ideal for analysts new to Python and for Python programmers new to scientific computing.
Use the IPython interactive shell as your primary development environment
Learn basic and advanced NumPy (Numerical Python) features
Get started with data analysis tools in the pandas library
Use high-performance tools to load, clean, transform, merge, and reshape data
Create scatter plots and static or interactive visualizations with matplotlib
Apply the pandas groupby facility to slice, dice, and summarize datasets
Measure data by points in time, whether it’s specific instances, fixed periods, or intervals
Learn how to solve problems in web analytics, social sciences, finance, and economics, through detailed examples|,O'Reilly Media,
Python学习手册（第4版）,[美] Mark Lutz,|Google和YouTube由于Python的高可适应性、易于维护以及适合于快速开发而采用它。如果你想要编写高质量、高效的并且易于与其他语言和工具集成的代码，《Python学习手册：第4 版》将帮助你使用Python快速实现这一点，不管你是编程新手还是Python初学者。本书是易于掌握和自学的教程，根据作者Python专家Mark Lutz的著名培训课程编写而成。
《Python学习手册：第4版》每一章都包含关于Python语言的关键内容的独立的一课，并且包含了一个独特的“练习题”部分，其中带有实际的练习和测试，以便你可以练习新的技能并随着学习而测试自己的理解。你会发现众多带有注释的示例以及图表，它们将帮助你开始学习Python 3.0。
《Python学习手册：第4版》包括以下内容：
学习Python的主要内建对象类型：数字、列表和字典。
使用Python语句创建和处理对象，并且学习Python的通用语法模型。
使用函数构造和重用代码，函数是Python的基本过程工具。
学习Python模块：封装语句、函数以及其他工具，从而可以组织成较大的组件。
Python的面向对象编程工具，用于组织程序代码。
学习异常处理模型，以及用于编写较大程序的开发工具。
了解包括装饰器、描述器、元类和Unicode处理等高级Python工具。|,机械工业出版社,119.00元
Flask Web Development,Miguel Grinberg,,O'Reilly Media,USD 24.99
可爱的Python,哲思社区,|本书的内容主要来自CPyUG社区的邮件列表，由Python的行者根据自身经验组织而成，是为从来没有听说过Python的其他语言程序员准备的一份实用的导学性质的书。笔者试图将优化后的学习体验，通过故事的方式传达给读者，同时也分享了蟒样（Pythonic式）的知识获取技巧，而且希望将最常用的代码和思路，通过作弊条（Cheat Sheet，提示表单）的形式分享给有初步基础的Python 用户，来帮助大家多快好省地完成功能。
本书期望成为学习使用Python的同好们的沟通话题，引发进一步的学习\/应用\/创造\/推广，就是笔者的追求！因为Python语言本身是种非常灵活的动态脚本语言，同一个目标可以使用多种方式完成，笔者为了让拥有各种不同技术背景的读者可以快速无碍地理解，选择了一种实际上可能比较笨拙的方式来实现功能，聪明的读者一定可以看出来的，那么请会心一笑，因为您已经和我们心灵相通了！|,电子工业出版社,55.00元
Effective Python,Brett Slatkin,,Addison-Wesley Professional,USD 39.99
Python网络数据采集,米切尔 (Ryan Mitchell),本书采用简洁强大的Python语言，介绍了网络数据采集，并为采集新式网络中的各种数据类型提供了全面的指导。第一部分重点介绍网络数据采集的基本原理：如何用Python从网络服务器请求信息，如何对服务器的响应进行基本处理，以及如何以自动化手段与网站进行交互。第二部分介绍如何用网络爬虫测试网站，自动化处理，以及如何通过更多的方式接入网络。,人民邮电出版社,CNY 59.00
Python高级编程,Tarek Ziadé,|《Python高级编程》通过大量的实例，介绍了Python语言的最佳实践和敏捷开发方法，并涉及整个软件生命周期的高级主题，诸如持续集成、版本控制系统、包的发行和分发、开发模式、文档编写等。《Python高级编程》首先介绍如何设置最优的开发环境，然后以Python敏捷开发方法为线索，阐述如何将已被验证的面向对象原则应用到设计中。这些内容为开发人员和项目管理人员提供了整个软件工程中的许多高级概念以及专家级的建议，其中有些内容的意义甚至超出了Python语言本身。
《Python高级编程》针对具备一定Python基础并希望通过在项目中应用最佳实践和新的开发技术来提升自己的Python开发人员。|,人民邮电出版社,45.00元
数据结构与算法：Python语言描述,裘宗燕,本书基于Python语言介绍了数据结构与算法的基本知识，主要内容包括抽象数据类型和Python面向对象程序设计、线性表、字符串、栈和队列、二叉树和树、集合、排序以及算法的基本知识。本书延续问题求解的思路，从解决问题的目标来组织教学内容，注重理论与实践的并用。,机械工业出版社,CNY 45.00
深入理解 Flask,[美]Jack Stouffer,|Flask 是一种具有平缓学习曲线和庞大社区支持的微框架，利用它可以构建大规模的web应用。学习上手Flask非常轻松，但要深入理解却并不容易。
本书从一个简单的Flask应用开始，通过解决若干实战中的问题，对一系列进阶的话题进行了探讨。书中使用MVC（模型-视图-控制器）架构对示例应用进行了转化重构，以演示如何正确地组织应用代码结构。有了可扩展性强的应用结构之后，接下来的章节使用Flask扩展为应用提供了额外的功能，包括用户登录和注册、NoSQL查询、REST API、一套后台管理界面，以及其他特性。然后，你会学到如何使用单元测试，保障代码持续按照正确的方式工作，避免极具风险的猜测式编程。本书最后会讨论可用于部署Flask应用的诸多不同平台，以及你必须考虑的，每个平台的优劣利弊。|,电子工业出版社,79.00
Python语言入门,|[美] Mark Lutz,David Ascber|,书中描述了Python程序的基本构件：类型、操作符、语句、函数、模块、类以及异常，此外还介绍了更多高级主题，包括复杂的实例，最后讲述了如何使用Python定制库来创建大型程序。,中国电力出版社,55.00元
Python科学计算,张若愚,|本书介绍如何用Python开发科学计算的应用程序，除了介绍数值计算之外，还着重介绍如何制作交互式的2D、3D图像，如何设计精巧的程序界面，如何与C语言编写的高速计算程序结合，如何编写声音、图像处理算法等内容。书中涉及的Python扩展库包括NumPy、SciPy、SymPy、matplotlib、Traits、TraitsUI、Chaco、TVTK、Mayavi、VPython、OpenCV等，涉及的应用领域包括数值运算、符号运算、二维图表、三维数据可视化、三维动画演示、图像处理以及界面设计等。
书中以大量实例引导读者逐步深入学习，每个实例程序都有详尽的解释，并都能在本书推荐的运行环境中正常运行。此外，本书附有大量的图表和插图，力求减少长篇的理论介绍和公式推导，以便读者通过实例和数据学习并掌握理论知识。|,清华大学出版社,98.00元
Python标准库,Doug Hellmann,|本书由资深Python专家亲自执笔，Python语言的核心开发人员作序推荐，权威性毋庸置疑。
对于程序员而言，标准库与语言本身同样重要，它好比一个百宝箱，能为各种常见的任务提供完美的解决方案，所以本书是所有Python程序员都必备的工具书！本书以案例驱动的方式讲解了标准库中一百多个模块的使用方法（如何工作）和工作原理（为什么要这样工作），比标准库的官方文档更容易理解（一个简单的示例比一份手册文档更有帮助），为Python程序员熟练掌握和使用这些模块提供了绝佳指导。
全书一共19章，系统而全面地对Python标准库中的一百多个模块进行了生动的讲解。这些模块主要包括：文本处理工具模块、与数据结构相关的模块、与算法有关的模块、管理日期和时间值的模块、用于数学计算的模块、管理文件系统的模块、用于数据存储与交换的模块、用于数据压缩与归档的模块、用于加密的模块、与进程和线程相关的模块、与网络通信和Email相关的模块、构建模块、支持处理多种自然语言和文化设置的模块、开发工具模块、与运行时特性相关的模块，等等。|,机械工业出版社华章公司,139.00元
Flask Web开发：基于Python的Web应用开发实战,[美] Miguel Grinberg,|本书不仅适合初级Web开发人员学习阅读，更是Python程序员用来学习高级Web开发技术的优秀参考书。
•	学习Flask应用的基本结构，编写示例应用；
•	使用必备的组件，包括模板、数据库、Web表单和电子邮件支持；
•	使用包和模块构建可伸缩的大型应用；
•	实现用户认证、角色和个人资料；
•	在博客网站中重用模板、分页显示列表以及使用富文本；
•	使用基于Flask的REST式API，在智能手机、平板电脑和其他第三方客户端上实现可用功能；
•	学习运行单元测试以及提升性能；
•	将Web应用部署到生产服务器。|,人民邮电出版社,59.00元
Python for Data Analysis,Wes McKinney,|Finding great data analysts is difficult. Despite the explosive growth of data in industries ranging from manufacturing and retail to high technology, finance, and healthcare, learning and accessing data analysis tools has remained a challenge. This pragmatic guide will help train you in one of the most important tools in the field - Python. Filled with practical case studies, Python for Data Analysis demonstrates the nuts and bolts of manipulating, processing, cleaning, and crunching data with Python. It also serves as a modern introduction to scientific computing in Python for data-intensive applications. Learn about the growing field of data analysis from an expert in the community. Learn everything you need to start doing real data analysis work with Python Get the most complete instruction on the basics of the "modern scientific Python platform" Learn from an insider who builds tools for the scientific stack Get an excellent introduction for novices and a wealth of advanced methods for experienced analysts|,O'Reilly Media,USD 39.99
Data Science from Scratch,Joel Grus,|Data science libraries, frameworks, modules, and toolkits are great for doing data science, but they’re also a good way to dive into the discipline without actually understanding data science. In this book, you’ll learn how many of the most fundamental data science tools and algorithms work by implementing them from scratch.
If you have an aptitude for mathematics and some programming skills, author Joel Grus will help you get comfortable with the math and statistics at the core of data science, and with hacking skills you need to get started as a data scientist. Today’s messy glut of data holds answers to questions no one’s even thought to ask. This book provides you with the know-how to dig those answers out.
Get a crash course in Python
Learn the basics of linear algebra, statistics, and probability—and understand how and when they're used in data science
Collect, explore, clean, munge, and manipulate data
Dive into the fundamentals of machine learning
Implement models such as k-nearest Neighbors, Naive Bayes, linear and logistic regression, decision trees, neural networks, and clustering
Explore recommender systems, natural language processing, network analysis, MapReduce, and databases|,O'Reilly Media,USD 39.99
Learn Python the Hard Way,Zed A. Shaw,|Master Python and become a programmer-even if you never thought you could! This breakthrough book and CD can help practically anyone get started in programming. It's called "The Hard Way," but it's really quite simple. What's "hard" is this: it requires discipline, practice, and persistence. Zed A. Shaw teaches the Python programming language through a series of 52 brilliantly-crafted exercises-all formatted consistently, and most no longer than two pages (including "extra credit"). Just read each exercise, type in its sample code precisely (no copy-and-paste!), and make the programs run. As you read, type, fix your mistakes, and watch the results, you'll learn how software works, how programming works, what good programs look like, and how to read, write, and see code. You'll discover how to spot crucial differences that fundamentally affect program behavior, and you'll learn everything you need to know about Python logic, input\/output, variables, and functions. Above all, you'll learn the attention to detail that is indispensable to successful programming (and so much else in life). At first, yes, it can be difficult. But it gets easier. And Shaw offers plenty of extra guidance and insight through 5+ full hours of teaching video on the accompanying CD. As Shaw's thousands of online readers and fans will attest, the moment will come when you just "get it"-and that moment feels great. Nothing important comes without discipline, practice, and persistence. But, with Learn Python the Hard Way, readers who bring those qualities to programming will master it-and they will reap the rewards, both personally and in their careers.|,Addison-Wesley Professional,USD 39.99
Gray Hat Python,Justin Seitz,黑帽黑客和白帽黑客综合性Python读物。Grey Hat Python,No Starch Press,USD 39.95
Python Cookbook,|Alex Martelli,Anna Ravenscroft,David Ascher|,|本书介绍了Python应用在各个领域中的一些使用技巧和方法，从最基本的字符、文件序列、字典和排序，到进阶的面向对象编程、数据库和数据持久化、 XML处理和Web编程，再到比较高级和抽象的描述符、装饰器、元类、迭代器和生成器，均有涉及。书中还介绍了一些第三方包和库的使用，包括 Twisted、GIL、PyWin32等。本书覆盖了Python应用中的很多常见问题，并提出了通用的解决方案。书中的代码和方法具有很强的实用性，可以方便地应用到实际的项目中，并产生立竿见影的效果。尤为难得的是，本书的各位作者都具有丰富的业界实践经验，因此，本书不仅给出了对各种问题的解决方案，同时还体现了很多专家的思维方式和良好的编程习惯，与具体的细节性知识相比，这部分内容无疑是本书的精华。
本书适合具有一定Python基础的读者阅读参考。|,人民邮电出版社,99.00元
Dive Into Python,Mark Pilgrim,Dive Into Python 是为有经验的程序员编写的一本 Python 书。,Apress,USD 39.99
Python for Data Analysis,Wesly McKinney,|这本书主要是用 pandas 连接 SciPy 和 NumPy，用pandas做数据处理是Pycon2012上一个很热门的话题。另一个功能强大的东西是Sage，它将很多开源的软件集成到统一的 Python 接口。
Python for Data Analysis is concerned with the nuts and bolts of manipulating, processing, cleaning, and crunching data in Python. It is also a practical, modern introduction to scientific computing in Python, tailored for data-intensive applications. This is a book about the parts of the Python language and libraries you’ll need to effectively solve a broad set of data analysis problems. This book is not an exposition on analytical methods using Python as the implementation language.
Written by Wes McKinney, the main author of the pandas library, this hands-on book is packed with practical cases studies. It’s ideal for analysts new to Python and for Python programmers new to scientific computing.
Use the IPython interactive shell as your primary development environment
Learn basic and advanced NumPy (Numerical Python) features
Get started with data analysis tools in the pandas library
Use high-performance tools to load, clean, transform, merge, and reshape data
Create scatter plots and static or interactive visualizations with matplotlib
Apply the pandas groupby facility to slice, dice, and summarize datasets
Measure data by points in time, whether it’s specific instances, fixed periods, or intervals
Learn how to solve problems in web analytics, social sciences, finance, and economics, through detailed examples|,O'Reilly Media,
Python学习手册（第4版）,[美] Mark Lutz,|Google和YouTube由于Python的高可适应性、易于维护以及适合于快速开发而采用它。如果你想要编写高质量、高效的并且易于与其他语言和工具集成的代码，《Python学习手册：第4 版》将帮助你使用Python快速实现这一点，不管你是编程新手还是Python初学者。本书是易于掌握和自学的教程，根据作者Python专家Mark Lutz的著名培训课程编写而成。
《Python学习手册：第4版》每一章都包含关于Python语言的关键内容的独立的一课，并且包含了一个独特的“练习题”部分，其中带有实际的练习和测试，以便你可以练习新的技能并随着学习而测试自己的理解。你会发现众多带有注释的示例以及图表，它们将帮助你开始学习Python 3.0。
《Python学习手册：第4版》包括以下内容：
学习Python的主要内建对象类型：数字、列表和字典。
使用Python语句创建和处理对象，并且学习Python的通用语法模型。
使用函数构造和重用代码，函数是Python的基本过程工具。
学习Python模块：封装语句、函数以及其他工具，从而可以组织成较大的组件。
Python的面向对象编程工具，用于组织程序代码。
学习异常处理模型，以及用于编写较大程序的开发工具。
了解包括装饰器、描述器、元类和Unicode处理等高级Python工具。|,机械工业出版社,119.00元
Flask Web Development,Miguel Grinberg,,O'Reilly Media,USD 24.99
可爱的Python,哲思社区,|本书的内容主要来自CPyUG社区的邮件列表，由Python的行者根据自身经验组织而成，是为从来没有听说过Python的其他语言程序员准备的一份实用的导学性质的书。笔者试图将优化后的学习体验，通过故事的方式传达给读者，同时也分享了蟒样（Pythonic式）的知识获取技巧，而且希望将最常用的代码和思路，通过作弊条（Cheat Sheet，提示表单）的形式分享给有初步基础的Python 用户，来帮助大家多快好省地完成功能。
本书期望成为学习使用Python的同好们的沟通话题，引发进一步的学习\/应用\/创造\/推广，就是笔者的追求！因为Python语言本身是种非常灵活的动态脚本语言，同一个目标可以使用多种方式完成，笔者为了让拥有各种不同技术背景的读者可以快速无碍地理解，选择了一种实际上可能比较笨拙的方式来实现功能，聪明的读者一定可以看出来的，那么请会心一笑，因为您已经和我们心灵相通了！|,电子工业出版社,55.00元
Effective Python,Brett Slatkin,,Addison-Wesley Professional,USD 39.99
Python网络数据采集,米切尔 (Ryan Mitchell),本书采用简洁强大的Python语言，介绍了网络数据采集，并为采集新式网络中的各种数据类型提供了全面的指导。第一部分重点介绍网络数据采集的基本原理：如何用Python从网络服务器请求信息，如何对服务器的响应进行基本处理，以及如何以自动化手段与网站进行交互。第二部分介绍如何用网络爬虫测试网站，自动化处理，以及如何通过更多的方式接入网络。,人民邮电出版社,CNY 59.00
Python高级编程,Tarek Ziadé,|《Python高级编程》通过大量的实例，介绍了Python语言的最佳实践和敏捷开发方法，并涉及整个软件生命周期的高级主题，诸如持续集成、版本控制系统、包的发行和分发、开发模式、文档编写等。《Python高级编程》首先介绍如何设置最优的开发环境，然后以Python敏捷开发方法为线索，阐述如何将已被验证的面向对象原则应用到设计中。这些内容为开发人员和项目管理人员提供了整个软件工程中的许多高级概念以及专家级的建议，其中有些内容的意义甚至超出了Python语言本身。
《Python高级编程》针对具备一定Python基础并希望通过在项目中应用最佳实践和新的开发技术来提升自己的Python开发人员。|,人民邮电出版社,45.00元
数据结构与算法：Python语言描述,裘宗燕,本书基于Python语言介绍了数据结构与算法的基本知识，主要内容包括抽象数据类型和Python面向对象程序设计、线性表、字符串、栈和队列、二叉树和树、集合、排序以及算法的基本知识。本书延续问题求解的思路，从解决问题的目标来组织教学内容，注重理论与实践的并用。,机械工业出版社,CNY 45.00
深入理解 Flask,[美]Jack Stouffer,|Flask 是一种具有平缓学习曲线和庞大社区支持的微框架，利用它可以构建大规模的web应用。学习上手Flask非常轻松，但要深入理解却并不容易。
本书从一个简单的Flask应用开始，通过解决若干实战中的问题，对一系列进阶的话题进行了探讨。书中使用MVC（模型-视图-控制器）架构对示例应用进行了转化重构，以演示如何正确地组织应用代码结构。有了可扩展性强的应用结构之后，接下来的章节使用Flask扩展为应用提供了额外的功能，包括用户登录和注册、NoSQL查询、REST API、一套后台管理界面，以及其他特性。然后，你会学到如何使用单元测试，保障代码持续按照正确的方式工作，避免极具风险的猜测式编程。本书最后会讨论可用于部署Flask应用的诸多不同平台，以及你必须考虑的，每个平台的优劣利弊。|,电子工业出版社,79.00
Python语言入门,|[美] Mark Lutz,David Ascber|,书中描述了Python程序的基本构件：类型、操作符、语句、函数、模块、类以及异常，此外还介绍了更多高级主题，包括复杂的实例，最后讲述了如何使用Python定制库来创建大型程序。,中国电力出版社,55.00元
Python科学计算,张若愚,|本书介绍如何用Python开发科学计算的应用程序，除了介绍数值计算之外，还着重介绍如何制作交互式的2D、3D图像，如何设计精巧的程序界面，如何与C语言编写的高速计算程序结合，如何编写声音、图像处理算法等内容。书中涉及的Python扩展库包括NumPy、SciPy、SymPy、matplotlib、Traits、TraitsUI、Chaco、TVTK、Mayavi、VPython、OpenCV等，涉及的应用领域包括数值运算、符号运算、二维图表、三维数据可视化、三维动画演示、图像处理以及界面设计等。
书中以大量实例引导读者逐步深入学习，每个实例程序都有详尽的解释，并都能在本书推荐的运行环境中正常运行。此外，本书附有大量的图表和插图，力求减少长篇的理论介绍和公式推导，以便读者通过实例和数据学习并掌握理论知识。|,清华大学出版社,98.00元
Python标准库,Doug Hellmann,|本书由资深Python专家亲自执笔，Python语言的核心开发人员作序推荐，权威性毋庸置疑。
对于程序员而言，标准库与语言本身同样重要，它好比一个百宝箱，能为各种常见的任务提供完美的解决方案，所以本书是所有Python程序员都必备的工具书！本书以案例驱动的方式讲解了标准库中一百多个模块的使用方法（如何工作）和工作原理（为什么要这样工作），比标准库的官方文档更容易理解（一个简单的示例比一份手册文档更有帮助），为Python程序员熟练掌握和使用这些模块提供了绝佳指导。
全书一共19章，系统而全面地对Python标准库中的一百多个模块进行了生动的讲解。这些模块主要包括：文本处理工具模块、与数据结构相关的模块、与算法有关的模块、管理日期和时间值的模块、用于数学计算的模块、管理文件系统的模块、用于数据存储与交换的模块、用于数据压缩与归档的模块、用于加密的模块、与进程和线程相关的模块、与网络通信和Email相关的模块、构建模块、支持处理多种自然语言和文化设置的模块、开发工具模块、与运行时特性相关的模块，等等。|,机械工业出版社华章公司,139.00元
Flask Web开发：基于Python的Web应用开发实战,[美] Miguel Grinberg,|本书不仅适合初级Web开发人员学习阅读，更是Python程序员用来学习高级Web开发技术的优秀参考书。
•	学习Flask应用的基本结构，编写示例应用；
•	使用必备的组件，包括模板、数据库、Web表单和电子邮件支持；
•	使用包和模块构建可伸缩的大型应用；
•	实现用户认证、角色和个人资料；
•	在博客网站中重用模板、分页显示列表以及使用富文本；
•	使用基于Flask的REST式API，在智能手机、平板电脑和其他第三方客户端上实现可用功能；
•	学习运行单元测试以及提升性能；
•	将Web应用部署到生产服务器。|,人民邮电出版社,59.00元
Python for Data Analysis,Wes McKinney,|Finding great data analysts is difficult. Despite the explosive growth of data in industries ranging from manufacturing and retail to high technology, finance, and healthcare, learning and accessing data analysis tools has remained a challenge. This pragmatic guide will help train you in one of the most important tools in the field - Python. Filled with practical case studies, Python for Data Analysis demonstrates the nuts and bolts of manipulating, processing, cleaning, and crunching data with Python. It also serves as a modern introduction to scientific computing in Python for data-intensive applications. Learn about the growing field of data analysis from an expert in the community. Learn everything you need to start doing real data analysis work with Python Get the most complete instruction on the basics of the "modern scientific Python platform" Learn from an insider who builds tools for the scientific stack Get an excellent introduction for novices and a wealth of advanced methods for experienced analysts|,O'Reilly Media,USD 39.99
Data Science from Scratch,Joel Grus,|Data science libraries, frameworks, modules, and toolkits are great for doing data science, but they’re also a good way to dive into the discipline without actually understanding data science. In this book, you’ll learn how many of the most fundamental data science tools and algorithms work by implementing them from scratch.
If you have an aptitude for mathematics and some programming skills, author Joel Grus will help you get comfortable with the math and statistics at the core of data science, and with hacking skills you need to get started as a data scientist. Today’s messy glut of data holds answers to questions no one’s even thought to ask. This book provides you with the know-how to dig those answers out.
Get a crash course in Python
Learn the basics of linear algebra, statistics, and probability—and understand how and when they're used in data science
Collect, explore, clean, munge, and manipulate data
Dive into the fundamentals of machine learning
Implement models such as k-nearest Neighbors, Naive Bayes, linear and logistic regression, decision trees, neural networks, and clustering
Explore recommender systems, natural language processing, network analysis, MapReduce, and databases|,O'Reilly Media,USD 39.99
Learn Python the Hard Way,Zed A. Shaw,|Master Python and become a programmer-even if you never thought you could! This breakthrough book and CD can help practically anyone get started in programming. It's called "The Hard Way," but it's really quite simple. What's "hard" is this: it requires discipline, practice, and persistence. Zed A. Shaw teaches the Python programming language through a series of 52 brilliantly-crafted exercises-all formatted consistently, and most no longer than two pages (including "extra credit"). Just read each exercise, type in its sample code precisely (no copy-and-paste!), and make the programs run. As you read, type, fix your mistakes, and watch the results, you'll learn how software works, how programming works, what good programs look like, and how to read, write, and see code. You'll discover how to spot crucial differences that fundamentally affect program behavior, and you'll learn everything you need to know about Python logic, input\/output, variables, and functions. Above all, you'll learn the attention to detail that is indispensable to successful programming (and so much else in life). At first, yes, it can be difficult. But it gets easier. And Shaw offers plenty of extra guidance and insight through 5+ full hours of teaching video on the accompanying CD. As Shaw's thousands of online readers and fans will attest, the moment will come when you just "get it"-and that moment feels great. Nothing important comes without discipline, practice, and persistence. But, with Learn Python the Hard Way, readers who bring those qualities to programming will master it-and they will reap the rewards, both personally and in their careers.|,Addison-Wesley Professional,USD 39.99
Gray Hat Python,Justin Seitz,黑帽黑客和白帽黑客综合性Python读物。Grey Hat Python,No Starch Press,USD 39.95
像计算机科学家一样思考Python,(美)Allen B.Downey,|《像计算机科学家一样思考python》按照培养读者像计算机科学家一样的思维方式的思路来教授python语言编程。全书贯穿的主体是如何思考、设计、开发的方法，而具体的编程语言，只是提供一个具体场景方便介绍的媒介。《像计算机科学家一样思考python》并不是一本介绍语言的书，而是一本介绍编程思想的书。和其他编程设计语言书籍不同，它不拘泥于语言细节，而是尝试从初学者的角度出发，用生动的示例和丰富的练习来引导读者渐入佳境。
作者从最基本的编程概念开始讲起，包括语言的语法和语义，而且每个编程概念都有清晰的定义，引领读者循序渐进地学习变量、表达式、语句、函数和数据结构。此外，书中还探讨了如何处理文件和数据库，如何理解对象、方法和面向对象编程，如何使用调试技巧来修正语法、运行时和语义错误。每一章都配有术语表和练习题，方便读者巩固所学的知识和技巧。此外，每一章都抽出一节来讲解如何调试程序。作者针对每章中所专注的语言特性，或者相关的开发问题，总结了调试的方方面面。可以说这是一种非常有益的创新，让初学编程的读者少走很多弯路。
全书共19章和3个附录，详细介绍了python语言编程的方方面面。《像计算机科学家一样思考python》是一本实用的学习指南，适合没有python编程经验的程序员阅读，也适合高中或大学的学生、python爱好者及需要了解编程基础的人阅读。对于第一次接触程序设计的人来说，是一本不可多得的佳作。|,人民邮电出版社,49
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Learning Python,Mark Lutz,|Amazon.com Review
The authors of Learning Python show you enough essentials of the Python scripting language to enable you to begin solving problems right away, then reveal more powerful aspects of the language one at a time. This approach is sure to appeal to programmers and system administrators who have urgent problems and a preference for learning by semi-guided experimentation.
First off, Learning Python shows the relationships among Python scripts and their interpreter (in a mostly platform-neutral way). Then, the authors address the mechanics of the language itself, providing illustrations of how Python conceives of numbers, strings, and other objects as well as the operators you use to work with them. Dictionaries, lists, tuples, and other data structures specific to Python receive plenty of attention including complete examples.
Authors Mark Lutz and David Ascher build on that fundamental information in their discussions of functions and modules, which evolve into coverage of namespaces, classes, and the object-oriented aspects of Python programming. There's also information on creating graphical user interfaces (GUIs) for Python applications with Tkinter.
In addition to its careful expository prose, Learning Python includes exercises that both test your Python skills and help reveal more elusive truths about the language. --This text refers to an out of print or unavailable edition of this title.
Review
As a book for programmers who want to learn Python, it does a very good job. The coverage is informative and well order; making it easy to find what you're looking for. Overall, if you do some work with Python, you will benefit from owning this book. " - Sam Smith, news@UK, March "This book is a good example of Python culture, in the clarity of its text as much as in the quality of its code. Anyhone working their way through it will have a solid foundation upon which to explore Python's potential. Highly recommended." - Ivan Uemilianin, CVu, October 2004 --This text refers to the Paperback edition.|,O'Reilly Media,USD 54.99
Python标准库,Doug Hellmann,|本书由资深Python专家亲自执笔，Python语言的核心开发人员作序推荐，权威性毋庸置疑。
对于程序员而言，标准库与语言本身同样重要，它好比一个百宝箱，能为各种常见的任务提供完美的解决方案，所以本书是所有Python程序员都必备的工具书！本书以案例驱动的方式讲解了标准库中一百多个模块的使用方法（如何工作）和工作原理（为什么要这样工作），比标准库的官方文档更容易理解（一个简单的示例比一份手册文档更有帮助），为Python程序员熟练掌握和使用这些模块提供了绝佳指导。
全书一共19章，系统而全面地对Python标准库中的一百多个模块进行了生动的讲解。这些模块主要包括：文本处理工具模块、与数据结构相关的模块、与算法有关的模块、管理日期和时间值的模块、用于数学计算的模块、管理文件系统的模块、用于数据存储与交换的模块、用于数据压缩与归档的模块、用于加密的模块、与进程和线程相关的模块、与网络通信和Email相关的模块、构建模块、支持处理多种自然语言和文化设置的模块、开发工具模块、与运行时特性相关的模块，等等。|,机械工业出版社华章公司,139.00元
Flask Web开发：基于Python的Web应用开发实战,[美] Miguel Grinberg,|本书不仅适合初级Web开发人员学习阅读，更是Python程序员用来学习高级Web开发技术的优秀参考书。
•	学习Flask应用的基本结构，编写示例应用；
•	使用必备的组件，包括模板、数据库、Web表单和电子邮件支持；
•	使用包和模块构建可伸缩的大型应用；
•	实现用户认证、角色和个人资料；
•	在博客网站中重用模板、分页显示列表以及使用富文本；
•	使用基于Flask的REST式API，在智能手机、平板电脑和其他第三方客户端上实现可用功能；
•	学习运行单元测试以及提升性能；
•	将Web应用部署到生产服务器。|,人民邮电出版社,59.00元
Python for Data Analysis,Wes McKinney,|Finding great data analysts is difficult. Despite the explosive growth of data in industries ranging from manufacturing and retail to high technology, finance, and healthcare, learning and accessing data analysis tools has remained a challenge. This pragmatic guide will help train you in one of the most important tools in the field - Python. Filled with practical case studies, Python for Data Analysis demonstrates the nuts and bolts of manipulating, processing, cleaning, and crunching data with Python. It also serves as a modern introduction to scientific computing in Python for data-intensive applications. Learn about the growing field of data analysis from an expert in the community. Learn everything you need to start doing real data analysis work with Python Get the most complete instruction on the basics of the "modern scientific Python platform" Learn from an insider who builds tools for the scientific stack Get an excellent introduction for novices and a wealth of advanced methods for experienced analysts|,O'Reilly Media,USD 39.99
Data Science from Scratch,Joel Grus,|Data science libraries, frameworks, modules, and toolkits are great for doing data science, but they’re also a good way to dive into the discipline without actually understanding data science. In this book, you’ll learn how many of the most fundamental data science tools and algorithms work by implementing them from scratch.
If you have an aptitude for mathematics and some programming skills, author Joel Grus will help you get comfortable with the math and statistics at the core of data science, and with hacking skills you need to get started as a data scientist. Today’s messy glut of data holds answers to questions no one’s even thought to ask. This book provides you with the know-how to dig those answers out.
Get a crash course in Python
Learn the basics of linear algebra, statistics, and probability—and understand how and when they're used in data science
Collect, explore, clean, munge, and manipulate data
Dive into the fundamentals of machine learning
Implement models such as k-nearest Neighbors, Naive Bayes, linear and logistic regression, decision trees, neural networks, and clustering
Explore recommender systems, natural language processing, network analysis, MapReduce, and databases|,O'Reilly Media,USD 39.99
Learn Python the Hard Way,Zed A. Shaw,|Master Python and become a programmer-even if you never thought you could! This breakthrough book and CD can help practically anyone get started in programming. It's called "The Hard Way," but it's really quite simple. What's "hard" is this: it requires discipline, practice, and persistence. Zed A. Shaw teaches the Python programming language through a series of 52 brilliantly-crafted exercises-all formatted consistently, and most no longer than two pages (including "extra credit"). Just read each exercise, type in its sample code precisely (no copy-and-paste!), and make the programs run. As you read, type, fix your mistakes, and watch the results, you'll learn how software works, how programming works, what good programs look like, and how to read, write, and see code. You'll discover how to spot crucial differences that fundamentally affect program behavior, and you'll learn everything you need to know about Python logic, input\/output, variables, and functions. Above all, you'll learn the attention to detail that is indispensable to successful programming (and so much else in life). At first, yes, it can be difficult. But it gets easier. And Shaw offers plenty of extra guidance and insight through 5+ full hours of teaching video on the accompanying CD. As Shaw's thousands of online readers and fans will attest, the moment will come when you just "get it"-and that moment feels great. Nothing important comes without discipline, practice, and persistence. But, with Learn Python the Hard Way, readers who bring those qualities to programming will master it-and they will reap the rewards, both personally and in their careers.|,Addison-Wesley Professional,USD 39.99
Gray Hat Python,Justin Seitz,黑帽黑客和白帽黑客综合性Python读物。Grey Hat Python,No Starch Press,USD 39.95
像计算机科学家一样思考Python,(美)Allen B.Downey,|《像计算机科学家一样思考python》按照培养读者像计算机科学家一样的思维方式的思路来教授python语言编程。全书贯穿的主体是如何思考、设计、开发的方法，而具体的编程语言，只是提供一个具体场景方便介绍的媒介。《像计算机科学家一样思考python》并不是一本介绍语言的书，而是一本介绍编程思想的书。和其他编程设计语言书籍不同，它不拘泥于语言细节，而是尝试从初学者的角度出发，用生动的示例和丰富的练习来引导读者渐入佳境。
作者从最基本的编程概念开始讲起，包括语言的语法和语义，而且每个编程概念都有清晰的定义，引领读者循序渐进地学习变量、表达式、语句、函数和数据结构。此外，书中还探讨了如何处理文件和数据库，如何理解对象、方法和面向对象编程，如何使用调试技巧来修正语法、运行时和语义错误。每一章都配有术语表和练习题，方便读者巩固所学的知识和技巧。此外，每一章都抽出一节来讲解如何调试程序。作者针对每章中所专注的语言特性，或者相关的开发问题，总结了调试的方方面面。可以说这是一种非常有益的创新，让初学编程的读者少走很多弯路。
全书共19章和3个附录，详细介绍了python语言编程的方方面面。《像计算机科学家一样思考python》是一本实用的学习指南，适合没有python编程经验的程序员阅读，也适合高中或大学的学生、python爱好者及需要了解编程基础的人阅读。对于第一次接触程序设计的人来说，是一本不可多得的佳作。|,人民邮电出版社,49
Head First Programming,|David Griffiths,Paul Barry|,|Looking for a reliable way to learn how to program on your own, without being overwhelmed by confusing concepts? "Head First Programming" introduces the core concepts of writing computer programs - variables, decisions, loops, functions, and objects - which apply regardless of the programming language. This book offers concrete examples and exercises in the dynamic and versatile Python language to demonstrate and reinforce these concepts. You can learn the basic tools to start writing the programs that interest you, and get a better understanding of what software can (and cannot) do. When you're finished, you'll have the necessary foundation to learn any programming language or tackle any software project you choose. With a focus on programming concepts, this book teaches you how to: understand the core features of all programming languages, including variables, statements, decisions, loops, expressions, and operators; reuse code with functions; use library code to save time and effort; select the best data structure to manage complex data; write programs that talk to the Web; share your data with other programs; and, write programs that test themselves and help you avoid embarrassing coding errors. We think your time is too valuable to waste struggling with new concepts. Using the latest research in cognitive science and learning theory to craft a multi-sensory learning experience, "Head First Programming" uses a visually rich format designed for the way your brain works, not a text-heavy approach that puts you to sleep.|,O'Reilly Media,USD 49.99
Python自然语言处理,|(英)伯德,(英)克莱因,(美)洛普|,|《Python自然语言处理(影印版)》提供了非常易学的自然语言处理入门介绍，该领域涵盖从文本和电子邮件预测过滤，到自动总结和翻译等多种语言处理技术。在《Python自然语言处理(影印版)》中，你将学会编写Python程序处理大量非结构化文本。你还将通过使用综合语言数据结构访问含有丰富注释的数据集，理解用于分析书面通信内容和结构的主要算法。
《Python自然语言处理》准备了充足的示例和练习，可以帮助你：
从非结构化文本中抽取信息，甚至猜测主题或识别“命名实体”；
分析文本语言结构，包括解析和语义分析；
访问流行的语言学数据库，包括WordNet和树库(treebank)；
从多种语言学和人工智能领域中提取的整合技巧。
《Python自然语言处理(影印版)》将帮助你学习运用Python编程语言和自然语言工具包(NLTK)获得实用的自然语言处理技能。如果对于开发Web应用、分析多语言新闻源或记录濒危语言感兴趣——即便只是想从程序员视角观察人类语言如何运作，你将发现《Python自然语言处理》是一本令人着迷且极为有用的好书。|,东南大学出版社,64.00元
学习PYTHON 第三版(英文影印版),(美国)(Lutz.M.)卢茨,|Python是一种理想的独立程序和脚本程序语言，具有可移植、强大和易用的特点。无论您是初学程序设计还是初学Python，都能通过《学习 Python 第三版》快速而高效地掌握Python核心语言的基础。通读《学习Python 第三版》，您可以获得足够多的知识，能够学习将Python用于您所选择的任何应用领域。.
《学习Python（第三版）》基于作者Mark Lutz在过去10年间讲授培训课程所使用的资料。除了大量的注解插图和每章总结外，作者还为每章加入了独特的一节，通过实际练习和复习提问的方式，让您在学习过程中练习新的技能，测验对概念的理解程度。
类型和运算——深入Python内置对象类型：数值、列表、字典及其他。
语句和语法——用来创建和处理对象的Python代码以及Python通用语法模型。
函数——Python的基本结构化和代码重用工具。..
模块——将语句、函数和其他工具组织为更大的组件。
类和面向对象编程——可选的Python面向对象程序设计工具，用于定制和重用结构化代码。
异常和工具——处理语句和模块异常，并介绍编写较大型程序所使用的开发工具。
有关即将发布的Python 3.0的一些讨论。
《学习Python 第三版》为您理解Python语言提供了完整而又深入的介绍，帮助您领会在以后的工作中会遇到的应用级Python实例。如果您准备好探索Google和 YouTube究竟从Python中发现了什么，那么《学习Python 第三版》就是一个最好的开始。|,东南大学出版社,88.00元
Python Cookbook,|Alex Martelli,Anna Ravenscroft,David Ascher|,|Portable, powerful, and a breeze to use, Python is the popular open source object-oriented programming language used for both standalone programs and scripting applications.  It is now being used by an increasing number of major organizations, including NASA and Google. Updated for Python 2.4, The Python Cookbook, 2nd Edition offers a wealth of useful code for all Python programmers, not just advanced practitioners.  Like its predecessor, the new edition provides solutions to problems that Python programmers face everyday. It now includes over 200 recipes that range from simple tasks, such as working with dictionaries and list comprehensions, to complex tasks, such as monitoring a network and building a templating system. This revised version also includes new chapters on topics such as time, money, and metaprogramming. Here's a list of additional topics covered:  * Manipulating text * Searching and sorting * Working with files and the filesystem * Object-oriented programming * Dealing with threads and processes * System administration * Interacting with databases * Creating user interfaces * Network and web programming * Processing XML * Distributed programming * Debugging and testing Another advantage of The Python Cookbook, 2nd Edition is its trio of authors--three well-known Python programming experts, who are highly visible on email lists and in newsgroups, and speak often at Python conferences.  With scores of practical examples and pertinent background information, The Python Cookbook, 2nd Edition is the one source you need if you're looking to build efficient, flexible, scalable, and well-integrated systems.|,O'Reilly Media,USD 49.95
Python编程快速上手,斯维加特 (Al Sweigart),|如今，人们面临的大多数任务都可以通过编写计算机软件来完成。Python是一种解释型、面向对象、动态数据类型的高级程序设计语言。通过Python编程，我们能够解决现实生活中的很多任务。
本书是一本面向实践的Python编程实用指南。本书的目的，不仅是介绍Python语言的基础知识，而且还通过项目实践教会读者如何应用这些知识和技能。本书的首部分介绍了基本Python编程概念，第二部分介绍了一些不同的任务，通过编写Python程序，可以让计算机自动完成它们。第二部分的每一章都有一些项目程序，供读者学习。每章的末尾还提供了一些习题和深入的实践项目，帮助读者巩固所学的知识。附录部分提供了所有习题的解答。
本书适合任何想要通过Python学习编程的读者，尤其适合缺乏编程基础的初学者。通过阅读本书，读者将能利用强大的编程语言和工具，并且会体会到Python编程的快乐。|,人民邮电出版社,CNY 69.00
Fluent Python,Luciano Ramalho,|Learn how to write idiomatic, effective Python code by leveraging its best features. Python's simplicity quickly lets you become productive with it, but this often means you aren’t using everything the language has to offer. By taking you through Python’s key language features and libraries, this practical book shows you how to make your code shorter, faster, and more readable all at the same time—what experts consider Pythonic.
Many programmers who learn Python basics fall into the trap of reinventing the wheel because of past experience in other languages, and try to bend the language to patterns that don't really apply to it. Author Luciano Ramalho, a Python Software Foundation member and Python programmer for 15 years, helps you drop your accent from another language so you can code Python fluently.
•Learn practical applications of generators for database processing
•Rethink some design patterns in a Python context
•Examine attribute descriptors and when to use them: the key to ORMs
•Explore Pythonic objects: protocols versus interfaces, abstract base classes and multiple inheritance|,O'Reilly Media,USD 39.99
Python金融大数据分析,[德] 伊夫·希尔皮斯科,|唯一一本详细讲解使用Python分析处理金融大数据的专业图书；金融应用开发领域从业人员必读。
Python凭借其简单、易读、可扩展性以及拥有巨大而活跃的科学计算社区，在需要分析、处理大量数据的金融行业得到了广泛而迅速的应用，并且成为该行业开发核心应用的首选编程语言。《Python金融大数据分析》提供了使用Python进行数据分析，以及开发相关应用程序的技巧和工具。
《Python金融大数据分析》总计分为3部分，共19章，第1部分介绍了Python在金融学中的应用，其内容涵盖了Python用于金融行业的原因、Python的基础架构和工具，以及Python在计量金融学中的一些具体入门实例；第2部分介绍了金融分析和应用程序开发中最重要的Python库、技术和方法，其内容涵盖了Python的数据类型和结构、用matplotlib进行数据可视化、金融时间序列数据处理、高性能输入\/输出操作、高性能的Python技术和库、金融学中需要的多种数学工具、随机数生成和随机过程模拟、Python统计学应用、Python和Excel的集成、Python面向对象编程和GUI的开发、Python与Web技术的集成，以及基于Web应用和Web服务的开发；第3部分关注的是蒙特卡洛模拟期权与衍生品定价实际应用的开发工作，其内容涵盖了估值框架的介绍、金融模型的模拟、衍生品的估值、投资组合的估值、波动率期权等知识。
《Python金融大数据分析》适合对使用Python进行大数据分析、处理感兴趣的金融行业开发人员阅读。|,人民邮电出版社,CNY 99.00
Python参考手册（第4版）,David M.Beazley,|本书是权威的Python语言参考指南，内容涉及核心Python语言和Python库的最重要部分。本书内容简洁扼要、可读性强，书中还包括了一些没有在Python官方文档或其他资料中出现过的一些高级的主题。
这一版在内容上进行了全面更新，介绍了Python 2.6和Python 3新引入的编程语言特性和库模块，同时还分析了Python程序员面临的如下难题：是应继续使用现有的Python代码，还是应制定计划将其移植到Python 3？|,人民邮电出版社,89.00元
编写高质量代码：改善Python程序的91个建议,|张颖,赖勇浩|,|在通往“Python技术殿堂”的路上，本书将为你编写健壮、优雅、高质量的Python代码提供切实帮助！内容全部由Python编码的最佳实践组成，从基本原则、惯用法、语法、库、设计模式、内部机制、开发工具和性能优化8个方面深入探讨了编写高质量Python代码的技巧与禁忌，一共总结出91条宝贵的建议。每条建议对应Python程序员可能会遇到的一个问题。本书不仅以建议的方式从正反两方面给出了被实践证明为十分优秀的解决方案或非常糟糕的解决方案，而且分析了问题产生的根源，会使人有一种醍醐灌顶的感觉，豁然开朗。
《编写高质量代码：改善Python程序的91个建议》针对每个问题所选择的应用场景都非常典型，给出的建议也都与实践紧密结合。书中的每一条建议都可能在你的下一行代码、下一个应用或下一个项目中显露锋芒。建议你将本书搁置在手边，随时查阅，相信这么做一定能使你的学习和开发工作事半功倍。|,机械工业出版社,59.00元
流畅的Python,[巴西] Luciano Ramalho,|【技术大咖推荐】
“很荣幸担任这本优秀图书的技术审校。这本书能帮助很多中级Python程序员掌握这门语言，我也从中学到了相当多的知识！”——Alex Martelli，Python软件基金会成员
“对于想要扩充知识的中级和高级Python程序员来说，这本书是充满了实用编程技巧的宝藏。”——Daniel Greenfeld和Audrey Roy Greenfeld，Two Scoops of Django作者
【本书特色】
本书由奋战在Python开发一线近20年的Luciano Ramalho执笔，Victor Stinner、Alex Martelli等Python大咖担纲技术审稿人，从语言设计层面剖析编程细节，兼顾Python 3和Python 2，告诉你Python中不亲自动手实践就无法理解的语言陷阱成因和解决之道，教你写出风格地道的Python代码。
●	Python数据模型：理解为什么特殊方法是对象行为一致的关键。
●	数据结构：充分利用内置类型，理解Unicode文本和字节二象性。
●	把函数视作对象：把Python函数视作一等对象，并了解这一点对流行的设计模式的影响。
●	面向对象习惯用法：通过构建类学习引用、可变性、接口、运算符重载和多重继承。
●	控制流程：学习使用上下文管理器、生成器、协程，以及通过concurrent.futures和asyncio包实现的并发。
●	元编程：理解特性、描述符、类装饰器和元类的工作原理。
【主要内容】
本书致力于帮助Python开发人员挖掘这门语言及相关程序库的优秀特性，避免重复劳动，同时写出简洁、流畅、易读、易维护，并且具有地道Python风格的代码。本书尤其深入探讨了Python语言的高级用法，涵盖数据结构、Python风格的对象、并行与并发，以及元编程等不同的方面。
本书适合中高级Python软件开发人员阅读参考。
【译者简介】
安道
专注于现代计算机技术的自由翻译，译有《Flask Web 开发》《Python 网络编程攻略》《Ruby on Rails 教程》等书。
个人网站：http:\/\/about.ac\/。
吴珂
现为Airbnb公司软件工程师，所在团队主要负责开发和维护各类可伸缩、高性能服务，并在Airbnb内推广面向服务的系统架构。在分布式系统、云存储服务和跨平台SDK开发，以及大规模数据处理等方面有多年经验。|,人民邮电出版社,139元
Python计算与编程实践,|（美）Mark Guzdial,（美）Barbara Ericson|,|计算机程序设计课程往往是枯燥乏味的，而本书根据教育理论，开发了一种新的教学方法，介绍如何通过多媒体编程来学习计算机程序设计，将趣味性和实用性融于枯燥的编程课程的教学当中。本书方法独特新颖，实例通俗易懂，可帮助读者快速入门并深入掌握编程技能，是一本理论联系实际的程序设计教程。
本书使用的编程语言是Python，这是因为Python强大实用（比如网站开发）、易于入门，计算机科学专业和非专业人士都可以学习。本书以Python数字多媒体编程为主线，从图像、声音、文本和电影这些学生已经熟知的内容开始，讲解它们的处理方法，其中穿插介绍计算机科学与程序设计的基础知识。在讲解知识点的时候也独具匠心，先介绍容易理解的基本概念，如赋值、顺序操作、迭代、条件式、函数定义等，逐步涉及抽象内容，如算法复杂度、程序效率、计算机组成、层次式分解、递归、面向对象等。本书还提供了大量例题和习题，方便教学。|,机械工业出版社,69.00元
Learning Python,Mark Lutz,|Amazon.com Review
The authors of Learning Python show you enough essentials of the Python scripting language to enable you to begin solving problems right away, then reveal more powerful aspects of the language one at a time. This approach is sure to appeal to programmers and system administrators who have urgent problems and a preference for learning by semi-guided experimentation.
First off, Learning Python shows the relationships among Python scripts and their interpreter (in a mostly platform-neutral way). Then, the authors address the mechanics of the language itself, providing illustrations of how Python conceives of numbers, strings, and other objects as well as the operators you use to work with them. Dictionaries, lists, tuples, and other data structures specific to Python receive plenty of attention including complete examples.
Authors Mark Lutz and David Ascher build on that fundamental information in their discussions of functions and modules, which evolve into coverage of namespaces, classes, and the object-oriented aspects of Python programming. There's also information on creating graphical user interfaces (GUIs) for Python applications with Tkinter.
In addition to its careful expository prose, Learning Python includes exercises that both test your Python skills and help reveal more elusive truths about the language. --This text refers to an out of print or unavailable edition of this title.
Review
As a book for programmers who want to learn Python, it does a very good job. The coverage is informative and well order; making it easy to find what you're looking for. Overall, if you do some work with Python, you will benefit from owning this book. " - Sam Smith, news@UK, March "This book is a good example of Python culture, in the clarity of its text as much as in the quality of its code. Anyhone working their way through it will have a solid foundation upon which to explore Python's potential. Highly recommended." - Ivan Uemilianin, CVu, October 2004 --This text refers to the Paperback edition.|,O'Reilly Media,USD 54.99
Think Python,Allen B. Downey,|Think Python is an introduction to Python programming for students with no programming experience. It starts with the most basic concepts of programming, and is carefully designed to define all terms when they are first used and to develop each new concept in a logical progression. Larger pieces, like recursion and object-oriented programming are divided into a sequence of smaller steps and introduced over the course of several chapters.|,O'Reilly Media,GBP 29.99
Flask Web开发：基于Python的Web应用开发实战,[美] Miguel Grinberg,|本书不仅适合初级Web开发人员学习阅读，更是Python程序员用来学习高级Web开发技术的优秀参考书。
•	学习Flask应用的基本结构，编写示例应用；
•	使用必备的组件，包括模板、数据库、Web表单和电子邮件支持；
•	使用包和模块构建可伸缩的大型应用；
•	实现用户认证、角色和个人资料；
•	在博客网站中重用模板、分页显示列表以及使用富文本；
•	使用基于Flask的REST式API，在智能手机、平板电脑和其他第三方客户端上实现可用功能；
•	学习运行单元测试以及提升性能；
•	将Web应用部署到生产服务器。|,人民邮电出版社,59.00元
Python for Data Analysis,Wes McKinney,|Finding great data analysts is difficult. Despite the explosive growth of data in industries ranging from manufacturing and retail to high technology, finance, and healthcare, learning and accessing data analysis tools has remained a challenge. This pragmatic guide will help train you in one of the most important tools in the field - Python. Filled with practical case studies, Python for Data Analysis demonstrates the nuts and bolts of manipulating, processing, cleaning, and crunching data with Python. It also serves as a modern introduction to scientific computing in Python for data-intensive applications. Learn about the growing field of data analysis from an expert in the community. Learn everything you need to start doing real data analysis work with Python Get the most complete instruction on the basics of the "modern scientific Python platform" Learn from an insider who builds tools for the scientific stack Get an excellent introduction for novices and a wealth of advanced methods for experienced analysts|,O'Reilly Media,USD 39.99
Data Science from Scratch,Joel Grus,|Data science libraries, frameworks, modules, and toolkits are great for doing data science, but they’re also a good way to dive into the discipline without actually understanding data science. In this book, you’ll learn how many of the most fundamental data science tools and algorithms work by implementing them from scratch.
If you have an aptitude for mathematics and some programming skills, author Joel Grus will help you get comfortable with the math and statistics at the core of data science, and with hacking skills you need to get started as a data scientist. Today’s messy glut of data holds answers to questions no one’s even thought to ask. This book provides you with the know-how to dig those answers out.
Get a crash course in Python
Learn the basics of linear algebra, statistics, and probability—and understand how and when they're used in data science
Collect, explore, clean, munge, and manipulate data
Dive into the fundamentals of machine learning
Implement models such as k-nearest Neighbors, Naive Bayes, linear and logistic regression, decision trees, neural networks, and clustering
Explore recommender systems, natural language processing, network analysis, MapReduce, and databases|,O'Reilly Media,USD 39.99
Learn Python the Hard Way,Zed A. Shaw,|Master Python and become a programmer-even if you never thought you could! This breakthrough book and CD can help practically anyone get started in programming. It's called "The Hard Way," but it's really quite simple. What's "hard" is this: it requires discipline, practice, and persistence. Zed A. Shaw teaches the Python programming language through a series of 52 brilliantly-crafted exercises-all formatted consistently, and most no longer than two pages (including "extra credit"). Just read each exercise, type in its sample code precisely (no copy-and-paste!), and make the programs run. As you read, type, fix your mistakes, and watch the results, you'll learn how software works, how programming works, what good programs look like, and how to read, write, and see code. You'll discover how to spot crucial differences that fundamentally affect program behavior, and you'll learn everything you need to know about Python logic, input\/output, variables, and functions. Above all, you'll learn the attention to detail that is indispensable to successful programming (and so much else in life). At first, yes, it can be difficult. But it gets easier. And Shaw offers plenty of extra guidance and insight through 5+ full hours of teaching video on the accompanying CD. As Shaw's thousands of online readers and fans will attest, the moment will come when you just "get it"-and that moment feels great. Nothing important comes without discipline, practice, and persistence. But, with Learn Python the Hard Way, readers who bring those qualities to programming will master it-and they will reap the rewards, both personally and in their careers.|,Addison-Wesley Professional,USD 39.99
Gray Hat Python,Justin Seitz,黑帽黑客和白帽黑客综合性Python读物。Grey Hat Python,No Starch Press,USD 39.95
像计算机科学家一样思考Python,(美)Allen B.Downey,|《像计算机科学家一样思考python》按照培养读者像计算机科学家一样的思维方式的思路来教授python语言编程。全书贯穿的主体是如何思考、设计、开发的方法，而具体的编程语言，只是提供一个具体场景方便介绍的媒介。《像计算机科学家一样思考python》并不是一本介绍语言的书，而是一本介绍编程思想的书。和其他编程设计语言书籍不同，它不拘泥于语言细节，而是尝试从初学者的角度出发，用生动的示例和丰富的练习来引导读者渐入佳境。
作者从最基本的编程概念开始讲起，包括语言的语法和语义，而且每个编程概念都有清晰的定义，引领读者循序渐进地学习变量、表达式、语句、函数和数据结构。此外，书中还探讨了如何处理文件和数据库，如何理解对象、方法和面向对象编程，如何使用调试技巧来修正语法、运行时和语义错误。每一章都配有术语表和练习题，方便读者巩固所学的知识和技巧。此外，每一章都抽出一节来讲解如何调试程序。作者针对每章中所专注的语言特性，或者相关的开发问题，总结了调试的方方面面。可以说这是一种非常有益的创新，让初学编程的读者少走很多弯路。
全书共19章和3个附录，详细介绍了python语言编程的方方面面。《像计算机科学家一样思考python》是一本实用的学习指南，适合没有python编程经验的程序员阅读，也适合高中或大学的学生、python爱好者及需要了解编程基础的人阅读。对于第一次接触程序设计的人来说，是一本不可多得的佳作。|,人民邮电出版社,49
Head First Programming,|David Griffiths,Paul Barry|,|Looking for a reliable way to learn how to program on your own, without being overwhelmed by confusing concepts? "Head First Programming" introduces the core concepts of writing computer programs - variables, decisions, loops, functions, and objects - which apply regardless of the programming language. This book offers concrete examples and exercises in the dynamic and versatile Python language to demonstrate and reinforce these concepts. You can learn the basic tools to start writing the programs that interest you, and get a better understanding of what software can (and cannot) do. When you're finished, you'll have the necessary foundation to learn any programming language or tackle any software project you choose. With a focus on programming concepts, this book teaches you how to: understand the core features of all programming languages, including variables, statements, decisions, loops, expressions, and operators; reuse code with functions; use library code to save time and effort; select the best data structure to manage complex data; write programs that talk to the Web; share your data with other programs; and, write programs that test themselves and help you avoid embarrassing coding errors. We think your time is too valuable to waste struggling with new concepts. Using the latest research in cognitive science and learning theory to craft a multi-sensory learning experience, "Head First Programming" uses a visually rich format designed for the way your brain works, not a text-heavy approach that puts you to sleep.|,O'Reilly Media,USD 49.99
Python自然语言处理,|(英)伯德,(英)克莱因,(美)洛普|,|《Python自然语言处理(影印版)》提供了非常易学的自然语言处理入门介绍，该领域涵盖从文本和电子邮件预测过滤，到自动总结和翻译等多种语言处理技术。在《Python自然语言处理(影印版)》中，你将学会编写Python程序处理大量非结构化文本。你还将通过使用综合语言数据结构访问含有丰富注释的数据集，理解用于分析书面通信内容和结构的主要算法。
《Python自然语言处理》准备了充足的示例和练习，可以帮助你：
从非结构化文本中抽取信息，甚至猜测主题或识别“命名实体”；
分析文本语言结构，包括解析和语义分析；
访问流行的语言学数据库，包括WordNet和树库(treebank)；
从多种语言学和人工智能领域中提取的整合技巧。
《Python自然语言处理(影印版)》将帮助你学习运用Python编程语言和自然语言工具包(NLTK)获得实用的自然语言处理技能。如果对于开发Web应用、分析多语言新闻源或记录濒危语言感兴趣——即便只是想从程序员视角观察人类语言如何运作，你将发现《Python自然语言处理》是一本令人着迷且极为有用的好书。|,东南大学出版社,64.00元
学习PYTHON 第三版(英文影印版),(美国)(Lutz.M.)卢茨,|Python是一种理想的独立程序和脚本程序语言，具有可移植、强大和易用的特点。无论您是初学程序设计还是初学Python，都能通过《学习 Python 第三版》快速而高效地掌握Python核心语言的基础。通读《学习Python 第三版》，您可以获得足够多的知识，能够学习将Python用于您所选择的任何应用领域。.
《学习Python（第三版）》基于作者Mark Lutz在过去10年间讲授培训课程所使用的资料。除了大量的注解插图和每章总结外，作者还为每章加入了独特的一节，通过实际练习和复习提问的方式，让您在学习过程中练习新的技能，测验对概念的理解程度。
类型和运算——深入Python内置对象类型：数值、列表、字典及其他。
语句和语法——用来创建和处理对象的Python代码以及Python通用语法模型。
函数——Python的基本结构化和代码重用工具。..
模块——将语句、函数和其他工具组织为更大的组件。
类和面向对象编程——可选的Python面向对象程序设计工具，用于定制和重用结构化代码。
异常和工具——处理语句和模块异常，并介绍编写较大型程序所使用的开发工具。
有关即将发布的Python 3.0的一些讨论。
《学习Python 第三版》为您理解Python语言提供了完整而又深入的介绍，帮助您领会在以后的工作中会遇到的应用级Python实例。如果您准备好探索Google和 YouTube究竟从Python中发现了什么，那么《学习Python 第三版》就是一个最好的开始。|,东南大学出版社,88.00元
Python Cookbook,|Alex Martelli,Anna Ravenscroft,David Ascher|,|Portable, powerful, and a breeze to use, Python is the popular open source object-oriented programming language used for both standalone programs and scripting applications.  It is now being used by an increasing number of major organizations, including NASA and Google. Updated for Python 2.4, The Python Cookbook, 2nd Edition offers a wealth of useful code for all Python programmers, not just advanced practitioners.  Like its predecessor, the new edition provides solutions to problems that Python programmers face everyday. It now includes over 200 recipes that range from simple tasks, such as working with dictionaries and list comprehensions, to complex tasks, such as monitoring a network and building a templating system. This revised version also includes new chapters on topics such as time, money, and metaprogramming. Here's a list of additional topics covered:  * Manipulating text * Searching and sorting * Working with files and the filesystem * Object-oriented programming * Dealing with threads and processes * System administration * Interacting with databases * Creating user interfaces * Network and web programming * Processing XML * Distributed programming * Debugging and testing Another advantage of The Python Cookbook, 2nd Edition is its trio of authors--three well-known Python programming experts, who are highly visible on email lists and in newsgroups, and speak often at Python conferences.  With scores of practical examples and pertinent background information, The Python Cookbook, 2nd Edition is the one source you need if you're looking to build efficient, flexible, scalable, and well-integrated systems.|,O'Reilly Media,USD 49.95
Python编程快速上手,斯维加特 (Al Sweigart),|如今，人们面临的大多数任务都可以通过编写计算机软件来完成。Python是一种解释型、面向对象、动态数据类型的高级程序设计语言。通过Python编程，我们能够解决现实生活中的很多任务。
本书是一本面向实践的Python编程实用指南。本书的目的，不仅是介绍Python语言的基础知识，而且还通过项目实践教会读者如何应用这些知识和技能。本书的首部分介绍了基本Python编程概念，第二部分介绍了一些不同的任务，通过编写Python程序，可以让计算机自动完成它们。第二部分的每一章都有一些项目程序，供读者学习。每章的末尾还提供了一些习题和深入的实践项目，帮助读者巩固所学的知识。附录部分提供了所有习题的解答。
本书适合任何想要通过Python学习编程的读者，尤其适合缺乏编程基础的初学者。通过阅读本书，读者将能利用强大的编程语言和工具，并且会体会到Python编程的快乐。|,人民邮电出版社,CNY 69.00
Fluent Python,Luciano Ramalho,|Learn how to write idiomatic, effective Python code by leveraging its best features. Python's simplicity quickly lets you become productive with it, but this often means you aren’t using everything the language has to offer. By taking you through Python’s key language features and libraries, this practical book shows you how to make your code shorter, faster, and more readable all at the same time—what experts consider Pythonic.
Many programmers who learn Python basics fall into the trap of reinventing the wheel because of past experience in other languages, and try to bend the language to patterns that don't really apply to it. Author Luciano Ramalho, a Python Software Foundation member and Python programmer for 15 years, helps you drop your accent from another language so you can code Python fluently.
•Learn practical applications of generators for database processing
•Rethink some design patterns in a Python context
•Examine attribute descriptors and when to use them: the key to ORMs
•Explore Pythonic objects: protocols versus interfaces, abstract base classes and multiple inheritance|,O'Reilly Media,USD 39.99
Python金融大数据分析,[德] 伊夫·希尔皮斯科,|唯一一本详细讲解使用Python分析处理金融大数据的专业图书；金融应用开发领域从业人员必读。
Python凭借其简单、易读、可扩展性以及拥有巨大而活跃的科学计算社区，在需要分析、处理大量数据的金融行业得到了广泛而迅速的应用，并且成为该行业开发核心应用的首选编程语言。《Python金融大数据分析》提供了使用Python进行数据分析，以及开发相关应用程序的技巧和工具。
《Python金融大数据分析》总计分为3部分，共19章，第1部分介绍了Python在金融学中的应用，其内容涵盖了Python用于金融行业的原因、Python的基础架构和工具，以及Python在计量金融学中的一些具体入门实例；第2部分介绍了金融分析和应用程序开发中最重要的Python库、技术和方法，其内容涵盖了Python的数据类型和结构、用matplotlib进行数据可视化、金融时间序列数据处理、高性能输入\/输出操作、高性能的Python技术和库、金融学中需要的多种数学工具、随机数生成和随机过程模拟、Python统计学应用、Python和Excel的集成、Python面向对象编程和GUI的开发、Python与Web技术的集成，以及基于Web应用和Web服务的开发；第3部分关注的是蒙特卡洛模拟期权与衍生品定价实际应用的开发工作，其内容涵盖了估值框架的介绍、金融模型的模拟、衍生品的估值、投资组合的估值、波动率期权等知识。
《Python金融大数据分析》适合对使用Python进行大数据分析、处理感兴趣的金融行业开发人员阅读。|,人民邮电出版社,CNY 99.00
Python参考手册（第4版）,David M.Beazley,|本书是权威的Python语言参考指南，内容涉及核心Python语言和Python库的最重要部分。本书内容简洁扼要、可读性强，书中还包括了一些没有在Python官方文档或其他资料中出现过的一些高级的主题。
这一版在内容上进行了全面更新，介绍了Python 2.6和Python 3新引入的编程语言特性和库模块，同时还分析了Python程序员面临的如下难题：是应继续使用现有的Python代码，还是应制定计划将其移植到Python 3？|,人民邮电出版社,89.00元
编写高质量代码：改善Python程序的91个建议,|张颖,赖勇浩|,|在通往“Python技术殿堂”的路上，本书将为你编写健壮、优雅、高质量的Python代码提供切实帮助！内容全部由Python编码的最佳实践组成，从基本原则、惯用法、语法、库、设计模式、内部机制、开发工具和性能优化8个方面深入探讨了编写高质量Python代码的技巧与禁忌，一共总结出91条宝贵的建议。每条建议对应Python程序员可能会遇到的一个问题。本书不仅以建议的方式从正反两方面给出了被实践证明为十分优秀的解决方案或非常糟糕的解决方案，而且分析了问题产生的根源，会使人有一种醍醐灌顶的感觉，豁然开朗。
《编写高质量代码：改善Python程序的91个建议》针对每个问题所选择的应用场景都非常典型，给出的建议也都与实践紧密结合。书中的每一条建议都可能在你的下一行代码、下一个应用或下一个项目中显露锋芒。建议你将本书搁置在手边，随时查阅，相信这么做一定能使你的学习和开发工作事半功倍。|,机械工业出版社,59.00元
流畅的Python,[巴西] Luciano Ramalho,|【技术大咖推荐】
“很荣幸担任这本优秀图书的技术审校。这本书能帮助很多中级Python程序员掌握这门语言，我也从中学到了相当多的知识！”——Alex Martelli，Python软件基金会成员
“对于想要扩充知识的中级和高级Python程序员来说，这本书是充满了实用编程技巧的宝藏。”——Daniel Greenfeld和Audrey Roy Greenfeld，Two Scoops of Django作者
【本书特色】
本书由奋战在Python开发一线近20年的Luciano Ramalho执笔，Victor Stinner、Alex Martelli等Python大咖担纲技术审稿人，从语言设计层面剖析编程细节，兼顾Python 3和Python 2，告诉你Python中不亲自动手实践就无法理解的语言陷阱成因和解决之道，教你写出风格地道的Python代码。
●	Python数据模型：理解为什么特殊方法是对象行为一致的关键。
●	数据结构：充分利用内置类型，理解Unicode文本和字节二象性。
●	把函数视作对象：把Python函数视作一等对象，并了解这一点对流行的设计模式的影响。
●	面向对象习惯用法：通过构建类学习引用、可变性、接口、运算符重载和多重继承。
●	控制流程：学习使用上下文管理器、生成器、协程，以及通过concurrent.futures和asyncio包实现的并发。
●	元编程：理解特性、描述符、类装饰器和元类的工作原理。
【主要内容】
本书致力于帮助Python开发人员挖掘这门语言及相关程序库的优秀特性，避免重复劳动，同时写出简洁、流畅、易读、易维护，并且具有地道Python风格的代码。本书尤其深入探讨了Python语言的高级用法，涵盖数据结构、Python风格的对象、并行与并发，以及元编程等不同的方面。
本书适合中高级Python软件开发人员阅读参考。
【译者简介】
安道
专注于现代计算机技术的自由翻译，译有《Flask Web 开发》《Python 网络编程攻略》《Ruby on Rails 教程》等书。
个人网站：http:\/\/about.ac\/。
吴珂
现为Airbnb公司软件工程师，所在团队主要负责开发和维护各类可伸缩、高性能服务，并在Airbnb内推广面向服务的系统架构。在分布式系统、云存储服务和跨平台SDK开发，以及大规模数据处理等方面有多年经验。|,人民邮电出版社,139元
Python计算与编程实践,|（美）Mark Guzdial,（美）Barbara Ericson|,|计算机程序设计课程往往是枯燥乏味的，而本书根据教育理论，开发了一种新的教学方法，介绍如何通过多媒体编程来学习计算机程序设计，将趣味性和实用性融于枯燥的编程课程的教学当中。本书方法独特新颖，实例通俗易懂，可帮助读者快速入门并深入掌握编程技能，是一本理论联系实际的程序设计教程。
本书使用的编程语言是Python，这是因为Python强大实用（比如网站开发）、易于入门，计算机科学专业和非专业人士都可以学习。本书以Python数字多媒体编程为主线，从图像、声音、文本和电影这些学生已经熟知的内容开始，讲解它们的处理方法，其中穿插介绍计算机科学与程序设计的基础知识。在讲解知识点的时候也独具匠心，先介绍容易理解的基本概念，如赋值、顺序操作、迭代、条件式、函数定义等，逐步涉及抽象内容，如算法复杂度、程序效率、计算机组成、层次式分解、递归、面向对象等。本书还提供了大量例题和习题，方便教学。|,机械工业出版社,69.00元
Learning Python,Mark Lutz,|Amazon.com Review
The authors of Learning Python show you enough essentials of the Python scripting language to enable you to begin solving problems right away, then reveal more powerful aspects of the language one at a time. This approach is sure to appeal to programmers and system administrators who have urgent problems and a preference for learning by semi-guided experimentation.
First off, Learning Python shows the relationships among Python scripts and their interpreter (in a mostly platform-neutral way). Then, the authors address the mechanics of the language itself, providing illustrations of how Python conceives of numbers, strings, and other objects as well as the operators you use to work with them. Dictionaries, lists, tuples, and other data structures specific to Python receive plenty of attention including complete examples.
Authors Mark Lutz and David Ascher build on that fundamental information in their discussions of functions and modules, which evolve into coverage of namespaces, classes, and the object-oriented aspects of Python programming. There's also information on creating graphical user interfaces (GUIs) for Python applications with Tkinter.
In addition to its careful expository prose, Learning Python includes exercises that both test your Python skills and help reveal more elusive truths about the language. --This text refers to an out of print or unavailable edition of this title.
Review
As a book for programmers who want to learn Python, it does a very good job. The coverage is informative and well order; making it easy to find what you're looking for. Overall, if you do some work with Python, you will benefit from owning this book. " - Sam Smith, news@UK, March "This book is a good example of Python culture, in the clarity of its text as much as in the quality of its code. Anyhone working their way through it will have a solid foundation upon which to explore Python's potential. Highly recommended." - Ivan Uemilianin, CVu, October 2004 --This text refers to the Paperback edition.|,O'Reilly Media,USD 54.99
Think Python,Allen B. Downey,|Think Python is an introduction to Python programming for students with no programming experience. It starts with the most basic concepts of programming, and is carefully designed to define all terms when they are first used and to develop each new concept in a logical progression. Larger pieces, like recursion and object-oriented programming are divided into a sequence of smaller steps and introduced over the course of several chapters.|,O'Reilly Media,GBP 29.99
|Learn Python The Hard Way, 1st Edition|,Zed Shaw,|Learn Python The Hard Way is a book I wrote to teach programming to people who do not know how to code. It assumes you are probably a power user of your computer, and then takes you from nothing to programming simple games. After reading my book you should be ready for many of the other programming books out there.|,Lulu.com,$29.99
Python for Data Analysis,Wes McKinney,|Finding great data analysts is difficult. Despite the explosive growth of data in industries ranging from manufacturing and retail to high technology, finance, and healthcare, learning and accessing data analysis tools has remained a challenge. This pragmatic guide will help train you in one of the most important tools in the field - Python. Filled with practical case studies, Python for Data Analysis demonstrates the nuts and bolts of manipulating, processing, cleaning, and crunching data with Python. It also serves as a modern introduction to scientific computing in Python for data-intensive applications. Learn about the growing field of data analysis from an expert in the community. Learn everything you need to start doing real data analysis work with Python Get the most complete instruction on the basics of the "modern scientific Python platform" Learn from an insider who builds tools for the scientific stack Get an excellent introduction for novices and a wealth of advanced methods for experienced analysts|,O'Reilly Media,USD 39.99
Data Science from Scratch,Joel Grus,|Data science libraries, frameworks, modules, and toolkits are great for doing data science, but they’re also a good way to dive into the discipline without actually understanding data science. In this book, you’ll learn how many of the most fundamental data science tools and algorithms work by implementing them from scratch.
If you have an aptitude for mathematics and some programming skills, author Joel Grus will help you get comfortable with the math and statistics at the core of data science, and with hacking skills you need to get started as a data scientist. Today’s messy glut of data holds answers to questions no one’s even thought to ask. This book provides you with the know-how to dig those answers out.
Get a crash course in Python
Learn the basics of linear algebra, statistics, and probability—and understand how and when they're used in data science
Collect, explore, clean, munge, and manipulate data
Dive into the fundamentals of machine learning
Implement models such as k-nearest Neighbors, Naive Bayes, linear and logistic regression, decision trees, neural networks, and clustering
Explore recommender systems, natural language processing, network analysis, MapReduce, and databases|,O'Reilly Media,USD 39.99
Learn Python the Hard Way,Zed A. Shaw,|Master Python and become a programmer-even if you never thought you could! This breakthrough book and CD can help practically anyone get started in programming. It's called "The Hard Way," but it's really quite simple. What's "hard" is this: it requires discipline, practice, and persistence. Zed A. Shaw teaches the Python programming language through a series of 52 brilliantly-crafted exercises-all formatted consistently, and most no longer than two pages (including "extra credit"). Just read each exercise, type in its sample code precisely (no copy-and-paste!), and make the programs run. As you read, type, fix your mistakes, and watch the results, you'll learn how software works, how programming works, what good programs look like, and how to read, write, and see code. You'll discover how to spot crucial differences that fundamentally affect program behavior, and you'll learn everything you need to know about Python logic, input\/output, variables, and functions. Above all, you'll learn the attention to detail that is indispensable to successful programming (and so much else in life). At first, yes, it can be difficult. But it gets easier. And Shaw offers plenty of extra guidance and insight through 5+ full hours of teaching video on the accompanying CD. As Shaw's thousands of online readers and fans will attest, the moment will come when you just "get it"-and that moment feels great. Nothing important comes without discipline, practice, and persistence. But, with Learn Python the Hard Way, readers who bring those qualities to programming will master it-and they will reap the rewards, both personally and in their careers.|,Addison-Wesley Professional,USD 39.99
Gray Hat Python,Justin Seitz,黑帽黑客和白帽黑客综合性Python读物。Grey Hat Python,No Starch Press,USD 39.95
像计算机科学家一样思考Python,(美)Allen B.Downey,|《像计算机科学家一样思考python》按照培养读者像计算机科学家一样的思维方式的思路来教授python语言编程。全书贯穿的主体是如何思考、设计、开发的方法，而具体的编程语言，只是提供一个具体场景方便介绍的媒介。《像计算机科学家一样思考python》并不是一本介绍语言的书，而是一本介绍编程思想的书。和其他编程设计语言书籍不同，它不拘泥于语言细节，而是尝试从初学者的角度出发，用生动的示例和丰富的练习来引导读者渐入佳境。
作者从最基本的编程概念开始讲起，包括语言的语法和语义，而且每个编程概念都有清晰的定义，引领读者循序渐进地学习变量、表达式、语句、函数和数据结构。此外，书中还探讨了如何处理文件和数据库，如何理解对象、方法和面向对象编程，如何使用调试技巧来修正语法、运行时和语义错误。每一章都配有术语表和练习题，方便读者巩固所学的知识和技巧。此外，每一章都抽出一节来讲解如何调试程序。作者针对每章中所专注的语言特性，或者相关的开发问题，总结了调试的方方面面。可以说这是一种非常有益的创新，让初学编程的读者少走很多弯路。
全书共19章和3个附录，详细介绍了python语言编程的方方面面。《像计算机科学家一样思考python》是一本实用的学习指南，适合没有python编程经验的程序员阅读，也适合高中或大学的学生、python爱好者及需要了解编程基础的人阅读。对于第一次接触程序设计的人来说，是一本不可多得的佳作。|,人民邮电出版社,49
Head First Programming,|David Griffiths,Paul Barry|,|Looking for a reliable way to learn how to program on your own, without being overwhelmed by confusing concepts? "Head First Programming" introduces the core concepts of writing computer programs - variables, decisions, loops, functions, and objects - which apply regardless of the programming language. This book offers concrete examples and exercises in the dynamic and versatile Python language to demonstrate and reinforce these concepts. You can learn the basic tools to start writing the programs that interest you, and get a better understanding of what software can (and cannot) do. When you're finished, you'll have the necessary foundation to learn any programming language or tackle any software project you choose. With a focus on programming concepts, this book teaches you how to: understand the core features of all programming languages, including variables, statements, decisions, loops, expressions, and operators; reuse code with functions; use library code to save time and effort; select the best data structure to manage complex data; write programs that talk to the Web; share your data with other programs; and, write programs that test themselves and help you avoid embarrassing coding errors. We think your time is too valuable to waste struggling with new concepts. Using the latest research in cognitive science and learning theory to craft a multi-sensory learning experience, "Head First Programming" uses a visually rich format designed for the way your brain works, not a text-heavy approach that puts you to sleep.|,O'Reilly Media,USD 49.99
Python自然语言处理,|(英)伯德,(英)克莱因,(美)洛普|,|《Python自然语言处理(影印版)》提供了非常易学的自然语言处理入门介绍，该领域涵盖从文本和电子邮件预测过滤，到自动总结和翻译等多种语言处理技术。在《Python自然语言处理(影印版)》中，你将学会编写Python程序处理大量非结构化文本。你还将通过使用综合语言数据结构访问含有丰富注释的数据集，理解用于分析书面通信内容和结构的主要算法。
《Python自然语言处理》准备了充足的示例和练习，可以帮助你：
从非结构化文本中抽取信息，甚至猜测主题或识别“命名实体”；
分析文本语言结构，包括解析和语义分析；
访问流行的语言学数据库，包括WordNet和树库(treebank)；
从多种语言学和人工智能领域中提取的整合技巧。
《Python自然语言处理(影印版)》将帮助你学习运用Python编程语言和自然语言工具包(NLTK)获得实用的自然语言处理技能。如果对于开发Web应用、分析多语言新闻源或记录濒危语言感兴趣——即便只是想从程序员视角观察人类语言如何运作，你将发现《Python自然语言处理》是一本令人着迷且极为有用的好书。|,东南大学出版社,64.00元
学习PYTHON 第三版(英文影印版),(美国)(Lutz.M.)卢茨,|Python是一种理想的独立程序和脚本程序语言，具有可移植、强大和易用的特点。无论您是初学程序设计还是初学Python，都能通过《学习 Python 第三版》快速而高效地掌握Python核心语言的基础。通读《学习Python 第三版》，您可以获得足够多的知识，能够学习将Python用于您所选择的任何应用领域。.
《学习Python（第三版）》基于作者Mark Lutz在过去10年间讲授培训课程所使用的资料。除了大量的注解插图和每章总结外，作者还为每章加入了独特的一节，通过实际练习和复习提问的方式，让您在学习过程中练习新的技能，测验对概念的理解程度。
类型和运算——深入Python内置对象类型：数值、列表、字典及其他。
语句和语法——用来创建和处理对象的Python代码以及Python通用语法模型。
函数——Python的基本结构化和代码重用工具。..
模块——将语句、函数和其他工具组织为更大的组件。
类和面向对象编程——可选的Python面向对象程序设计工具，用于定制和重用结构化代码。
异常和工具——处理语句和模块异常，并介绍编写较大型程序所使用的开发工具。
有关即将发布的Python 3.0的一些讨论。
《学习Python 第三版》为您理解Python语言提供了完整而又深入的介绍，帮助您领会在以后的工作中会遇到的应用级Python实例。如果您准备好探索Google和 YouTube究竟从Python中发现了什么，那么《学习Python 第三版》就是一个最好的开始。|,东南大学出版社,88.00元
Python Cookbook,|Alex Martelli,Anna Ravenscroft,David Ascher|,|Portable, powerful, and a breeze to use, Python is the popular open source object-oriented programming language used for both standalone programs and scripting applications.  It is now being used by an increasing number of major organizations, including NASA and Google. Updated for Python 2.4, The Python Cookbook, 2nd Edition offers a wealth of useful code for all Python programmers, not just advanced practitioners.  Like its predecessor, the new edition provides solutions to problems that Python programmers face everyday. It now includes over 200 recipes that range from simple tasks, such as working with dictionaries and list comprehensions, to complex tasks, such as monitoring a network and building a templating system. This revised version also includes new chapters on topics such as time, money, and metaprogramming. Here's a list of additional topics covered:  * Manipulating text * Searching and sorting * Working with files and the filesystem * Object-oriented programming * Dealing with threads and processes * System administration * Interacting with databases * Creating user interfaces * Network and web programming * Processing XML * Distributed programming * Debugging and testing Another advantage of The Python Cookbook, 2nd Edition is its trio of authors--three well-known Python programming experts, who are highly visible on email lists and in newsgroups, and speak often at Python conferences.  With scores of practical examples and pertinent background information, The Python Cookbook, 2nd Edition is the one source you need if you're looking to build efficient, flexible, scalable, and well-integrated systems.|,O'Reilly Media,USD 49.95
Python编程快速上手,斯维加特 (Al Sweigart),|如今，人们面临的大多数任务都可以通过编写计算机软件来完成。Python是一种解释型、面向对象、动态数据类型的高级程序设计语言。通过Python编程，我们能够解决现实生活中的很多任务。
本书是一本面向实践的Python编程实用指南。本书的目的，不仅是介绍Python语言的基础知识，而且还通过项目实践教会读者如何应用这些知识和技能。本书的首部分介绍了基本Python编程概念，第二部分介绍了一些不同的任务，通过编写Python程序，可以让计算机自动完成它们。第二部分的每一章都有一些项目程序，供读者学习。每章的末尾还提供了一些习题和深入的实践项目，帮助读者巩固所学的知识。附录部分提供了所有习题的解答。
本书适合任何想要通过Python学习编程的读者，尤其适合缺乏编程基础的初学者。通过阅读本书，读者将能利用强大的编程语言和工具，并且会体会到Python编程的快乐。|,人民邮电出版社,CNY 69.00
Fluent Python,Luciano Ramalho,|Learn how to write idiomatic, effective Python code by leveraging its best features. Python's simplicity quickly lets you become productive with it, but this often means you aren’t using everything the language has to offer. By taking you through Python’s key language features and libraries, this practical book shows you how to make your code shorter, faster, and more readable all at the same time—what experts consider Pythonic.
Many programmers who learn Python basics fall into the trap of reinventing the wheel because of past experience in other languages, and try to bend the language to patterns that don't really apply to it. Author Luciano Ramalho, a Python Software Foundation member and Python programmer for 15 years, helps you drop your accent from another language so you can code Python fluently.
•Learn practical applications of generators for database processing
•Rethink some design patterns in a Python context
•Examine attribute descriptors and when to use them: the key to ORMs
•Explore Pythonic objects: protocols versus interfaces, abstract base classes and multiple inheritance|,O'Reilly Media,USD 39.99
Python金融大数据分析,[德] 伊夫·希尔皮斯科,|唯一一本详细讲解使用Python分析处理金融大数据的专业图书；金融应用开发领域从业人员必读。
Python凭借其简单、易读、可扩展性以及拥有巨大而活跃的科学计算社区，在需要分析、处理大量数据的金融行业得到了广泛而迅速的应用，并且成为该行业开发核心应用的首选编程语言。《Python金融大数据分析》提供了使用Python进行数据分析，以及开发相关应用程序的技巧和工具。
《Python金融大数据分析》总计分为3部分，共19章，第1部分介绍了Python在金融学中的应用，其内容涵盖了Python用于金融行业的原因、Python的基础架构和工具，以及Python在计量金融学中的一些具体入门实例；第2部分介绍了金融分析和应用程序开发中最重要的Python库、技术和方法，其内容涵盖了Python的数据类型和结构、用matplotlib进行数据可视化、金融时间序列数据处理、高性能输入\/输出操作、高性能的Python技术和库、金融学中需要的多种数学工具、随机数生成和随机过程模拟、Python统计学应用、Python和Excel的集成、Python面向对象编程和GUI的开发、Python与Web技术的集成，以及基于Web应用和Web服务的开发；第3部分关注的是蒙特卡洛模拟期权与衍生品定价实际应用的开发工作，其内容涵盖了估值框架的介绍、金融模型的模拟、衍生品的估值、投资组合的估值、波动率期权等知识。
《Python金融大数据分析》适合对使用Python进行大数据分析、处理感兴趣的金融行业开发人员阅读。|,人民邮电出版社,CNY 99.00
Python参考手册（第4版）,David M.Beazley,|本书是权威的Python语言参考指南，内容涉及核心Python语言和Python库的最重要部分。本书内容简洁扼要、可读性强，书中还包括了一些没有在Python官方文档或其他资料中出现过的一些高级的主题。
这一版在内容上进行了全面更新，介绍了Python 2.6和Python 3新引入的编程语言特性和库模块，同时还分析了Python程序员面临的如下难题：是应继续使用现有的Python代码，还是应制定计划将其移植到Python 3？|,人民邮电出版社,89.00元
编写高质量代码：改善Python程序的91个建议,|张颖,赖勇浩|,|在通往“Python技术殿堂”的路上，本书将为你编写健壮、优雅、高质量的Python代码提供切实帮助！内容全部由Python编码的最佳实践组成，从基本原则、惯用法、语法、库、设计模式、内部机制、开发工具和性能优化8个方面深入探讨了编写高质量Python代码的技巧与禁忌，一共总结出91条宝贵的建议。每条建议对应Python程序员可能会遇到的一个问题。本书不仅以建议的方式从正反两方面给出了被实践证明为十分优秀的解决方案或非常糟糕的解决方案，而且分析了问题产生的根源，会使人有一种醍醐灌顶的感觉，豁然开朗。
《编写高质量代码：改善Python程序的91个建议》针对每个问题所选择的应用场景都非常典型，给出的建议也都与实践紧密结合。书中的每一条建议都可能在你的下一行代码、下一个应用或下一个项目中显露锋芒。建议你将本书搁置在手边，随时查阅，相信这么做一定能使你的学习和开发工作事半功倍。|,机械工业出版社,59.00元
流畅的Python,[巴西] Luciano Ramalho,|【技术大咖推荐】
“很荣幸担任这本优秀图书的技术审校。这本书能帮助很多中级Python程序员掌握这门语言，我也从中学到了相当多的知识！”——Alex Martelli，Python软件基金会成员
“对于想要扩充知识的中级和高级Python程序员来说，这本书是充满了实用编程技巧的宝藏。”——Daniel Greenfeld和Audrey Roy Greenfeld，Two Scoops of Django作者
【本书特色】
本书由奋战在Python开发一线近20年的Luciano Ramalho执笔，Victor Stinner、Alex Martelli等Python大咖担纲技术审稿人，从语言设计层面剖析编程细节，兼顾Python 3和Python 2，告诉你Python中不亲自动手实践就无法理解的语言陷阱成因和解决之道，教你写出风格地道的Python代码。
●	Python数据模型：理解为什么特殊方法是对象行为一致的关键。
●	数据结构：充分利用内置类型，理解Unicode文本和字节二象性。
●	把函数视作对象：把Python函数视作一等对象，并了解这一点对流行的设计模式的影响。
●	面向对象习惯用法：通过构建类学习引用、可变性、接口、运算符重载和多重继承。
●	控制流程：学习使用上下文管理器、生成器、协程，以及通过concurrent.futures和asyncio包实现的并发。
●	元编程：理解特性、描述符、类装饰器和元类的工作原理。
【主要内容】
本书致力于帮助Python开发人员挖掘这门语言及相关程序库的优秀特性，避免重复劳动，同时写出简洁、流畅、易读、易维护，并且具有地道Python风格的代码。本书尤其深入探讨了Python语言的高级用法，涵盖数据结构、Python风格的对象、并行与并发，以及元编程等不同的方面。
本书适合中高级Python软件开发人员阅读参考。
【译者简介】
安道
专注于现代计算机技术的自由翻译，译有《Flask Web 开发》《Python 网络编程攻略》《Ruby on Rails 教程》等书。
个人网站：http:\/\/about.ac\/。
吴珂
现为Airbnb公司软件工程师，所在团队主要负责开发和维护各类可伸缩、高性能服务，并在Airbnb内推广面向服务的系统架构。在分布式系统、云存储服务和跨平台SDK开发，以及大规模数据处理等方面有多年经验。|,人民邮电出版社,139元
Python计算与编程实践,|（美）Mark Guzdial,（美）Barbara Ericson|,|计算机程序设计课程往往是枯燥乏味的，而本书根据教育理论，开发了一种新的教学方法，介绍如何通过多媒体编程来学习计算机程序设计，将趣味性和实用性融于枯燥的编程课程的教学当中。本书方法独特新颖，实例通俗易懂，可帮助读者快速入门并深入掌握编程技能，是一本理论联系实际的程序设计教程。
本书使用的编程语言是Python，这是因为Python强大实用（比如网站开发）、易于入门，计算机科学专业和非专业人士都可以学习。本书以Python数字多媒体编程为主线，从图像、声音、文本和电影这些学生已经熟知的内容开始，讲解它们的处理方法，其中穿插介绍计算机科学与程序设计的基础知识。在讲解知识点的时候也独具匠心，先介绍容易理解的基本概念，如赋值、顺序操作、迭代、条件式、函数定义等，逐步涉及抽象内容，如算法复杂度、程序效率、计算机组成、层次式分解、递归、面向对象等。本书还提供了大量例题和习题，方便教学。|,机械工业出版社,69.00元
Learning Python,Mark Lutz,|Amazon.com Review
The authors of Learning Python show you enough essentials of the Python scripting language to enable you to begin solving problems right away, then reveal more powerful aspects of the language one at a time. This approach is sure to appeal to programmers and system administrators who have urgent problems and a preference for learning by semi-guided experimentation.
First off, Learning Python shows the relationships among Python scripts and their interpreter (in a mostly platform-neutral way). Then, the authors address the mechanics of the language itself, providing illustrations of how Python conceives of numbers, strings, and other objects as well as the operators you use to work with them. Dictionaries, lists, tuples, and other data structures specific to Python receive plenty of attention including complete examples.
Authors Mark Lutz and David Ascher build on that fundamental information in their discussions of functions and modules, which evolve into coverage of namespaces, classes, and the object-oriented aspects of Python programming. There's also information on creating graphical user interfaces (GUIs) for Python applications with Tkinter.
In addition to its careful expository prose, Learning Python includes exercises that both test your Python skills and help reveal more elusive truths about the language. --This text refers to an out of print or unavailable edition of this title.
Review
As a book for programmers who want to learn Python, it does a very good job. The coverage is informative and well order; making it easy to find what you're looking for. Overall, if you do some work with Python, you will benefit from owning this book. " - Sam Smith, news@UK, March "This book is a good example of Python culture, in the clarity of its text as much as in the quality of its code. Anyhone working their way through it will have a solid foundation upon which to explore Python's potential. Highly recommended." - Ivan Uemilianin, CVu, October 2004 --This text refers to the Paperback edition.|,O'Reilly Media,USD 54.99
Think Python,Allen B. Downey,|Think Python is an introduction to Python programming for students with no programming experience. It starts with the most basic concepts of programming, and is carefully designed to define all terms when they are first used and to develop each new concept in a logical progression. Larger pieces, like recursion and object-oriented programming are divided into a sequence of smaller steps and introduced over the course of several chapters.|,O'Reilly Media,GBP 29.99
|Learn Python The Hard Way, 1st Edition|,Zed Shaw,|Learn Python The Hard Way is a book I wrote to teach programming to people who do not know how to code. It assumes you are probably a power user of your computer, and then takes you from nothing to programming simple games. After reading my book you should be ready for many of the other programming books out there.|,Lulu.com,$29.99
Selenium 2自动化测试实战,虫师,|《Selenium 2自动化测试实战——基于Python语言》共分 14 章。第 1 章是自动化测试相关基础知识的介绍；第 2 章到第 10 章是《Selenium 2自动化测试实战——基于Python语言》的重点，循 序渐进地介绍了自动化测试所用到的技术；第 11 章通过一个具体的项目综合运用了前面章节所介绍 的技术与技巧；第 12 章到第 14 章选取了当前最热门的技术进行了介绍，旨在扩展测试人员的综合技 术能力。 《Selenium 2自动化测试实战——基于Python语言》的写作目的并不是为了简单地告诉读者如何使用一个自动化测试工具，而是希望读者在学习
《Selenium 2自动化测试实战——基于Python语言》的内容后能够提高综合的技术高度与宽度，从而摆脱简单的手工测试，向高级测试工程师的道路 迈进。|,电子工业出版社,CNY 59.00
Data Science from Scratch,Joel Grus,|Data science libraries, frameworks, modules, and toolkits are great for doing data science, but they’re also a good way to dive into the discipline without actually understanding data science. In this book, you’ll learn how many of the most fundamental data science tools and algorithms work by implementing them from scratch.
If you have an aptitude for mathematics and some programming skills, author Joel Grus will help you get comfortable with the math and statistics at the core of data science, and with hacking skills you need to get started as a data scientist. Today’s messy glut of data holds answers to questions no one’s even thought to ask. This book provides you with the know-how to dig those answers out.
Get a crash course in Python
Learn the basics of linear algebra, statistics, and probability—and understand how and when they're used in data science
Collect, explore, clean, munge, and manipulate data
Dive into the fundamentals of machine learning
Implement models such as k-nearest Neighbors, Naive Bayes, linear and logistic regression, decision trees, neural networks, and clustering
Explore recommender systems, natural language processing, network analysis, MapReduce, and databases|,O'Reilly Media,USD 39.99
Learn Python the Hard Way,Zed A. Shaw,|Master Python and become a programmer-even if you never thought you could! This breakthrough book and CD can help practically anyone get started in programming. It's called "The Hard Way," but it's really quite simple. What's "hard" is this: it requires discipline, practice, and persistence. Zed A. Shaw teaches the Python programming language through a series of 52 brilliantly-crafted exercises-all formatted consistently, and most no longer than two pages (including "extra credit"). Just read each exercise, type in its sample code precisely (no copy-and-paste!), and make the programs run. As you read, type, fix your mistakes, and watch the results, you'll learn how software works, how programming works, what good programs look like, and how to read, write, and see code. You'll discover how to spot crucial differences that fundamentally affect program behavior, and you'll learn everything you need to know about Python logic, input\/output, variables, and functions. Above all, you'll learn the attention to detail that is indispensable to successful programming (and so much else in life). At first, yes, it can be difficult. But it gets easier. And Shaw offers plenty of extra guidance and insight through 5+ full hours of teaching video on the accompanying CD. As Shaw's thousands of online readers and fans will attest, the moment will come when you just "get it"-and that moment feels great. Nothing important comes without discipline, practice, and persistence. But, with Learn Python the Hard Way, readers who bring those qualities to programming will master it-and they will reap the rewards, both personally and in their careers.|,Addison-Wesley Professional,USD 39.99
Gray Hat Python,Justin Seitz,黑帽黑客和白帽黑客综合性Python读物。Grey Hat Python,No Starch Press,USD 39.95
像计算机科学家一样思考Python,(美)Allen B.Downey,|《像计算机科学家一样思考python》按照培养读者像计算机科学家一样的思维方式的思路来教授python语言编程。全书贯穿的主体是如何思考、设计、开发的方法，而具体的编程语言，只是提供一个具体场景方便介绍的媒介。《像计算机科学家一样思考python》并不是一本介绍语言的书，而是一本介绍编程思想的书。和其他编程设计语言书籍不同，它不拘泥于语言细节，而是尝试从初学者的角度出发，用生动的示例和丰富的练习来引导读者渐入佳境。
作者从最基本的编程概念开始讲起，包括语言的语法和语义，而且每个编程概念都有清晰的定义，引领读者循序渐进地学习变量、表达式、语句、函数和数据结构。此外，书中还探讨了如何处理文件和数据库，如何理解对象、方法和面向对象编程，如何使用调试技巧来修正语法、运行时和语义错误。每一章都配有术语表和练习题，方便读者巩固所学的知识和技巧。此外，每一章都抽出一节来讲解如何调试程序。作者针对每章中所专注的语言特性，或者相关的开发问题，总结了调试的方方面面。可以说这是一种非常有益的创新，让初学编程的读者少走很多弯路。
全书共19章和3个附录，详细介绍了python语言编程的方方面面。《像计算机科学家一样思考python》是一本实用的学习指南，适合没有python编程经验的程序员阅读，也适合高中或大学的学生、python爱好者及需要了解编程基础的人阅读。对于第一次接触程序设计的人来说，是一本不可多得的佳作。|,人民邮电出版社,49
Head First Programming,|David Griffiths,Paul Barry|,|Looking for a reliable way to learn how to program on your own, without being overwhelmed by confusing concepts? "Head First Programming" introduces the core concepts of writing computer programs - variables, decisions, loops, functions, and objects - which apply regardless of the programming language. This book offers concrete examples and exercises in the dynamic and versatile Python language to demonstrate and reinforce these concepts. You can learn the basic tools to start writing the programs that interest you, and get a better understanding of what software can (and cannot) do. When you're finished, you'll have the necessary foundation to learn any programming language or tackle any software project you choose. With a focus on programming concepts, this book teaches you how to: understand the core features of all programming languages, including variables, statements, decisions, loops, expressions, and operators; reuse code with functions; use library code to save time and effort; select the best data structure to manage complex data; write programs that talk to the Web; share your data with other programs; and, write programs that test themselves and help you avoid embarrassing coding errors. We think your time is too valuable to waste struggling with new concepts. Using the latest research in cognitive science and learning theory to craft a multi-sensory learning experience, "Head First Programming" uses a visually rich format designed for the way your brain works, not a text-heavy approach that puts you to sleep.|,O'Reilly Media,USD 49.99
Python自然语言处理,|(英)伯德,(英)克莱因,(美)洛普|,|《Python自然语言处理(影印版)》提供了非常易学的自然语言处理入门介绍，该领域涵盖从文本和电子邮件预测过滤，到自动总结和翻译等多种语言处理技术。在《Python自然语言处理(影印版)》中，你将学会编写Python程序处理大量非结构化文本。你还将通过使用综合语言数据结构访问含有丰富注释的数据集，理解用于分析书面通信内容和结构的主要算法。
《Python自然语言处理》准备了充足的示例和练习，可以帮助你：
从非结构化文本中抽取信息，甚至猜测主题或识别“命名实体”；
分析文本语言结构，包括解析和语义分析；
访问流行的语言学数据库，包括WordNet和树库(treebank)；
从多种语言学和人工智能领域中提取的整合技巧。
《Python自然语言处理(影印版)》将帮助你学习运用Python编程语言和自然语言工具包(NLTK)获得实用的自然语言处理技能。如果对于开发Web应用、分析多语言新闻源或记录濒危语言感兴趣——即便只是想从程序员视角观察人类语言如何运作，你将发现《Python自然语言处理》是一本令人着迷且极为有用的好书。|,东南大学出版社,64.00元
学习PYTHON 第三版(英文影印版),(美国)(Lutz.M.)卢茨,|Python是一种理想的独立程序和脚本程序语言，具有可移植、强大和易用的特点。无论您是初学程序设计还是初学Python，都能通过《学习 Python 第三版》快速而高效地掌握Python核心语言的基础。通读《学习Python 第三版》，您可以获得足够多的知识，能够学习将Python用于您所选择的任何应用领域。.
《学习Python（第三版）》基于作者Mark Lutz在过去10年间讲授培训课程所使用的资料。除了大量的注解插图和每章总结外，作者还为每章加入了独特的一节，通过实际练习和复习提问的方式，让您在学习过程中练习新的技能，测验对概念的理解程度。
类型和运算——深入Python内置对象类型：数值、列表、字典及其他。
语句和语法——用来创建和处理对象的Python代码以及Python通用语法模型。
函数——Python的基本结构化和代码重用工具。..
模块——将语句、函数和其他工具组织为更大的组件。
类和面向对象编程——可选的Python面向对象程序设计工具，用于定制和重用结构化代码。
异常和工具——处理语句和模块异常，并介绍编写较大型程序所使用的开发工具。
有关即将发布的Python 3.0的一些讨论。
《学习Python 第三版》为您理解Python语言提供了完整而又深入的介绍，帮助您领会在以后的工作中会遇到的应用级Python实例。如果您准备好探索Google和 YouTube究竟从Python中发现了什么，那么《学习Python 第三版》就是一个最好的开始。|,东南大学出版社,88.00元
Python Cookbook,|Alex Martelli,Anna Ravenscroft,David Ascher|,|Portable, powerful, and a breeze to use, Python is the popular open source object-oriented programming language used for both standalone programs and scripting applications.  It is now being used by an increasing number of major organizations, including NASA and Google. Updated for Python 2.4, The Python Cookbook, 2nd Edition offers a wealth of useful code for all Python programmers, not just advanced practitioners.  Like its predecessor, the new edition provides solutions to problems that Python programmers face everyday. It now includes over 200 recipes that range from simple tasks, such as working with dictionaries and list comprehensions, to complex tasks, such as monitoring a network and building a templating system. This revised version also includes new chapters on topics such as time, money, and metaprogramming. Here's a list of additional topics covered:  * Manipulating text * Searching and sorting * Working with files and the filesystem * Object-oriented programming * Dealing with threads and processes * System administration * Interacting with databases * Creating user interfaces * Network and web programming * Processing XML * Distributed programming * Debugging and testing Another advantage of The Python Cookbook, 2nd Edition is its trio of authors--three well-known Python programming experts, who are highly visible on email lists and in newsgroups, and speak often at Python conferences.  With scores of practical examples and pertinent background information, The Python Cookbook, 2nd Edition is the one source you need if you're looking to build efficient, flexible, scalable, and well-integrated systems.|,O'Reilly Media,USD 49.95
Python编程快速上手,斯维加特 (Al Sweigart),|如今，人们面临的大多数任务都可以通过编写计算机软件来完成。Python是一种解释型、面向对象、动态数据类型的高级程序设计语言。通过Python编程，我们能够解决现实生活中的很多任务。
本书是一本面向实践的Python编程实用指南。本书的目的，不仅是介绍Python语言的基础知识，而且还通过项目实践教会读者如何应用这些知识和技能。本书的首部分介绍了基本Python编程概念，第二部分介绍了一些不同的任务，通过编写Python程序，可以让计算机自动完成它们。第二部分的每一章都有一些项目程序，供读者学习。每章的末尾还提供了一些习题和深入的实践项目，帮助读者巩固所学的知识。附录部分提供了所有习题的解答。
本书适合任何想要通过Python学习编程的读者，尤其适合缺乏编程基础的初学者。通过阅读本书，读者将能利用强大的编程语言和工具，并且会体会到Python编程的快乐。|,人民邮电出版社,CNY 69.00
Fluent Python,Luciano Ramalho,|Learn how to write idiomatic, effective Python code by leveraging its best features. Python's simplicity quickly lets you become productive with it, but this often means you aren’t using everything the language has to offer. By taking you through Python’s key language features and libraries, this practical book shows you how to make your code shorter, faster, and more readable all at the same time—what experts consider Pythonic.
Many programmers who learn Python basics fall into the trap of reinventing the wheel because of past experience in other languages, and try to bend the language to patterns that don't really apply to it. Author Luciano Ramalho, a Python Software Foundation member and Python programmer for 15 years, helps you drop your accent from another language so you can code Python fluently.
•Learn practical applications of generators for database processing
•Rethink some design patterns in a Python context
•Examine attribute descriptors and when to use them: the key to ORMs
•Explore Pythonic objects: protocols versus interfaces, abstract base classes and multiple inheritance|,O'Reilly Media,USD 39.99
Python金融大数据分析,[德] 伊夫·希尔皮斯科,|唯一一本详细讲解使用Python分析处理金融大数据的专业图书；金融应用开发领域从业人员必读。
Python凭借其简单、易读、可扩展性以及拥有巨大而活跃的科学计算社区，在需要分析、处理大量数据的金融行业得到了广泛而迅速的应用，并且成为该行业开发核心应用的首选编程语言。《Python金融大数据分析》提供了使用Python进行数据分析，以及开发相关应用程序的技巧和工具。
《Python金融大数据分析》总计分为3部分，共19章，第1部分介绍了Python在金融学中的应用，其内容涵盖了Python用于金融行业的原因、Python的基础架构和工具，以及Python在计量金融学中的一些具体入门实例；第2部分介绍了金融分析和应用程序开发中最重要的Python库、技术和方法，其内容涵盖了Python的数据类型和结构、用matplotlib进行数据可视化、金融时间序列数据处理、高性能输入\/输出操作、高性能的Python技术和库、金融学中需要的多种数学工具、随机数生成和随机过程模拟、Python统计学应用、Python和Excel的集成、Python面向对象编程和GUI的开发、Python与Web技术的集成，以及基于Web应用和Web服务的开发；第3部分关注的是蒙特卡洛模拟期权与衍生品定价实际应用的开发工作，其内容涵盖了估值框架的介绍、金融模型的模拟、衍生品的估值、投资组合的估值、波动率期权等知识。
《Python金融大数据分析》适合对使用Python进行大数据分析、处理感兴趣的金融行业开发人员阅读。|,人民邮电出版社,CNY 99.00
Python参考手册（第4版）,David M.Beazley,|本书是权威的Python语言参考指南，内容涉及核心Python语言和Python库的最重要部分。本书内容简洁扼要、可读性强，书中还包括了一些没有在Python官方文档或其他资料中出现过的一些高级的主题。
这一版在内容上进行了全面更新，介绍了Python 2.6和Python 3新引入的编程语言特性和库模块，同时还分析了Python程序员面临的如下难题：是应继续使用现有的Python代码，还是应制定计划将其移植到Python 3？|,人民邮电出版社,89.00元
编写高质量代码：改善Python程序的91个建议,|张颖,赖勇浩|,|在通往“Python技术殿堂”的路上，本书将为你编写健壮、优雅、高质量的Python代码提供切实帮助！内容全部由Python编码的最佳实践组成，从基本原则、惯用法、语法、库、设计模式、内部机制、开发工具和性能优化8个方面深入探讨了编写高质量Python代码的技巧与禁忌，一共总结出91条宝贵的建议。每条建议对应Python程序员可能会遇到的一个问题。本书不仅以建议的方式从正反两方面给出了被实践证明为十分优秀的解决方案或非常糟糕的解决方案，而且分析了问题产生的根源，会使人有一种醍醐灌顶的感觉，豁然开朗。
《编写高质量代码：改善Python程序的91个建议》针对每个问题所选择的应用场景都非常典型，给出的建议也都与实践紧密结合。书中的每一条建议都可能在你的下一行代码、下一个应用或下一个项目中显露锋芒。建议你将本书搁置在手边，随时查阅，相信这么做一定能使你的学习和开发工作事半功倍。|,机械工业出版社,59.00元
流畅的Python,[巴西] Luciano Ramalho,|【技术大咖推荐】
“很荣幸担任这本优秀图书的技术审校。这本书能帮助很多中级Python程序员掌握这门语言，我也从中学到了相当多的知识！”——Alex Martelli，Python软件基金会成员
“对于想要扩充知识的中级和高级Python程序员来说，这本书是充满了实用编程技巧的宝藏。”——Daniel Greenfeld和Audrey Roy Greenfeld，Two Scoops of Django作者
【本书特色】
本书由奋战在Python开发一线近20年的Luciano Ramalho执笔，Victor Stinner、Alex Martelli等Python大咖担纲技术审稿人，从语言设计层面剖析编程细节，兼顾Python 3和Python 2，告诉你Python中不亲自动手实践就无法理解的语言陷阱成因和解决之道，教你写出风格地道的Python代码。
●	Python数据模型：理解为什么特殊方法是对象行为一致的关键。
●	数据结构：充分利用内置类型，理解Unicode文本和字节二象性。
●	把函数视作对象：把Python函数视作一等对象，并了解这一点对流行的设计模式的影响。
●	面向对象习惯用法：通过构建类学习引用、可变性、接口、运算符重载和多重继承。
●	控制流程：学习使用上下文管理器、生成器、协程，以及通过concurrent.futures和asyncio包实现的并发。
●	元编程：理解特性、描述符、类装饰器和元类的工作原理。
【主要内容】
本书致力于帮助Python开发人员挖掘这门语言及相关程序库的优秀特性，避免重复劳动，同时写出简洁、流畅、易读、易维护，并且具有地道Python风格的代码。本书尤其深入探讨了Python语言的高级用法，涵盖数据结构、Python风格的对象、并行与并发，以及元编程等不同的方面。
本书适合中高级Python软件开发人员阅读参考。
【译者简介】
安道
专注于现代计算机技术的自由翻译，译有《Flask Web 开发》《Python 网络编程攻略》《Ruby on Rails 教程》等书。
个人网站：http:\/\/about.ac\/。
吴珂
现为Airbnb公司软件工程师，所在团队主要负责开发和维护各类可伸缩、高性能服务，并在Airbnb内推广面向服务的系统架构。在分布式系统、云存储服务和跨平台SDK开发，以及大规模数据处理等方面有多年经验。|,人民邮电出版社,139元
Python计算与编程实践,|（美）Mark Guzdial,（美）Barbara Ericson|,|计算机程序设计课程往往是枯燥乏味的，而本书根据教育理论，开发了一种新的教学方法，介绍如何通过多媒体编程来学习计算机程序设计，将趣味性和实用性融于枯燥的编程课程的教学当中。本书方法独特新颖，实例通俗易懂，可帮助读者快速入门并深入掌握编程技能，是一本理论联系实际的程序设计教程。
本书使用的编程语言是Python，这是因为Python强大实用（比如网站开发）、易于入门，计算机科学专业和非专业人士都可以学习。本书以Python数字多媒体编程为主线，从图像、声音、文本和电影这些学生已经熟知的内容开始，讲解它们的处理方法，其中穿插介绍计算机科学与程序设计的基础知识。在讲解知识点的时候也独具匠心，先介绍容易理解的基本概念，如赋值、顺序操作、迭代、条件式、函数定义等，逐步涉及抽象内容，如算法复杂度、程序效率、计算机组成、层次式分解、递归、面向对象等。本书还提供了大量例题和习题，方便教学。|,机械工业出版社,69.00元
Learning Python,Mark Lutz,|Amazon.com Review
The authors of Learning Python show you enough essentials of the Python scripting language to enable you to begin solving problems right away, then reveal more powerful aspects of the language one at a time. This approach is sure to appeal to programmers and system administrators who have urgent problems and a preference for learning by semi-guided experimentation.
First off, Learning Python shows the relationships among Python scripts and their interpreter (in a mostly platform-neutral way). Then, the authors address the mechanics of the language itself, providing illustrations of how Python conceives of numbers, strings, and other objects as well as the operators you use to work with them. Dictionaries, lists, tuples, and other data structures specific to Python receive plenty of attention including complete examples.
Authors Mark Lutz and David Ascher build on that fundamental information in their discussions of functions and modules, which evolve into coverage of namespaces, classes, and the object-oriented aspects of Python programming. There's also information on creating graphical user interfaces (GUIs) for Python applications with Tkinter.
In addition to its careful expository prose, Learning Python includes exercises that both test your Python skills and help reveal more elusive truths about the language. --This text refers to an out of print or unavailable edition of this title.
Review
As a book for programmers who want to learn Python, it does a very good job. The coverage is informative and well order; making it easy to find what you're looking for. Overall, if you do some work with Python, you will benefit from owning this book. " - Sam Smith, news@UK, March "This book is a good example of Python culture, in the clarity of its text as much as in the quality of its code. Anyhone working their way through it will have a solid foundation upon which to explore Python's potential. Highly recommended." - Ivan Uemilianin, CVu, October 2004 --This text refers to the Paperback edition.|,O'Reilly Media,USD 54.99
Think Python,Allen B. Downey,|Think Python is an introduction to Python programming for students with no programming experience. It starts with the most basic concepts of programming, and is carefully designed to define all terms when they are first used and to develop each new concept in a logical progression. Larger pieces, like recursion and object-oriented programming are divided into a sequence of smaller steps and introduced over the course of several chapters.|,O'Reilly Media,GBP 29.99
|Learn Python The Hard Way, 1st Edition|,Zed Shaw,|Learn Python The Hard Way is a book I wrote to teach programming to people who do not know how to code. It assumes you are probably a power user of your computer, and then takes you from nothing to programming simple games. After reading my book you should be ready for many of the other programming books out there.|,Lulu.com,$29.99
Selenium 2自动化测试实战,虫师,|《Selenium 2自动化测试实战——基于Python语言》共分 14 章。第 1 章是自动化测试相关基础知识的介绍；第 2 章到第 10 章是《Selenium 2自动化测试实战——基于Python语言》的重点，循 序渐进地介绍了自动化测试所用到的技术；第 11 章通过一个具体的项目综合运用了前面章节所介绍 的技术与技巧；第 12 章到第 14 章选取了当前最热门的技术进行了介绍，旨在扩展测试人员的综合技 术能力。 《Selenium 2自动化测试实战——基于Python语言》的写作目的并不是为了简单地告诉读者如何使用一个自动化测试工具，而是希望读者在学习
《Selenium 2自动化测试实战——基于Python语言》的内容后能够提高综合的技术高度与宽度，从而摆脱简单的手工测试，向高级测试工程师的道路 迈进。|,电子工业出版社,CNY 59.00
NumPy攻略,[印尼] Ivan Idris,|本书带领读者了解熟悉当下最流行的科学计算库NumPy的方方面面。书中不仅介绍了NumPy的安装、使用和各种相关概念，还介绍了如何利用这一最新的开源软件库，以尽可能接近传统数学语言的方式，编写可读性好、实现效率高和运行速度快的代码。最后还探究了几个和NumPy相关的科学计算项目。此外，本书将为你掌握NumPy数组和通用函数打下坚实的基础，也会通过实例教你用Matplotlib绘图，并了解和SciPy相关的项目。
本书将帮助你：
• 学习高级索引技术和线性代数知识
• 了解数组形状及图像大小的调整
• 探察广播机制和直方图
• 分析NumPy代码并用可视化的方式表示分析结果
• 用Cython为代码提速
• 使用数组接口共享数据
• 使用通用函数和互操作功能
• 学习Matplotlib以及经常和NumPy同时使用的SciPy|,人民邮电出版社,49.00
Learn Python the Hard Way,Zed A. Shaw,|Master Python and become a programmer-even if you never thought you could! This breakthrough book and CD can help practically anyone get started in programming. It's called "The Hard Way," but it's really quite simple. What's "hard" is this: it requires discipline, practice, and persistence. Zed A. Shaw teaches the Python programming language through a series of 52 brilliantly-crafted exercises-all formatted consistently, and most no longer than two pages (including "extra credit"). Just read each exercise, type in its sample code precisely (no copy-and-paste!), and make the programs run. As you read, type, fix your mistakes, and watch the results, you'll learn how software works, how programming works, what good programs look like, and how to read, write, and see code. You'll discover how to spot crucial differences that fundamentally affect program behavior, and you'll learn everything you need to know about Python logic, input\/output, variables, and functions. Above all, you'll learn the attention to detail that is indispensable to successful programming (and so much else in life). At first, yes, it can be difficult. But it gets easier. And Shaw offers plenty of extra guidance and insight through 5+ full hours of teaching video on the accompanying CD. As Shaw's thousands of online readers and fans will attest, the moment will come when you just "get it"-and that moment feels great. Nothing important comes without discipline, practice, and persistence. But, with Learn Python the Hard Way, readers who bring those qualities to programming will master it-and they will reap the rewards, both personally and in their careers.|,Addison-Wesley Professional,USD 39.99
Gray Hat Python,Justin Seitz,黑帽黑客和白帽黑客综合性Python读物。Grey Hat Python,No Starch Press,USD 39.95
像计算机科学家一样思考Python,(美)Allen B.Downey,|《像计算机科学家一样思考python》按照培养读者像计算机科学家一样的思维方式的思路来教授python语言编程。全书贯穿的主体是如何思考、设计、开发的方法，而具体的编程语言，只是提供一个具体场景方便介绍的媒介。《像计算机科学家一样思考python》并不是一本介绍语言的书，而是一本介绍编程思想的书。和其他编程设计语言书籍不同，它不拘泥于语言细节，而是尝试从初学者的角度出发，用生动的示例和丰富的练习来引导读者渐入佳境。
作者从最基本的编程概念开始讲起，包括语言的语法和语义，而且每个编程概念都有清晰的定义，引领读者循序渐进地学习变量、表达式、语句、函数和数据结构。此外，书中还探讨了如何处理文件和数据库，如何理解对象、方法和面向对象编程，如何使用调试技巧来修正语法、运行时和语义错误。每一章都配有术语表和练习题，方便读者巩固所学的知识和技巧。此外，每一章都抽出一节来讲解如何调试程序。作者针对每章中所专注的语言特性，或者相关的开发问题，总结了调试的方方面面。可以说这是一种非常有益的创新，让初学编程的读者少走很多弯路。
全书共19章和3个附录，详细介绍了python语言编程的方方面面。《像计算机科学家一样思考python》是一本实用的学习指南，适合没有python编程经验的程序员阅读，也适合高中或大学的学生、python爱好者及需要了解编程基础的人阅读。对于第一次接触程序设计的人来说，是一本不可多得的佳作。|,人民邮电出版社,49
Head First Programming,|David Griffiths,Paul Barry|,|Looking for a reliable way to learn how to program on your own, without being overwhelmed by confusing concepts? "Head First Programming" introduces the core concepts of writing computer programs - variables, decisions, loops, functions, and objects - which apply regardless of the programming language. This book offers concrete examples and exercises in the dynamic and versatile Python language to demonstrate and reinforce these concepts. You can learn the basic tools to start writing the programs that interest you, and get a better understanding of what software can (and cannot) do. When you're finished, you'll have the necessary foundation to learn any programming language or tackle any software project you choose. With a focus on programming concepts, this book teaches you how to: understand the core features of all programming languages, including variables, statements, decisions, loops, expressions, and operators; reuse code with functions; use library code to save time and effort; select the best data structure to manage complex data; write programs that talk to the Web; share your data with other programs; and, write programs that test themselves and help you avoid embarrassing coding errors. We think your time is too valuable to waste struggling with new concepts. Using the latest research in cognitive science and learning theory to craft a multi-sensory learning experience, "Head First Programming" uses a visually rich format designed for the way your brain works, not a text-heavy approach that puts you to sleep.|,O'Reilly Media,USD 49.99
Python自然语言处理,|(英)伯德,(英)克莱因,(美)洛普|,|《Python自然语言处理(影印版)》提供了非常易学的自然语言处理入门介绍，该领域涵盖从文本和电子邮件预测过滤，到自动总结和翻译等多种语言处理技术。在《Python自然语言处理(影印版)》中，你将学会编写Python程序处理大量非结构化文本。你还将通过使用综合语言数据结构访问含有丰富注释的数据集，理解用于分析书面通信内容和结构的主要算法。
《Python自然语言处理》准备了充足的示例和练习，可以帮助你：
从非结构化文本中抽取信息，甚至猜测主题或识别“命名实体”；
分析文本语言结构，包括解析和语义分析；
访问流行的语言学数据库，包括WordNet和树库(treebank)；
从多种语言学和人工智能领域中提取的整合技巧。
《Python自然语言处理(影印版)》将帮助你学习运用Python编程语言和自然语言工具包(NLTK)获得实用的自然语言处理技能。如果对于开发Web应用、分析多语言新闻源或记录濒危语言感兴趣——即便只是想从程序员视角观察人类语言如何运作，你将发现《Python自然语言处理》是一本令人着迷且极为有用的好书。|,东南大学出版社,64.00元
学习PYTHON 第三版(英文影印版),(美国)(Lutz.M.)卢茨,|Python是一种理想的独立程序和脚本程序语言，具有可移植、强大和易用的特点。无论您是初学程序设计还是初学Python，都能通过《学习 Python 第三版》快速而高效地掌握Python核心语言的基础。通读《学习Python 第三版》，您可以获得足够多的知识，能够学习将Python用于您所选择的任何应用领域。.
《学习Python（第三版）》基于作者Mark Lutz在过去10年间讲授培训课程所使用的资料。除了大量的注解插图和每章总结外，作者还为每章加入了独特的一节，通过实际练习和复习提问的方式，让您在学习过程中练习新的技能，测验对概念的理解程度。
类型和运算——深入Python内置对象类型：数值、列表、字典及其他。
语句和语法——用来创建和处理对象的Python代码以及Python通用语法模型。
函数——Python的基本结构化和代码重用工具。..
模块——将语句、函数和其他工具组织为更大的组件。
类和面向对象编程——可选的Python面向对象程序设计工具，用于定制和重用结构化代码。
异常和工具——处理语句和模块异常，并介绍编写较大型程序所使用的开发工具。
有关即将发布的Python 3.0的一些讨论。
《学习Python 第三版》为您理解Python语言提供了完整而又深入的介绍，帮助您领会在以后的工作中会遇到的应用级Python实例。如果您准备好探索Google和 YouTube究竟从Python中发现了什么，那么《学习Python 第三版》就是一个最好的开始。|,东南大学出版社,88.00元
Python Cookbook,|Alex Martelli,Anna Ravenscroft,David Ascher|,|Portable, powerful, and a breeze to use, Python is the popular open source object-oriented programming language used for both standalone programs and scripting applications.  It is now being used by an increasing number of major organizations, including NASA and Google. Updated for Python 2.4, The Python Cookbook, 2nd Edition offers a wealth of useful code for all Python programmers, not just advanced practitioners.  Like its predecessor, the new edition provides solutions to problems that Python programmers face everyday. It now includes over 200 recipes that range from simple tasks, such as working with dictionaries and list comprehensions, to complex tasks, such as monitoring a network and building a templating system. This revised version also includes new chapters on topics such as time, money, and metaprogramming. Here's a list of additional topics covered:  * Manipulating text * Searching and sorting * Working with files and the filesystem * Object-oriented programming * Dealing with threads and processes * System administration * Interacting with databases * Creating user interfaces * Network and web programming * Processing XML * Distributed programming * Debugging and testing Another advantage of The Python Cookbook, 2nd Edition is its trio of authors--three well-known Python programming experts, who are highly visible on email lists and in newsgroups, and speak often at Python conferences.  With scores of practical examples and pertinent background information, The Python Cookbook, 2nd Edition is the one source you need if you're looking to build efficient, flexible, scalable, and well-integrated systems.|,O'Reilly Media,USD 49.95
Python编程快速上手,斯维加特 (Al Sweigart),|如今，人们面临的大多数任务都可以通过编写计算机软件来完成。Python是一种解释型、面向对象、动态数据类型的高级程序设计语言。通过Python编程，我们能够解决现实生活中的很多任务。
本书是一本面向实践的Python编程实用指南。本书的目的，不仅是介绍Python语言的基础知识，而且还通过项目实践教会读者如何应用这些知识和技能。本书的首部分介绍了基本Python编程概念，第二部分介绍了一些不同的任务，通过编写Python程序，可以让计算机自动完成它们。第二部分的每一章都有一些项目程序，供读者学习。每章的末尾还提供了一些习题和深入的实践项目，帮助读者巩固所学的知识。附录部分提供了所有习题的解答。
本书适合任何想要通过Python学习编程的读者，尤其适合缺乏编程基础的初学者。通过阅读本书，读者将能利用强大的编程语言和工具，并且会体会到Python编程的快乐。|,人民邮电出版社,CNY 69.00
Fluent Python,Luciano Ramalho,|Learn how to write idiomatic, effective Python code by leveraging its best features. Python's simplicity quickly lets you become productive with it, but this often means you aren’t using everything the language has to offer. By taking you through Python’s key language features and libraries, this practical book shows you how to make your code shorter, faster, and more readable all at the same time—what experts consider Pythonic.
Many programmers who learn Python basics fall into the trap of reinventing the wheel because of past experience in other languages, and try to bend the language to patterns that don't really apply to it. Author Luciano Ramalho, a Python Software Foundation member and Python programmer for 15 years, helps you drop your accent from another language so you can code Python fluently.
•Learn practical applications of generators for database processing
•Rethink some design patterns in a Python context
•Examine attribute descriptors and when to use them: the key to ORMs
•Explore Pythonic objects: protocols versus interfaces, abstract base classes and multiple inheritance|,O'Reilly Media,USD 39.99
Python金融大数据分析,[德] 伊夫·希尔皮斯科,|唯一一本详细讲解使用Python分析处理金融大数据的专业图书；金融应用开发领域从业人员必读。
Python凭借其简单、易读、可扩展性以及拥有巨大而活跃的科学计算社区，在需要分析、处理大量数据的金融行业得到了广泛而迅速的应用，并且成为该行业开发核心应用的首选编程语言。《Python金融大数据分析》提供了使用Python进行数据分析，以及开发相关应用程序的技巧和工具。
《Python金融大数据分析》总计分为3部分，共19章，第1部分介绍了Python在金融学中的应用，其内容涵盖了Python用于金融行业的原因、Python的基础架构和工具，以及Python在计量金融学中的一些具体入门实例；第2部分介绍了金融分析和应用程序开发中最重要的Python库、技术和方法，其内容涵盖了Python的数据类型和结构、用matplotlib进行数据可视化、金融时间序列数据处理、高性能输入\/输出操作、高性能的Python技术和库、金融学中需要的多种数学工具、随机数生成和随机过程模拟、Python统计学应用、Python和Excel的集成、Python面向对象编程和GUI的开发、Python与Web技术的集成，以及基于Web应用和Web服务的开发；第3部分关注的是蒙特卡洛模拟期权与衍生品定价实际应用的开发工作，其内容涵盖了估值框架的介绍、金融模型的模拟、衍生品的估值、投资组合的估值、波动率期权等知识。
《Python金融大数据分析》适合对使用Python进行大数据分析、处理感兴趣的金融行业开发人员阅读。|,人民邮电出版社,CNY 99.00
Python参考手册（第4版）,David M.Beazley,|本书是权威的Python语言参考指南，内容涉及核心Python语言和Python库的最重要部分。本书内容简洁扼要、可读性强，书中还包括了一些没有在Python官方文档或其他资料中出现过的一些高级的主题。
这一版在内容上进行了全面更新，介绍了Python 2.6和Python 3新引入的编程语言特性和库模块，同时还分析了Python程序员面临的如下难题：是应继续使用现有的Python代码，还是应制定计划将其移植到Python 3？|,人民邮电出版社,89.00元
编写高质量代码：改善Python程序的91个建议,|张颖,赖勇浩|,|在通往“Python技术殿堂”的路上，本书将为你编写健壮、优雅、高质量的Python代码提供切实帮助！内容全部由Python编码的最佳实践组成，从基本原则、惯用法、语法、库、设计模式、内部机制、开发工具和性能优化8个方面深入探讨了编写高质量Python代码的技巧与禁忌，一共总结出91条宝贵的建议。每条建议对应Python程序员可能会遇到的一个问题。本书不仅以建议的方式从正反两方面给出了被实践证明为十分优秀的解决方案或非常糟糕的解决方案，而且分析了问题产生的根源，会使人有一种醍醐灌顶的感觉，豁然开朗。
《编写高质量代码：改善Python程序的91个建议》针对每个问题所选择的应用场景都非常典型，给出的建议也都与实践紧密结合。书中的每一条建议都可能在你的下一行代码、下一个应用或下一个项目中显露锋芒。建议你将本书搁置在手边，随时查阅，相信这么做一定能使你的学习和开发工作事半功倍。|,机械工业出版社,59.00元
流畅的Python,[巴西] Luciano Ramalho,|【技术大咖推荐】
“很荣幸担任这本优秀图书的技术审校。这本书能帮助很多中级Python程序员掌握这门语言，我也从中学到了相当多的知识！”——Alex Martelli，Python软件基金会成员
“对于想要扩充知识的中级和高级Python程序员来说，这本书是充满了实用编程技巧的宝藏。”——Daniel Greenfeld和Audrey Roy Greenfeld，Two Scoops of Django作者
【本书特色】
本书由奋战在Python开发一线近20年的Luciano Ramalho执笔，Victor Stinner、Alex Martelli等Python大咖担纲技术审稿人，从语言设计层面剖析编程细节，兼顾Python 3和Python 2，告诉你Python中不亲自动手实践就无法理解的语言陷阱成因和解决之道，教你写出风格地道的Python代码。
●	Python数据模型：理解为什么特殊方法是对象行为一致的关键。
●	数据结构：充分利用内置类型，理解Unicode文本和字节二象性。
●	把函数视作对象：把Python函数视作一等对象，并了解这一点对流行的设计模式的影响。
●	面向对象习惯用法：通过构建类学习引用、可变性、接口、运算符重载和多重继承。
●	控制流程：学习使用上下文管理器、生成器、协程，以及通过concurrent.futures和asyncio包实现的并发。
●	元编程：理解特性、描述符、类装饰器和元类的工作原理。
【主要内容】
本书致力于帮助Python开发人员挖掘这门语言及相关程序库的优秀特性，避免重复劳动，同时写出简洁、流畅、易读、易维护，并且具有地道Python风格的代码。本书尤其深入探讨了Python语言的高级用法，涵盖数据结构、Python风格的对象、并行与并发，以及元编程等不同的方面。
本书适合中高级Python软件开发人员阅读参考。
【译者简介】
安道
专注于现代计算机技术的自由翻译，译有《Flask Web 开发》《Python 网络编程攻略》《Ruby on Rails 教程》等书。
个人网站：http:\/\/about.ac\/。
吴珂
现为Airbnb公司软件工程师，所在团队主要负责开发和维护各类可伸缩、高性能服务，并在Airbnb内推广面向服务的系统架构。在分布式系统、云存储服务和跨平台SDK开发，以及大规模数据处理等方面有多年经验。|,人民邮电出版社,139元
Python计算与编程实践,|（美）Mark Guzdial,（美）Barbara Ericson|,|计算机程序设计课程往往是枯燥乏味的，而本书根据教育理论，开发了一种新的教学方法，介绍如何通过多媒体编程来学习计算机程序设计，将趣味性和实用性融于枯燥的编程课程的教学当中。本书方法独特新颖，实例通俗易懂，可帮助读者快速入门并深入掌握编程技能，是一本理论联系实际的程序设计教程。
本书使用的编程语言是Python，这是因为Python强大实用（比如网站开发）、易于入门，计算机科学专业和非专业人士都可以学习。本书以Python数字多媒体编程为主线，从图像、声音、文本和电影这些学生已经熟知的内容开始，讲解它们的处理方法，其中穿插介绍计算机科学与程序设计的基础知识。在讲解知识点的时候也独具匠心，先介绍容易理解的基本概念，如赋值、顺序操作、迭代、条件式、函数定义等，逐步涉及抽象内容，如算法复杂度、程序效率、计算机组成、层次式分解、递归、面向对象等。本书还提供了大量例题和习题，方便教学。|,机械工业出版社,69.00元
Learning Python,Mark Lutz,|Amazon.com Review
The authors of Learning Python show you enough essentials of the Python scripting language to enable you to begin solving problems right away, then reveal more powerful aspects of the language one at a time. This approach is sure to appeal to programmers and system administrators who have urgent problems and a preference for learning by semi-guided experimentation.
First off, Learning Python shows the relationships among Python scripts and their interpreter (in a mostly platform-neutral way). Then, the authors address the mechanics of the language itself, providing illustrations of how Python conceives of numbers, strings, and other objects as well as the operators you use to work with them. Dictionaries, lists, tuples, and other data structures specific to Python receive plenty of attention including complete examples.
Authors Mark Lutz and David Ascher build on that fundamental information in their discussions of functions and modules, which evolve into coverage of namespaces, classes, and the object-oriented aspects of Python programming. There's also information on creating graphical user interfaces (GUIs) for Python applications with Tkinter.
In addition to its careful expository prose, Learning Python includes exercises that both test your Python skills and help reveal more elusive truths about the language. --This text refers to an out of print or unavailable edition of this title.
Review
As a book for programmers who want to learn Python, it does a very good job. The coverage is informative and well order; making it easy to find what you're looking for. Overall, if you do some work with Python, you will benefit from owning this book. " - Sam Smith, news@UK, March "This book is a good example of Python culture, in the clarity of its text as much as in the quality of its code. Anyhone working their way through it will have a solid foundation upon which to explore Python's potential. Highly recommended." - Ivan Uemilianin, CVu, October 2004 --This text refers to the Paperback edition.|,O'Reilly Media,USD 54.99
Think Python,Allen B. Downey,|Think Python is an introduction to Python programming for students with no programming experience. It starts with the most basic concepts of programming, and is carefully designed to define all terms when they are first used and to develop each new concept in a logical progression. Larger pieces, like recursion and object-oriented programming are divided into a sequence of smaller steps and introduced over the course of several chapters.|,O'Reilly Media,GBP 29.99
|Learn Python The Hard Way, 1st Edition|,Zed Shaw,|Learn Python The Hard Way is a book I wrote to teach programming to people who do not know how to code. It assumes you are probably a power user of your computer, and then takes you from nothing to programming simple games. After reading my book you should be ready for many of the other programming books out there.|,Lulu.com,$29.99
Selenium 2自动化测试实战,虫师,|《Selenium 2自动化测试实战——基于Python语言》共分 14 章。第 1 章是自动化测试相关基础知识的介绍；第 2 章到第 10 章是《Selenium 2自动化测试实战——基于Python语言》的重点，循 序渐进地介绍了自动化测试所用到的技术；第 11 章通过一个具体的项目综合运用了前面章节所介绍 的技术与技巧；第 12 章到第 14 章选取了当前最热门的技术进行了介绍，旨在扩展测试人员的综合技 术能力。 《Selenium 2自动化测试实战——基于Python语言》的写作目的并不是为了简单地告诉读者如何使用一个自动化测试工具，而是希望读者在学习
《Selenium 2自动化测试实战——基于Python语言》的内容后能够提高综合的技术高度与宽度，从而摆脱简单的手工测试，向高级测试工程师的道路 迈进。|,电子工业出版社,CNY 59.00
NumPy攻略,[印尼] Ivan Idris,|本书带领读者了解熟悉当下最流行的科学计算库NumPy的方方面面。书中不仅介绍了NumPy的安装、使用和各种相关概念，还介绍了如何利用这一最新的开源软件库，以尽可能接近传统数学语言的方式，编写可读性好、实现效率高和运行速度快的代码。最后还探究了几个和NumPy相关的科学计算项目。此外，本书将为你掌握NumPy数组和通用函数打下坚实的基础，也会通过实例教你用Matplotlib绘图，并了解和SciPy相关的项目。
本书将帮助你：
• 学习高级索引技术和线性代数知识
• 了解数组形状及图像大小的调整
• 探察广播机制和直方图
• 分析NumPy代码并用可视化的方式表示分析结果
• 用Cython为代码提速
• 使用数组接口共享数据
• 使用通用函数和互操作功能
• 学习Matplotlib以及经常和NumPy同时使用的SciPy|,人民邮电出版社,49.00
Python编程（第三版·英文影印版）,Mark Lutz,|《Python编程 第三版》已经成为Python用户的行业标准，且更加完善。第三版进行的更新反映了当前的最佳实践以及在语言的最新版本Python 2.5中引入的大量改变。
无论是新手还是老手，你都会发现这本经过彻底更新的书确实名副其实，它教给你编写代码的正确途径。它以清晰而简练的方式解释了Python语言的语法以及编程技巧，并辅以大量例子阐明正确的使用方法和通用特性。通过阅读这本全面的指南，你将学习到如何将Python运用到实际问题中，例如：
·用户图形界面编程
·并行处理
·网络应用程序
·Internet脚本编程
·数据库管理
从深入讨论核心概念开始，再到完整的程序，《Python编程 第三版》逐一覆盖这些领域。书中确有大型的程序示例，但只在你已经掌握了足够的知识，能够理解技术和代码后才会出现。
在学习过程中，你也会学到如何在实际规模的程序中使用Python——诸如面向对象编程和代码重用概念皆是贯穿全书的副题。如果你对Python 程序设计感兴趣，就需要这本O'Reilly经典书籍长伴你的左右。实践中的建议、代码的片断和程序设计模式，这些财富都可以在日常生活中得到应用——使你的生活更轻松更高效。|,东南大学出版社,138.00元
Gray Hat Python,Justin Seitz,黑帽黑客和白帽黑客综合性Python读物。Grey Hat Python,No Starch Press,USD 39.95
像计算机科学家一样思考Python,(美)Allen B.Downey,|《像计算机科学家一样思考python》按照培养读者像计算机科学家一样的思维方式的思路来教授python语言编程。全书贯穿的主体是如何思考、设计、开发的方法，而具体的编程语言，只是提供一个具体场景方便介绍的媒介。《像计算机科学家一样思考python》并不是一本介绍语言的书，而是一本介绍编程思想的书。和其他编程设计语言书籍不同，它不拘泥于语言细节，而是尝试从初学者的角度出发，用生动的示例和丰富的练习来引导读者渐入佳境。
作者从最基本的编程概念开始讲起，包括语言的语法和语义，而且每个编程概念都有清晰的定义，引领读者循序渐进地学习变量、表达式、语句、函数和数据结构。此外，书中还探讨了如何处理文件和数据库，如何理解对象、方法和面向对象编程，如何使用调试技巧来修正语法、运行时和语义错误。每一章都配有术语表和练习题，方便读者巩固所学的知识和技巧。此外，每一章都抽出一节来讲解如何调试程序。作者针对每章中所专注的语言特性，或者相关的开发问题，总结了调试的方方面面。可以说这是一种非常有益的创新，让初学编程的读者少走很多弯路。
全书共19章和3个附录，详细介绍了python语言编程的方方面面。《像计算机科学家一样思考python》是一本实用的学习指南，适合没有python编程经验的程序员阅读，也适合高中或大学的学生、python爱好者及需要了解编程基础的人阅读。对于第一次接触程序设计的人来说，是一本不可多得的佳作。|,人民邮电出版社,49
Head First Programming,|David Griffiths,Paul Barry|,|Looking for a reliable way to learn how to program on your own, without being overwhelmed by confusing concepts? "Head First Programming" introduces the core concepts of writing computer programs - variables, decisions, loops, functions, and objects - which apply regardless of the programming language. This book offers concrete examples and exercises in the dynamic and versatile Python language to demonstrate and reinforce these concepts. You can learn the basic tools to start writing the programs that interest you, and get a better understanding of what software can (and cannot) do. When you're finished, you'll have the necessary foundation to learn any programming language or tackle any software project you choose. With a focus on programming concepts, this book teaches you how to: understand the core features of all programming languages, including variables, statements, decisions, loops, expressions, and operators; reuse code with functions; use library code to save time and effort; select the best data structure to manage complex data; write programs that talk to the Web; share your data with other programs; and, write programs that test themselves and help you avoid embarrassing coding errors. We think your time is too valuable to waste struggling with new concepts. Using the latest research in cognitive science and learning theory to craft a multi-sensory learning experience, "Head First Programming" uses a visually rich format designed for the way your brain works, not a text-heavy approach that puts you to sleep.|,O'Reilly Media,USD 49.99
Python自然语言处理,|(英)伯德,(英)克莱因,(美)洛普|,|《Python自然语言处理(影印版)》提供了非常易学的自然语言处理入门介绍，该领域涵盖从文本和电子邮件预测过滤，到自动总结和翻译等多种语言处理技术。在《Python自然语言处理(影印版)》中，你将学会编写Python程序处理大量非结构化文本。你还将通过使用综合语言数据结构访问含有丰富注释的数据集，理解用于分析书面通信内容和结构的主要算法。
《Python自然语言处理》准备了充足的示例和练习，可以帮助你：
从非结构化文本中抽取信息，甚至猜测主题或识别“命名实体”；
分析文本语言结构，包括解析和语义分析；
访问流行的语言学数据库，包括WordNet和树库(treebank)；
从多种语言学和人工智能领域中提取的整合技巧。
《Python自然语言处理(影印版)》将帮助你学习运用Python编程语言和自然语言工具包(NLTK)获得实用的自然语言处理技能。如果对于开发Web应用、分析多语言新闻源或记录濒危语言感兴趣——即便只是想从程序员视角观察人类语言如何运作，你将发现《Python自然语言处理》是一本令人着迷且极为有用的好书。|,东南大学出版社,64.00元
学习PYTHON 第三版(英文影印版),(美国)(Lutz.M.)卢茨,|Python是一种理想的独立程序和脚本程序语言，具有可移植、强大和易用的特点。无论您是初学程序设计还是初学Python，都能通过《学习 Python 第三版》快速而高效地掌握Python核心语言的基础。通读《学习Python 第三版》，您可以获得足够多的知识，能够学习将Python用于您所选择的任何应用领域。.
《学习Python（第三版）》基于作者Mark Lutz在过去10年间讲授培训课程所使用的资料。除了大量的注解插图和每章总结外，作者还为每章加入了独特的一节，通过实际练习和复习提问的方式，让您在学习过程中练习新的技能，测验对概念的理解程度。
类型和运算——深入Python内置对象类型：数值、列表、字典及其他。
语句和语法——用来创建和处理对象的Python代码以及Python通用语法模型。
函数——Python的基本结构化和代码重用工具。..
模块——将语句、函数和其他工具组织为更大的组件。
类和面向对象编程——可选的Python面向对象程序设计工具，用于定制和重用结构化代码。
异常和工具——处理语句和模块异常，并介绍编写较大型程序所使用的开发工具。
有关即将发布的Python 3.0的一些讨论。
《学习Python 第三版》为您理解Python语言提供了完整而又深入的介绍，帮助您领会在以后的工作中会遇到的应用级Python实例。如果您准备好探索Google和 YouTube究竟从Python中发现了什么，那么《学习Python 第三版》就是一个最好的开始。|,东南大学出版社,88.00元
Python Cookbook,|Alex Martelli,Anna Ravenscroft,David Ascher|,|Portable, powerful, and a breeze to use, Python is the popular open source object-oriented programming language used for both standalone programs and scripting applications.  It is now being used by an increasing number of major organizations, including NASA and Google. Updated for Python 2.4, The Python Cookbook, 2nd Edition offers a wealth of useful code for all Python programmers, not just advanced practitioners.  Like its predecessor, the new edition provides solutions to problems that Python programmers face everyday. It now includes over 200 recipes that range from simple tasks, such as working with dictionaries and list comprehensions, to complex tasks, such as monitoring a network and building a templating system. This revised version also includes new chapters on topics such as time, money, and metaprogramming. Here's a list of additional topics covered:  * Manipulating text * Searching and sorting * Working with files and the filesystem * Object-oriented programming * Dealing with threads and processes * System administration * Interacting with databases * Creating user interfaces * Network and web programming * Processing XML * Distributed programming * Debugging and testing Another advantage of The Python Cookbook, 2nd Edition is its trio of authors--three well-known Python programming experts, who are highly visible on email lists and in newsgroups, and speak often at Python conferences.  With scores of practical examples and pertinent background information, The Python Cookbook, 2nd Edition is the one source you need if you're looking to build efficient, flexible, scalable, and well-integrated systems.|,O'Reilly Media,USD 49.95
Python编程快速上手,斯维加特 (Al Sweigart),|如今，人们面临的大多数任务都可以通过编写计算机软件来完成。Python是一种解释型、面向对象、动态数据类型的高级程序设计语言。通过Python编程，我们能够解决现实生活中的很多任务。
本书是一本面向实践的Python编程实用指南。本书的目的，不仅是介绍Python语言的基础知识，而且还通过项目实践教会读者如何应用这些知识和技能。本书的首部分介绍了基本Python编程概念，第二部分介绍了一些不同的任务，通过编写Python程序，可以让计算机自动完成它们。第二部分的每一章都有一些项目程序，供读者学习。每章的末尾还提供了一些习题和深入的实践项目，帮助读者巩固所学的知识。附录部分提供了所有习题的解答。
本书适合任何想要通过Python学习编程的读者，尤其适合缺乏编程基础的初学者。通过阅读本书，读者将能利用强大的编程语言和工具，并且会体会到Python编程的快乐。|,人民邮电出版社,CNY 69.00
Fluent Python,Luciano Ramalho,|Learn how to write idiomatic, effective Python code by leveraging its best features. Python's simplicity quickly lets you become productive with it, but this often means you aren’t using everything the language has to offer. By taking you through Python’s key language features and libraries, this practical book shows you how to make your code shorter, faster, and more readable all at the same time—what experts consider Pythonic.
Many programmers who learn Python basics fall into the trap of reinventing the wheel because of past experience in other languages, and try to bend the language to patterns that don't really apply to it. Author Luciano Ramalho, a Python Software Foundation member and Python programmer for 15 years, helps you drop your accent from another language so you can code Python fluently.
•Learn practical applications of generators for database processing
•Rethink some design patterns in a Python context
•Examine attribute descriptors and when to use them: the key to ORMs
•Explore Pythonic objects: protocols versus interfaces, abstract base classes and multiple inheritance|,O'Reilly Media,USD 39.99
Python金融大数据分析,[德] 伊夫·希尔皮斯科,|唯一一本详细讲解使用Python分析处理金融大数据的专业图书；金融应用开发领域从业人员必读。
Python凭借其简单、易读、可扩展性以及拥有巨大而活跃的科学计算社区，在需要分析、处理大量数据的金融行业得到了广泛而迅速的应用，并且成为该行业开发核心应用的首选编程语言。《Python金融大数据分析》提供了使用Python进行数据分析，以及开发相关应用程序的技巧和工具。
《Python金融大数据分析》总计分为3部分，共19章，第1部分介绍了Python在金融学中的应用，其内容涵盖了Python用于金融行业的原因、Python的基础架构和工具，以及Python在计量金融学中的一些具体入门实例；第2部分介绍了金融分析和应用程序开发中最重要的Python库、技术和方法，其内容涵盖了Python的数据类型和结构、用matplotlib进行数据可视化、金融时间序列数据处理、高性能输入\/输出操作、高性能的Python技术和库、金融学中需要的多种数学工具、随机数生成和随机过程模拟、Python统计学应用、Python和Excel的集成、Python面向对象编程和GUI的开发、Python与Web技术的集成，以及基于Web应用和Web服务的开发；第3部分关注的是蒙特卡洛模拟期权与衍生品定价实际应用的开发工作，其内容涵盖了估值框架的介绍、金融模型的模拟、衍生品的估值、投资组合的估值、波动率期权等知识。
《Python金融大数据分析》适合对使用Python进行大数据分析、处理感兴趣的金融行业开发人员阅读。|,人民邮电出版社,CNY 99.00
Python参考手册（第4版）,David M.Beazley,|本书是权威的Python语言参考指南，内容涉及核心Python语言和Python库的最重要部分。本书内容简洁扼要、可读性强，书中还包括了一些没有在Python官方文档或其他资料中出现过的一些高级的主题。
这一版在内容上进行了全面更新，介绍了Python 2.6和Python 3新引入的编程语言特性和库模块，同时还分析了Python程序员面临的如下难题：是应继续使用现有的Python代码，还是应制定计划将其移植到Python 3？|,人民邮电出版社,89.00元
编写高质量代码：改善Python程序的91个建议,|张颖,赖勇浩|,|在通往“Python技术殿堂”的路上，本书将为你编写健壮、优雅、高质量的Python代码提供切实帮助！内容全部由Python编码的最佳实践组成，从基本原则、惯用法、语法、库、设计模式、内部机制、开发工具和性能优化8个方面深入探讨了编写高质量Python代码的技巧与禁忌，一共总结出91条宝贵的建议。每条建议对应Python程序员可能会遇到的一个问题。本书不仅以建议的方式从正反两方面给出了被实践证明为十分优秀的解决方案或非常糟糕的解决方案，而且分析了问题产生的根源，会使人有一种醍醐灌顶的感觉，豁然开朗。
《编写高质量代码：改善Python程序的91个建议》针对每个问题所选择的应用场景都非常典型，给出的建议也都与实践紧密结合。书中的每一条建议都可能在你的下一行代码、下一个应用或下一个项目中显露锋芒。建议你将本书搁置在手边，随时查阅，相信这么做一定能使你的学习和开发工作事半功倍。|,机械工业出版社,59.00元
流畅的Python,[巴西] Luciano Ramalho,|【技术大咖推荐】
“很荣幸担任这本优秀图书的技术审校。这本书能帮助很多中级Python程序员掌握这门语言，我也从中学到了相当多的知识！”——Alex Martelli，Python软件基金会成员
“对于想要扩充知识的中级和高级Python程序员来说，这本书是充满了实用编程技巧的宝藏。”——Daniel Greenfeld和Audrey Roy Greenfeld，Two Scoops of Django作者
【本书特色】
本书由奋战在Python开发一线近20年的Luciano Ramalho执笔，Victor Stinner、Alex Martelli等Python大咖担纲技术审稿人，从语言设计层面剖析编程细节，兼顾Python 3和Python 2，告诉你Python中不亲自动手实践就无法理解的语言陷阱成因和解决之道，教你写出风格地道的Python代码。
●	Python数据模型：理解为什么特殊方法是对象行为一致的关键。
●	数据结构：充分利用内置类型，理解Unicode文本和字节二象性。
●	把函数视作对象：把Python函数视作一等对象，并了解这一点对流行的设计模式的影响。
●	面向对象习惯用法：通过构建类学习引用、可变性、接口、运算符重载和多重继承。
●	控制流程：学习使用上下文管理器、生成器、协程，以及通过concurrent.futures和asyncio包实现的并发。
●	元编程：理解特性、描述符、类装饰器和元类的工作原理。
【主要内容】
本书致力于帮助Python开发人员挖掘这门语言及相关程序库的优秀特性，避免重复劳动，同时写出简洁、流畅、易读、易维护，并且具有地道Python风格的代码。本书尤其深入探讨了Python语言的高级用法，涵盖数据结构、Python风格的对象、并行与并发，以及元编程等不同的方面。
本书适合中高级Python软件开发人员阅读参考。
【译者简介】
安道
专注于现代计算机技术的自由翻译，译有《Flask Web 开发》《Python 网络编程攻略》《Ruby on Rails 教程》等书。
个人网站：http:\/\/about.ac\/。
吴珂
现为Airbnb公司软件工程师，所在团队主要负责开发和维护各类可伸缩、高性能服务，并在Airbnb内推广面向服务的系统架构。在分布式系统、云存储服务和跨平台SDK开发，以及大规模数据处理等方面有多年经验。|,人民邮电出版社,139元
Python计算与编程实践,|（美）Mark Guzdial,（美）Barbara Ericson|,|计算机程序设计课程往往是枯燥乏味的，而本书根据教育理论，开发了一种新的教学方法，介绍如何通过多媒体编程来学习计算机程序设计，将趣味性和实用性融于枯燥的编程课程的教学当中。本书方法独特新颖，实例通俗易懂，可帮助读者快速入门并深入掌握编程技能，是一本理论联系实际的程序设计教程。
本书使用的编程语言是Python，这是因为Python强大实用（比如网站开发）、易于入门，计算机科学专业和非专业人士都可以学习。本书以Python数字多媒体编程为主线，从图像、声音、文本和电影这些学生已经熟知的内容开始，讲解它们的处理方法，其中穿插介绍计算机科学与程序设计的基础知识。在讲解知识点的时候也独具匠心，先介绍容易理解的基本概念，如赋值、顺序操作、迭代、条件式、函数定义等，逐步涉及抽象内容，如算法复杂度、程序效率、计算机组成、层次式分解、递归、面向对象等。本书还提供了大量例题和习题，方便教学。|,机械工业出版社,69.00元
Learning Python,Mark Lutz,|Amazon.com Review
The authors of Learning Python show you enough essentials of the Python scripting language to enable you to begin solving problems right away, then reveal more powerful aspects of the language one at a time. This approach is sure to appeal to programmers and system administrators who have urgent problems and a preference for learning by semi-guided experimentation.
First off, Learning Python shows the relationships among Python scripts and their interpreter (in a mostly platform-neutral way). Then, the authors address the mechanics of the language itself, providing illustrations of how Python conceives of numbers, strings, and other objects as well as the operators you use to work with them. Dictionaries, lists, tuples, and other data structures specific to Python receive plenty of attention including complete examples.
Authors Mark Lutz and David Ascher build on that fundamental information in their discussions of functions and modules, which evolve into coverage of namespaces, classes, and the object-oriented aspects of Python programming. There's also information on creating graphical user interfaces (GUIs) for Python applications with Tkinter.
In addition to its careful expository prose, Learning Python includes exercises that both test your Python skills and help reveal more elusive truths about the language. --This text refers to an out of print or unavailable edition of this title.
Review
As a book for programmers who want to learn Python, it does a very good job. The coverage is informative and well order; making it easy to find what you're looking for. Overall, if you do some work with Python, you will benefit from owning this book. " - Sam Smith, news@UK, March "This book is a good example of Python culture, in the clarity of its text as much as in the quality of its code. Anyhone working their way through it will have a solid foundation upon which to explore Python's potential. Highly recommended." - Ivan Uemilianin, CVu, October 2004 --This text refers to the Paperback edition.|,O'Reilly Media,USD 54.99
Think Python,Allen B. Downey,|Think Python is an introduction to Python programming for students with no programming experience. It starts with the most basic concepts of programming, and is carefully designed to define all terms when they are first used and to develop each new concept in a logical progression. Larger pieces, like recursion and object-oriented programming are divided into a sequence of smaller steps and introduced over the course of several chapters.|,O'Reilly Media,GBP 29.99
|Learn Python The Hard Way, 1st Edition|,Zed Shaw,|Learn Python The Hard Way is a book I wrote to teach programming to people who do not know how to code. It assumes you are probably a power user of your computer, and then takes you from nothing to programming simple games. After reading my book you should be ready for many of the other programming books out there.|,Lulu.com,$29.99
Selenium 2自动化测试实战,虫师,|《Selenium 2自动化测试实战——基于Python语言》共分 14 章。第 1 章是自动化测试相关基础知识的介绍；第 2 章到第 10 章是《Selenium 2自动化测试实战——基于Python语言》的重点，循 序渐进地介绍了自动化测试所用到的技术；第 11 章通过一个具体的项目综合运用了前面章节所介绍 的技术与技巧；第 12 章到第 14 章选取了当前最热门的技术进行了介绍，旨在扩展测试人员的综合技 术能力。 《Selenium 2自动化测试实战——基于Python语言》的写作目的并不是为了简单地告诉读者如何使用一个自动化测试工具，而是希望读者在学习
《Selenium 2自动化测试实战——基于Python语言》的内容后能够提高综合的技术高度与宽度，从而摆脱简单的手工测试，向高级测试工程师的道路 迈进。|,电子工业出版社,CNY 59.00
NumPy攻略,[印尼] Ivan Idris,|本书带领读者了解熟悉当下最流行的科学计算库NumPy的方方面面。书中不仅介绍了NumPy的安装、使用和各种相关概念，还介绍了如何利用这一最新的开源软件库，以尽可能接近传统数学语言的方式，编写可读性好、实现效率高和运行速度快的代码。最后还探究了几个和NumPy相关的科学计算项目。此外，本书将为你掌握NumPy数组和通用函数打下坚实的基础，也会通过实例教你用Matplotlib绘图，并了解和SciPy相关的项目。
本书将帮助你：
• 学习高级索引技术和线性代数知识
• 了解数组形状及图像大小的调整
• 探察广播机制和直方图
• 分析NumPy代码并用可视化的方式表示分析结果
• 用Cython为代码提速
• 使用数组接口共享数据
• 使用通用函数和互操作功能
• 学习Matplotlib以及经常和NumPy同时使用的SciPy|,人民邮电出版社,49.00
Python编程（第三版·英文影印版）,Mark Lutz,|《Python编程 第三版》已经成为Python用户的行业标准，且更加完善。第三版进行的更新反映了当前的最佳实践以及在语言的最新版本Python 2.5中引入的大量改变。
无论是新手还是老手，你都会发现这本经过彻底更新的书确实名副其实，它教给你编写代码的正确途径。它以清晰而简练的方式解释了Python语言的语法以及编程技巧，并辅以大量例子阐明正确的使用方法和通用特性。通过阅读这本全面的指南，你将学习到如何将Python运用到实际问题中，例如：
·用户图形界面编程
·并行处理
·网络应用程序
·Internet脚本编程
·数据库管理
从深入讨论核心概念开始，再到完整的程序，《Python编程 第三版》逐一覆盖这些领域。书中确有大型的程序示例，但只在你已经掌握了足够的知识，能够理解技术和代码后才会出现。
在学习过程中，你也会学到如何在实际规模的程序中使用Python——诸如面向对象编程和代码重用概念皆是贯穿全书的副题。如果你对Python 程序设计感兴趣，就需要这本O'Reilly经典书籍长伴你的左右。实践中的建议、代码的片断和程序设计模式，这些财富都可以在日常生活中得到应用——使你的生活更轻松更高效。|,东南大学出版社,138.00元
Python Tutorial,|Guido Van Rossum,Fred L. Drake, Jr (editor)|,最权威的 Python 教程，由 Python 作者 Guido van Rossum 主笔，有少许学院味道。中文电子版由刘鑫、李梦夷翻译。英文原稿网址：http:\/\/docs.python.org\/tut\/简体中文版网址：http:\/\/wiki.woodpecker.org.cn\/moin\/March_Liu\/PyTutorial,Iuniverse Inc,USD 12.95
像计算机科学家一样思考Python,(美)Allen B.Downey,|《像计算机科学家一样思考python》按照培养读者像计算机科学家一样的思维方式的思路来教授python语言编程。全书贯穿的主体是如何思考、设计、开发的方法，而具体的编程语言，只是提供一个具体场景方便介绍的媒介。《像计算机科学家一样思考python》并不是一本介绍语言的书，而是一本介绍编程思想的书。和其他编程设计语言书籍不同，它不拘泥于语言细节，而是尝试从初学者的角度出发，用生动的示例和丰富的练习来引导读者渐入佳境。
作者从最基本的编程概念开始讲起，包括语言的语法和语义，而且每个编程概念都有清晰的定义，引领读者循序渐进地学习变量、表达式、语句、函数和数据结构。此外，书中还探讨了如何处理文件和数据库，如何理解对象、方法和面向对象编程，如何使用调试技巧来修正语法、运行时和语义错误。每一章都配有术语表和练习题，方便读者巩固所学的知识和技巧。此外，每一章都抽出一节来讲解如何调试程序。作者针对每章中所专注的语言特性，或者相关的开发问题，总结了调试的方方面面。可以说这是一种非常有益的创新，让初学编程的读者少走很多弯路。
全书共19章和3个附录，详细介绍了python语言编程的方方面面。《像计算机科学家一样思考python》是一本实用的学习指南，适合没有python编程经验的程序员阅读，也适合高中或大学的学生、python爱好者及需要了解编程基础的人阅读。对于第一次接触程序设计的人来说，是一本不可多得的佳作。|,人民邮电出版社,49
Head First Programming,|David Griffiths,Paul Barry|,|Looking for a reliable way to learn how to program on your own, without being overwhelmed by confusing concepts? "Head First Programming" introduces the core concepts of writing computer programs - variables, decisions, loops, functions, and objects - which apply regardless of the programming language. This book offers concrete examples and exercises in the dynamic and versatile Python language to demonstrate and reinforce these concepts. You can learn the basic tools to start writing the programs that interest you, and get a better understanding of what software can (and cannot) do. When you're finished, you'll have the necessary foundation to learn any programming language or tackle any software project you choose. With a focus on programming concepts, this book teaches you how to: understand the core features of all programming languages, including variables, statements, decisions, loops, expressions, and operators; reuse code with functions; use library code to save time and effort; select the best data structure to manage complex data; write programs that talk to the Web; share your data with other programs; and, write programs that test themselves and help you avoid embarrassing coding errors. We think your time is too valuable to waste struggling with new concepts. Using the latest research in cognitive science and learning theory to craft a multi-sensory learning experience, "Head First Programming" uses a visually rich format designed for the way your brain works, not a text-heavy approach that puts you to sleep.|,O'Reilly Media,USD 49.99
Python自然语言处理,|(英)伯德,(英)克莱因,(美)洛普|,|《Python自然语言处理(影印版)》提供了非常易学的自然语言处理入门介绍，该领域涵盖从文本和电子邮件预测过滤，到自动总结和翻译等多种语言处理技术。在《Python自然语言处理(影印版)》中，你将学会编写Python程序处理大量非结构化文本。你还将通过使用综合语言数据结构访问含有丰富注释的数据集，理解用于分析书面通信内容和结构的主要算法。
《Python自然语言处理》准备了充足的示例和练习，可以帮助你：
从非结构化文本中抽取信息，甚至猜测主题或识别“命名实体”；
分析文本语言结构，包括解析和语义分析；
访问流行的语言学数据库，包括WordNet和树库(treebank)；
从多种语言学和人工智能领域中提取的整合技巧。
《Python自然语言处理(影印版)》将帮助你学习运用Python编程语言和自然语言工具包(NLTK)获得实用的自然语言处理技能。如果对于开发Web应用、分析多语言新闻源或记录濒危语言感兴趣——即便只是想从程序员视角观察人类语言如何运作，你将发现《Python自然语言处理》是一本令人着迷且极为有用的好书。|,东南大学出版社,64.00元
学习PYTHON 第三版(英文影印版),(美国)(Lutz.M.)卢茨,|Python是一种理想的独立程序和脚本程序语言，具有可移植、强大和易用的特点。无论您是初学程序设计还是初学Python，都能通过《学习 Python 第三版》快速而高效地掌握Python核心语言的基础。通读《学习Python 第三版》，您可以获得足够多的知识，能够学习将Python用于您所选择的任何应用领域。.
《学习Python（第三版）》基于作者Mark Lutz在过去10年间讲授培训课程所使用的资料。除了大量的注解插图和每章总结外，作者还为每章加入了独特的一节，通过实际练习和复习提问的方式，让您在学习过程中练习新的技能，测验对概念的理解程度。
类型和运算——深入Python内置对象类型：数值、列表、字典及其他。
语句和语法——用来创建和处理对象的Python代码以及Python通用语法模型。
函数——Python的基本结构化和代码重用工具。..
模块——将语句、函数和其他工具组织为更大的组件。
类和面向对象编程——可选的Python面向对象程序设计工具，用于定制和重用结构化代码。
异常和工具——处理语句和模块异常，并介绍编写较大型程序所使用的开发工具。
有关即将发布的Python 3.0的一些讨论。
《学习Python 第三版》为您理解Python语言提供了完整而又深入的介绍，帮助您领会在以后的工作中会遇到的应用级Python实例。如果您准备好探索Google和 YouTube究竟从Python中发现了什么，那么《学习Python 第三版》就是一个最好的开始。|,东南大学出版社,88.00元
Python Cookbook,|Alex Martelli,Anna Ravenscroft,David Ascher|,|Portable, powerful, and a breeze to use, Python is the popular open source object-oriented programming language used for both standalone programs and scripting applications.  It is now being used by an increasing number of major organizations, including NASA and Google. Updated for Python 2.4, The Python Cookbook, 2nd Edition offers a wealth of useful code for all Python programmers, not just advanced practitioners.  Like its predecessor, the new edition provides solutions to problems that Python programmers face everyday. It now includes over 200 recipes that range from simple tasks, such as working with dictionaries and list comprehensions, to complex tasks, such as monitoring a network and building a templating system. This revised version also includes new chapters on topics such as time, money, and metaprogramming. Here's a list of additional topics covered:  * Manipulating text * Searching and sorting * Working with files and the filesystem * Object-oriented programming * Dealing with threads and processes * System administration * Interacting with databases * Creating user interfaces * Network and web programming * Processing XML * Distributed programming * Debugging and testing Another advantage of The Python Cookbook, 2nd Edition is its trio of authors--three well-known Python programming experts, who are highly visible on email lists and in newsgroups, and speak often at Python conferences.  With scores of practical examples and pertinent background information, The Python Cookbook, 2nd Edition is the one source you need if you're looking to build efficient, flexible, scalable, and well-integrated systems.|,O'Reilly Media,USD 49.95
Python编程快速上手,斯维加特 (Al Sweigart),|如今，人们面临的大多数任务都可以通过编写计算机软件来完成。Python是一种解释型、面向对象、动态数据类型的高级程序设计语言。通过Python编程，我们能够解决现实生活中的很多任务。
本书是一本面向实践的Python编程实用指南。本书的目的，不仅是介绍Python语言的基础知识，而且还通过项目实践教会读者如何应用这些知识和技能。本书的首部分介绍了基本Python编程概念，第二部分介绍了一些不同的任务，通过编写Python程序，可以让计算机自动完成它们。第二部分的每一章都有一些项目程序，供读者学习。每章的末尾还提供了一些习题和深入的实践项目，帮助读者巩固所学的知识。附录部分提供了所有习题的解答。
本书适合任何想要通过Python学习编程的读者，尤其适合缺乏编程基础的初学者。通过阅读本书，读者将能利用强大的编程语言和工具，并且会体会到Python编程的快乐。|,人民邮电出版社,CNY 69.00
Fluent Python,Luciano Ramalho,|Learn how to write idiomatic, effective Python code by leveraging its best features. Python's simplicity quickly lets you become productive with it, but this often means you aren’t using everything the language has to offer. By taking you through Python’s key language features and libraries, this practical book shows you how to make your code shorter, faster, and more readable all at the same time—what experts consider Pythonic.
Many programmers who learn Python basics fall into the trap of reinventing the wheel because of past experience in other languages, and try to bend the language to patterns that don't really apply to it. Author Luciano Ramalho, a Python Software Foundation member and Python programmer for 15 years, helps you drop your accent from another language so you can code Python fluently.
•Learn practical applications of generators for database processing
•Rethink some design patterns in a Python context
•Examine attribute descriptors and when to use them: the key to ORMs
•Explore Pythonic objects: protocols versus interfaces, abstract base classes and multiple inheritance|,O'Reilly Media,USD 39.99
Python金融大数据分析,[德] 伊夫·希尔皮斯科,|唯一一本详细讲解使用Python分析处理金融大数据的专业图书；金融应用开发领域从业人员必读。
Python凭借其简单、易读、可扩展性以及拥有巨大而活跃的科学计算社区，在需要分析、处理大量数据的金融行业得到了广泛而迅速的应用，并且成为该行业开发核心应用的首选编程语言。《Python金融大数据分析》提供了使用Python进行数据分析，以及开发相关应用程序的技巧和工具。
《Python金融大数据分析》总计分为3部分，共19章，第1部分介绍了Python在金融学中的应用，其内容涵盖了Python用于金融行业的原因、Python的基础架构和工具，以及Python在计量金融学中的一些具体入门实例；第2部分介绍了金融分析和应用程序开发中最重要的Python库、技术和方法，其内容涵盖了Python的数据类型和结构、用matplotlib进行数据可视化、金融时间序列数据处理、高性能输入\/输出操作、高性能的Python技术和库、金融学中需要的多种数学工具、随机数生成和随机过程模拟、Python统计学应用、Python和Excel的集成、Python面向对象编程和GUI的开发、Python与Web技术的集成，以及基于Web应用和Web服务的开发；第3部分关注的是蒙特卡洛模拟期权与衍生品定价实际应用的开发工作，其内容涵盖了估值框架的介绍、金融模型的模拟、衍生品的估值、投资组合的估值、波动率期权等知识。
《Python金融大数据分析》适合对使用Python进行大数据分析、处理感兴趣的金融行业开发人员阅读。|,人民邮电出版社,CNY 99.00
Python参考手册（第4版）,David M.Beazley,|本书是权威的Python语言参考指南，内容涉及核心Python语言和Python库的最重要部分。本书内容简洁扼要、可读性强，书中还包括了一些没有在Python官方文档或其他资料中出现过的一些高级的主题。
这一版在内容上进行了全面更新，介绍了Python 2.6和Python 3新引入的编程语言特性和库模块，同时还分析了Python程序员面临的如下难题：是应继续使用现有的Python代码，还是应制定计划将其移植到Python 3？|,人民邮电出版社,89.00元
编写高质量代码：改善Python程序的91个建议,|张颖,赖勇浩|,|在通往“Python技术殿堂”的路上，本书将为你编写健壮、优雅、高质量的Python代码提供切实帮助！内容全部由Python编码的最佳实践组成，从基本原则、惯用法、语法、库、设计模式、内部机制、开发工具和性能优化8个方面深入探讨了编写高质量Python代码的技巧与禁忌，一共总结出91条宝贵的建议。每条建议对应Python程序员可能会遇到的一个问题。本书不仅以建议的方式从正反两方面给出了被实践证明为十分优秀的解决方案或非常糟糕的解决方案，而且分析了问题产生的根源，会使人有一种醍醐灌顶的感觉，豁然开朗。
《编写高质量代码：改善Python程序的91个建议》针对每个问题所选择的应用场景都非常典型，给出的建议也都与实践紧密结合。书中的每一条建议都可能在你的下一行代码、下一个应用或下一个项目中显露锋芒。建议你将本书搁置在手边，随时查阅，相信这么做一定能使你的学习和开发工作事半功倍。|,机械工业出版社,59.00元
流畅的Python,[巴西] Luciano Ramalho,|【技术大咖推荐】
“很荣幸担任这本优秀图书的技术审校。这本书能帮助很多中级Python程序员掌握这门语言，我也从中学到了相当多的知识！”——Alex Martelli，Python软件基金会成员
“对于想要扩充知识的中级和高级Python程序员来说，这本书是充满了实用编程技巧的宝藏。”——Daniel Greenfeld和Audrey Roy Greenfeld，Two Scoops of Django作者
【本书特色】
本书由奋战在Python开发一线近20年的Luciano Ramalho执笔，Victor Stinner、Alex Martelli等Python大咖担纲技术审稿人，从语言设计层面剖析编程细节，兼顾Python 3和Python 2，告诉你Python中不亲自动手实践就无法理解的语言陷阱成因和解决之道，教你写出风格地道的Python代码。
●	Python数据模型：理解为什么特殊方法是对象行为一致的关键。
●	数据结构：充分利用内置类型，理解Unicode文本和字节二象性。
●	把函数视作对象：把Python函数视作一等对象，并了解这一点对流行的设计模式的影响。
●	面向对象习惯用法：通过构建类学习引用、可变性、接口、运算符重载和多重继承。
●	控制流程：学习使用上下文管理器、生成器、协程，以及通过concurrent.futures和asyncio包实现的并发。
●	元编程：理解特性、描述符、类装饰器和元类的工作原理。
【主要内容】
本书致力于帮助Python开发人员挖掘这门语言及相关程序库的优秀特性，避免重复劳动，同时写出简洁、流畅、易读、易维护，并且具有地道Python风格的代码。本书尤其深入探讨了Python语言的高级用法，涵盖数据结构、Python风格的对象、并行与并发，以及元编程等不同的方面。
本书适合中高级Python软件开发人员阅读参考。
【译者简介】
安道
专注于现代计算机技术的自由翻译，译有《Flask Web 开发》《Python 网络编程攻略》《Ruby on Rails 教程》等书。
个人网站：http:\/\/about.ac\/。
吴珂
现为Airbnb公司软件工程师，所在团队主要负责开发和维护各类可伸缩、高性能服务，并在Airbnb内推广面向服务的系统架构。在分布式系统、云存储服务和跨平台SDK开发，以及大规模数据处理等方面有多年经验。|,人民邮电出版社,139元
Python计算与编程实践,|（美）Mark Guzdial,（美）Barbara Ericson|,|计算机程序设计课程往往是枯燥乏味的，而本书根据教育理论，开发了一种新的教学方法，介绍如何通过多媒体编程来学习计算机程序设计，将趣味性和实用性融于枯燥的编程课程的教学当中。本书方法独特新颖，实例通俗易懂，可帮助读者快速入门并深入掌握编程技能，是一本理论联系实际的程序设计教程。
本书使用的编程语言是Python，这是因为Python强大实用（比如网站开发）、易于入门，计算机科学专业和非专业人士都可以学习。本书以Python数字多媒体编程为主线，从图像、声音、文本和电影这些学生已经熟知的内容开始，讲解它们的处理方法，其中穿插介绍计算机科学与程序设计的基础知识。在讲解知识点的时候也独具匠心，先介绍容易理解的基本概念，如赋值、顺序操作、迭代、条件式、函数定义等，逐步涉及抽象内容，如算法复杂度、程序效率、计算机组成、层次式分解、递归、面向对象等。本书还提供了大量例题和习题，方便教学。|,机械工业出版社,69.00元
Learning Python,Mark Lutz,|Amazon.com Review
The authors of Learning Python show you enough essentials of the Python scripting language to enable you to begin solving problems right away, then reveal more powerful aspects of the language one at a time. This approach is sure to appeal to programmers and system administrators who have urgent problems and a preference for learning by semi-guided experimentation.
First off, Learning Python shows the relationships among Python scripts and their interpreter (in a mostly platform-neutral way). Then, the authors address the mechanics of the language itself, providing illustrations of how Python conceives of numbers, strings, and other objects as well as the operators you use to work with them. Dictionaries, lists, tuples, and other data structures specific to Python receive plenty of attention including complete examples.
Authors Mark Lutz and David Ascher build on that fundamental information in their discussions of functions and modules, which evolve into coverage of namespaces, classes, and the object-oriented aspects of Python programming. There's also information on creating graphical user interfaces (GUIs) for Python applications with Tkinter.
In addition to its careful expository prose, Learning Python includes exercises that both test your Python skills and help reveal more elusive truths about the language. --This text refers to an out of print or unavailable edition of this title.
Review
As a book for programmers who want to learn Python, it does a very good job. The coverage is informative and well order; making it easy to find what you're looking for. Overall, if you do some work with Python, you will benefit from owning this book. " - Sam Smith, news@UK, March "This book is a good example of Python culture, in the clarity of its text as much as in the quality of its code. Anyhone working their way through it will have a solid foundation upon which to explore Python's potential. Highly recommended." - Ivan Uemilianin, CVu, October 2004 --This text refers to the Paperback edition.|,O'Reilly Media,USD 54.99
Think Python,Allen B. Downey,|Think Python is an introduction to Python programming for students with no programming experience. It starts with the most basic concepts of programming, and is carefully designed to define all terms when they are first used and to develop each new concept in a logical progression. Larger pieces, like recursion and object-oriented programming are divided into a sequence of smaller steps and introduced over the course of several chapters.|,O'Reilly Media,GBP 29.99
|Learn Python The Hard Way, 1st Edition|,Zed Shaw,|Learn Python The Hard Way is a book I wrote to teach programming to people who do not know how to code. It assumes you are probably a power user of your computer, and then takes you from nothing to programming simple games. After reading my book you should be ready for many of the other programming books out there.|,Lulu.com,$29.99
Selenium 2自动化测试实战,虫师,|《Selenium 2自动化测试实战——基于Python语言》共分 14 章。第 1 章是自动化测试相关基础知识的介绍；第 2 章到第 10 章是《Selenium 2自动化测试实战——基于Python语言》的重点，循 序渐进地介绍了自动化测试所用到的技术；第 11 章通过一个具体的项目综合运用了前面章节所介绍 的技术与技巧；第 12 章到第 14 章选取了当前最热门的技术进行了介绍，旨在扩展测试人员的综合技 术能力。 《Selenium 2自动化测试实战——基于Python语言》的写作目的并不是为了简单地告诉读者如何使用一个自动化测试工具，而是希望读者在学习
《Selenium 2自动化测试实战——基于Python语言》的内容后能够提高综合的技术高度与宽度，从而摆脱简单的手工测试，向高级测试工程师的道路 迈进。|,电子工业出版社,CNY 59.00
NumPy攻略,[印尼] Ivan Idris,|本书带领读者了解熟悉当下最流行的科学计算库NumPy的方方面面。书中不仅介绍了NumPy的安装、使用和各种相关概念，还介绍了如何利用这一最新的开源软件库，以尽可能接近传统数学语言的方式，编写可读性好、实现效率高和运行速度快的代码。最后还探究了几个和NumPy相关的科学计算项目。此外，本书将为你掌握NumPy数组和通用函数打下坚实的基础，也会通过实例教你用Matplotlib绘图，并了解和SciPy相关的项目。
本书将帮助你：
• 学习高级索引技术和线性代数知识
• 了解数组形状及图像大小的调整
• 探察广播机制和直方图
• 分析NumPy代码并用可视化的方式表示分析结果
• 用Cython为代码提速
• 使用数组接口共享数据
• 使用通用函数和互操作功能
• 学习Matplotlib以及经常和NumPy同时使用的SciPy|,人民邮电出版社,49.00
Python编程（第三版·英文影印版）,Mark Lutz,|《Python编程 第三版》已经成为Python用户的行业标准，且更加完善。第三版进行的更新反映了当前的最佳实践以及在语言的最新版本Python 2.5中引入的大量改变。
无论是新手还是老手，你都会发现这本经过彻底更新的书确实名副其实，它教给你编写代码的正确途径。它以清晰而简练的方式解释了Python语言的语法以及编程技巧，并辅以大量例子阐明正确的使用方法和通用特性。通过阅读这本全面的指南，你将学习到如何将Python运用到实际问题中，例如：
·用户图形界面编程
·并行处理
·网络应用程序
·Internet脚本编程
·数据库管理
从深入讨论核心概念开始，再到完整的程序，《Python编程 第三版》逐一覆盖这些领域。书中确有大型的程序示例，但只在你已经掌握了足够的知识，能够理解技术和代码后才会出现。
在学习过程中，你也会学到如何在实际规模的程序中使用Python——诸如面向对象编程和代码重用概念皆是贯穿全书的副题。如果你对Python 程序设计感兴趣，就需要这本O'Reilly经典书籍长伴你的左右。实践中的建议、代码的片断和程序设计模式，这些财富都可以在日常生活中得到应用——使你的生活更轻松更高效。|,东南大学出版社,138.00元
Python Tutorial,|Guido Van Rossum,Fred L. Drake, Jr (editor)|,最权威的 Python 教程，由 Python 作者 Guido van Rossum 主笔，有少许学院味道。中文电子版由刘鑫、李梦夷翻译。英文原稿网址：http:\/\/docs.python.org\/tut\/简体中文版网址：http:\/\/wiki.woodpecker.org.cn\/moin\/March_Liu\/PyTutorial,Iuniverse Inc,USD 12.95
Python UNIX和Linux系统管理指南,|基弗特 (Gift, Noab),琼斯 (Jones, Jeremy M.)|,|《Python UNIX和Linux系统管理指南》介绍了Python语言如何为管理uNIx和Linux服务器提供各种更加有效的任务处理方式。书中各章都提出了具体的管理问题，如并发或数据备份，然后通过Python示例提供了解决方案。通过《Python UNIX和Linux系统管理指南》，读者可以学习如何用Python开发自己的一套命令行工具来解决诸多问题。
作者建立了一个免费下载的Ubuntu虚拟机，其中包含《Python UNIX和Linux系统管理指南》的源代码和运行实例，也包括SNMP、IPython、SQLAlchemy及其他工具。通过《Python UNIX和Linux系统管理指南》，你可以发现Python在如下几个方面的作用：
读取文本文件并提取信息。
使用多线程和fork选项。
使用网络设备从一个进程获取另一个进程的信息。
创建可点击的、易于交互的GUl工具。
通过交互式SNMP编程实现监控大型主机集群。
掌握IPython shell，作为Bash、Korn或Z—Shell的替换或补充。
将云计算整合到基础设施中，编写Google App引擎的应用程序。
通过定制脚本解决独特数据备份的难题。
使用Djan90、SQLAlchemy和Storm ORM与数据库进行交互。
通过《Python UNIX和Linux系统管理指南》及其补充的虚拟机，你可以了解如何打包并部署Python应用程序和库，以及编写代码在类似的多个UNIXfH Linux平台上运行。|,机械工业出版社,65.00元
Head First Programming,|David Griffiths,Paul Barry|,|Looking for a reliable way to learn how to program on your own, without being overwhelmed by confusing concepts? "Head First Programming" introduces the core concepts of writing computer programs - variables, decisions, loops, functions, and objects - which apply regardless of the programming language. This book offers concrete examples and exercises in the dynamic and versatile Python language to demonstrate and reinforce these concepts. You can learn the basic tools to start writing the programs that interest you, and get a better understanding of what software can (and cannot) do. When you're finished, you'll have the necessary foundation to learn any programming language or tackle any software project you choose. With a focus on programming concepts, this book teaches you how to: understand the core features of all programming languages, including variables, statements, decisions, loops, expressions, and operators; reuse code with functions; use library code to save time and effort; select the best data structure to manage complex data; write programs that talk to the Web; share your data with other programs; and, write programs that test themselves and help you avoid embarrassing coding errors. We think your time is too valuable to waste struggling with new concepts. Using the latest research in cognitive science and learning theory to craft a multi-sensory learning experience, "Head First Programming" uses a visually rich format designed for the way your brain works, not a text-heavy approach that puts you to sleep.|,O'Reilly Media,USD 49.99
Python自然语言处理,|(英)伯德,(英)克莱因,(美)洛普|,|《Python自然语言处理(影印版)》提供了非常易学的自然语言处理入门介绍，该领域涵盖从文本和电子邮件预测过滤，到自动总结和翻译等多种语言处理技术。在《Python自然语言处理(影印版)》中，你将学会编写Python程序处理大量非结构化文本。你还将通过使用综合语言数据结构访问含有丰富注释的数据集，理解用于分析书面通信内容和结构的主要算法。
《Python自然语言处理》准备了充足的示例和练习，可以帮助你：
从非结构化文本中抽取信息，甚至猜测主题或识别“命名实体”；
分析文本语言结构，包括解析和语义分析；
访问流行的语言学数据库，包括WordNet和树库(treebank)；
从多种语言学和人工智能领域中提取的整合技巧。
《Python自然语言处理(影印版)》将帮助你学习运用Python编程语言和自然语言工具包(NLTK)获得实用的自然语言处理技能。如果对于开发Web应用、分析多语言新闻源或记录濒危语言感兴趣——即便只是想从程序员视角观察人类语言如何运作，你将发现《Python自然语言处理》是一本令人着迷且极为有用的好书。|,东南大学出版社,64.00元
学习PYTHON 第三版(英文影印版),(美国)(Lutz.M.)卢茨,|Python是一种理想的独立程序和脚本程序语言，具有可移植、强大和易用的特点。无论您是初学程序设计还是初学Python，都能通过《学习 Python 第三版》快速而高效地掌握Python核心语言的基础。通读《学习Python 第三版》，您可以获得足够多的知识，能够学习将Python用于您所选择的任何应用领域。.
《学习Python（第三版）》基于作者Mark Lutz在过去10年间讲授培训课程所使用的资料。除了大量的注解插图和每章总结外，作者还为每章加入了独特的一节，通过实际练习和复习提问的方式，让您在学习过程中练习新的技能，测验对概念的理解程度。
类型和运算——深入Python内置对象类型：数值、列表、字典及其他。
语句和语法——用来创建和处理对象的Python代码以及Python通用语法模型。
函数——Python的基本结构化和代码重用工具。..
模块——将语句、函数和其他工具组织为更大的组件。
类和面向对象编程——可选的Python面向对象程序设计工具，用于定制和重用结构化代码。
异常和工具——处理语句和模块异常，并介绍编写较大型程序所使用的开发工具。
有关即将发布的Python 3.0的一些讨论。
《学习Python 第三版》为您理解Python语言提供了完整而又深入的介绍，帮助您领会在以后的工作中会遇到的应用级Python实例。如果您准备好探索Google和 YouTube究竟从Python中发现了什么，那么《学习Python 第三版》就是一个最好的开始。|,东南大学出版社,88.00元
Python Cookbook,|Alex Martelli,Anna Ravenscroft,David Ascher|,|Portable, powerful, and a breeze to use, Python is the popular open source object-oriented programming language used for both standalone programs and scripting applications.  It is now being used by an increasing number of major organizations, including NASA and Google. Updated for Python 2.4, The Python Cookbook, 2nd Edition offers a wealth of useful code for all Python programmers, not just advanced practitioners.  Like its predecessor, the new edition provides solutions to problems that Python programmers face everyday. It now includes over 200 recipes that range from simple tasks, such as working with dictionaries and list comprehensions, to complex tasks, such as monitoring a network and building a templating system. This revised version also includes new chapters on topics such as time, money, and metaprogramming. Here's a list of additional topics covered:  * Manipulating text * Searching and sorting * Working with files and the filesystem * Object-oriented programming * Dealing with threads and processes * System administration * Interacting with databases * Creating user interfaces * Network and web programming * Processing XML * Distributed programming * Debugging and testing Another advantage of The Python Cookbook, 2nd Edition is its trio of authors--three well-known Python programming experts, who are highly visible on email lists and in newsgroups, and speak often at Python conferences.  With scores of practical examples and pertinent background information, The Python Cookbook, 2nd Edition is the one source you need if you're looking to build efficient, flexible, scalable, and well-integrated systems.|,O'Reilly Media,USD 49.95
Python编程快速上手,斯维加特 (Al Sweigart),|如今，人们面临的大多数任务都可以通过编写计算机软件来完成。Python是一种解释型、面向对象、动态数据类型的高级程序设计语言。通过Python编程，我们能够解决现实生活中的很多任务。
本书是一本面向实践的Python编程实用指南。本书的目的，不仅是介绍Python语言的基础知识，而且还通过项目实践教会读者如何应用这些知识和技能。本书的首部分介绍了基本Python编程概念，第二部分介绍了一些不同的任务，通过编写Python程序，可以让计算机自动完成它们。第二部分的每一章都有一些项目程序，供读者学习。每章的末尾还提供了一些习题和深入的实践项目，帮助读者巩固所学的知识。附录部分提供了所有习题的解答。
本书适合任何想要通过Python学习编程的读者，尤其适合缺乏编程基础的初学者。通过阅读本书，读者将能利用强大的编程语言和工具，并且会体会到Python编程的快乐。|,人民邮电出版社,CNY 69.00
Fluent Python,Luciano Ramalho,|Learn how to write idiomatic, effective Python code by leveraging its best features. Python's simplicity quickly lets you become productive with it, but this often means you aren’t using everything the language has to offer. By taking you through Python’s key language features and libraries, this practical book shows you how to make your code shorter, faster, and more readable all at the same time—what experts consider Pythonic.
Many programmers who learn Python basics fall into the trap of reinventing the wheel because of past experience in other languages, and try to bend the language to patterns that don't really apply to it. Author Luciano Ramalho, a Python Software Foundation member and Python programmer for 15 years, helps you drop your accent from another language so you can code Python fluently.
•Learn practical applications of generators for database processing
•Rethink some design patterns in a Python context
•Examine attribute descriptors and when to use them: the key to ORMs
•Explore Pythonic objects: protocols versus interfaces, abstract base classes and multiple inheritance|,O'Reilly Media,USD 39.99
Python金融大数据分析,[德] 伊夫·希尔皮斯科,|唯一一本详细讲解使用Python分析处理金融大数据的专业图书；金融应用开发领域从业人员必读。
Python凭借其简单、易读、可扩展性以及拥有巨大而活跃的科学计算社区，在需要分析、处理大量数据的金融行业得到了广泛而迅速的应用，并且成为该行业开发核心应用的首选编程语言。《Python金融大数据分析》提供了使用Python进行数据分析，以及开发相关应用程序的技巧和工具。
《Python金融大数据分析》总计分为3部分，共19章，第1部分介绍了Python在金融学中的应用，其内容涵盖了Python用于金融行业的原因、Python的基础架构和工具，以及Python在计量金融学中的一些具体入门实例；第2部分介绍了金融分析和应用程序开发中最重要的Python库、技术和方法，其内容涵盖了Python的数据类型和结构、用matplotlib进行数据可视化、金融时间序列数据处理、高性能输入\/输出操作、高性能的Python技术和库、金融学中需要的多种数学工具、随机数生成和随机过程模拟、Python统计学应用、Python和Excel的集成、Python面向对象编程和GUI的开发、Python与Web技术的集成，以及基于Web应用和Web服务的开发；第3部分关注的是蒙特卡洛模拟期权与衍生品定价实际应用的开发工作，其内容涵盖了估值框架的介绍、金融模型的模拟、衍生品的估值、投资组合的估值、波动率期权等知识。
《Python金融大数据分析》适合对使用Python进行大数据分析、处理感兴趣的金融行业开发人员阅读。|,人民邮电出版社,CNY 99.00
Python参考手册（第4版）,David M.Beazley,|本书是权威的Python语言参考指南，内容涉及核心Python语言和Python库的最重要部分。本书内容简洁扼要、可读性强，书中还包括了一些没有在Python官方文档或其他资料中出现过的一些高级的主题。
这一版在内容上进行了全面更新，介绍了Python 2.6和Python 3新引入的编程语言特性和库模块，同时还分析了Python程序员面临的如下难题：是应继续使用现有的Python代码，还是应制定计划将其移植到Python 3？|,人民邮电出版社,89.00元
编写高质量代码：改善Python程序的91个建议,|张颖,赖勇浩|,|在通往“Python技术殿堂”的路上，本书将为你编写健壮、优雅、高质量的Python代码提供切实帮助！内容全部由Python编码的最佳实践组成，从基本原则、惯用法、语法、库、设计模式、内部机制、开发工具和性能优化8个方面深入探讨了编写高质量Python代码的技巧与禁忌，一共总结出91条宝贵的建议。每条建议对应Python程序员可能会遇到的一个问题。本书不仅以建议的方式从正反两方面给出了被实践证明为十分优秀的解决方案或非常糟糕的解决方案，而且分析了问题产生的根源，会使人有一种醍醐灌顶的感觉，豁然开朗。
《编写高质量代码：改善Python程序的91个建议》针对每个问题所选择的应用场景都非常典型，给出的建议也都与实践紧密结合。书中的每一条建议都可能在你的下一行代码、下一个应用或下一个项目中显露锋芒。建议你将本书搁置在手边，随时查阅，相信这么做一定能使你的学习和开发工作事半功倍。|,机械工业出版社,59.00元
流畅的Python,[巴西] Luciano Ramalho,|【技术大咖推荐】
“很荣幸担任这本优秀图书的技术审校。这本书能帮助很多中级Python程序员掌握这门语言，我也从中学到了相当多的知识！”——Alex Martelli，Python软件基金会成员
“对于想要扩充知识的中级和高级Python程序员来说，这本书是充满了实用编程技巧的宝藏。”——Daniel Greenfeld和Audrey Roy Greenfeld，Two Scoops of Django作者
【本书特色】
本书由奋战在Python开发一线近20年的Luciano Ramalho执笔，Victor Stinner、Alex Martelli等Python大咖担纲技术审稿人，从语言设计层面剖析编程细节，兼顾Python 3和Python 2，告诉你Python中不亲自动手实践就无法理解的语言陷阱成因和解决之道，教你写出风格地道的Python代码。
●	Python数据模型：理解为什么特殊方法是对象行为一致的关键。
●	数据结构：充分利用内置类型，理解Unicode文本和字节二象性。
●	把函数视作对象：把Python函数视作一等对象，并了解这一点对流行的设计模式的影响。
●	面向对象习惯用法：通过构建类学习引用、可变性、接口、运算符重载和多重继承。
●	控制流程：学习使用上下文管理器、生成器、协程，以及通过concurrent.futures和asyncio包实现的并发。
●	元编程：理解特性、描述符、类装饰器和元类的工作原理。
【主要内容】
本书致力于帮助Python开发人员挖掘这门语言及相关程序库的优秀特性，避免重复劳动，同时写出简洁、流畅、易读、易维护，并且具有地道Python风格的代码。本书尤其深入探讨了Python语言的高级用法，涵盖数据结构、Python风格的对象、并行与并发，以及元编程等不同的方面。
本书适合中高级Python软件开发人员阅读参考。
【译者简介】
安道
专注于现代计算机技术的自由翻译，译有《Flask Web 开发》《Python 网络编程攻略》《Ruby on Rails 教程》等书。
个人网站：http:\/\/about.ac\/。
吴珂
现为Airbnb公司软件工程师，所在团队主要负责开发和维护各类可伸缩、高性能服务，并在Airbnb内推广面向服务的系统架构。在分布式系统、云存储服务和跨平台SDK开发，以及大规模数据处理等方面有多年经验。|,人民邮电出版社,139元
Python计算与编程实践,|（美）Mark Guzdial,（美）Barbara Ericson|,|计算机程序设计课程往往是枯燥乏味的，而本书根据教育理论，开发了一种新的教学方法，介绍如何通过多媒体编程来学习计算机程序设计，将趣味性和实用性融于枯燥的编程课程的教学当中。本书方法独特新颖，实例通俗易懂，可帮助读者快速入门并深入掌握编程技能，是一本理论联系实际的程序设计教程。
本书使用的编程语言是Python，这是因为Python强大实用（比如网站开发）、易于入门，计算机科学专业和非专业人士都可以学习。本书以Python数字多媒体编程为主线，从图像、声音、文本和电影这些学生已经熟知的内容开始，讲解它们的处理方法，其中穿插介绍计算机科学与程序设计的基础知识。在讲解知识点的时候也独具匠心，先介绍容易理解的基本概念，如赋值、顺序操作、迭代、条件式、函数定义等，逐步涉及抽象内容，如算法复杂度、程序效率、计算机组成、层次式分解、递归、面向对象等。本书还提供了大量例题和习题，方便教学。|,机械工业出版社,69.00元
Learning Python,Mark Lutz,|Amazon.com Review
The authors of Learning Python show you enough essentials of the Python scripting language to enable you to begin solving problems right away, then reveal more powerful aspects of the language one at a time. This approach is sure to appeal to programmers and system administrators who have urgent problems and a preference for learning by semi-guided experimentation.
First off, Learning Python shows the relationships among Python scripts and their interpreter (in a mostly platform-neutral way). Then, the authors address the mechanics of the language itself, providing illustrations of how Python conceives of numbers, strings, and other objects as well as the operators you use to work with them. Dictionaries, lists, tuples, and other data structures specific to Python receive plenty of attention including complete examples.
Authors Mark Lutz and David Ascher build on that fundamental information in their discussions of functions and modules, which evolve into coverage of namespaces, classes, and the object-oriented aspects of Python programming. There's also information on creating graphical user interfaces (GUIs) for Python applications with Tkinter.
In addition to its careful expository prose, Learning Python includes exercises that both test your Python skills and help reveal more elusive truths about the language. --This text refers to an out of print or unavailable edition of this title.
Review
As a book for programmers who want to learn Python, it does a very good job. The coverage is informative and well order; making it easy to find what you're looking for. Overall, if you do some work with Python, you will benefit from owning this book. " - Sam Smith, news@UK, March "This book is a good example of Python culture, in the clarity of its text as much as in the quality of its code. Anyhone working their way through it will have a solid foundation upon which to explore Python's potential. Highly recommended." - Ivan Uemilianin, CVu, October 2004 --This text refers to the Paperback edition.|,O'Reilly Media,USD 54.99
Think Python,Allen B. Downey,|Think Python is an introduction to Python programming for students with no programming experience. It starts with the most basic concepts of programming, and is carefully designed to define all terms when they are first used and to develop each new concept in a logical progression. Larger pieces, like recursion and object-oriented programming are divided into a sequence of smaller steps and introduced over the course of several chapters.|,O'Reilly Media,GBP 29.99
|Learn Python The Hard Way, 1st Edition|,Zed Shaw,|Learn Python The Hard Way is a book I wrote to teach programming to people who do not know how to code. It assumes you are probably a power user of your computer, and then takes you from nothing to programming simple games. After reading my book you should be ready for many of the other programming books out there.|,Lulu.com,$29.99
Selenium 2自动化测试实战,虫师,|《Selenium 2自动化测试实战——基于Python语言》共分 14 章。第 1 章是自动化测试相关基础知识的介绍；第 2 章到第 10 章是《Selenium 2自动化测试实战——基于Python语言》的重点，循 序渐进地介绍了自动化测试所用到的技术；第 11 章通过一个具体的项目综合运用了前面章节所介绍 的技术与技巧；第 12 章到第 14 章选取了当前最热门的技术进行了介绍，旨在扩展测试人员的综合技 术能力。 《Selenium 2自动化测试实战——基于Python语言》的写作目的并不是为了简单地告诉读者如何使用一个自动化测试工具，而是希望读者在学习
《Selenium 2自动化测试实战——基于Python语言》的内容后能够提高综合的技术高度与宽度，从而摆脱简单的手工测试，向高级测试工程师的道路 迈进。|,电子工业出版社,CNY 59.00
NumPy攻略,[印尼] Ivan Idris,|本书带领读者了解熟悉当下最流行的科学计算库NumPy的方方面面。书中不仅介绍了NumPy的安装、使用和各种相关概念，还介绍了如何利用这一最新的开源软件库，以尽可能接近传统数学语言的方式，编写可读性好、实现效率高和运行速度快的代码。最后还探究了几个和NumPy相关的科学计算项目。此外，本书将为你掌握NumPy数组和通用函数打下坚实的基础，也会通过实例教你用Matplotlib绘图，并了解和SciPy相关的项目。
本书将帮助你：
• 学习高级索引技术和线性代数知识
• 了解数组形状及图像大小的调整
• 探察广播机制和直方图
• 分析NumPy代码并用可视化的方式表示分析结果
• 用Cython为代码提速
• 使用数组接口共享数据
• 使用通用函数和互操作功能
• 学习Matplotlib以及经常和NumPy同时使用的SciPy|,人民邮电出版社,49.00
Python编程（第三版·英文影印版）,Mark Lutz,|《Python编程 第三版》已经成为Python用户的行业标准，且更加完善。第三版进行的更新反映了当前的最佳实践以及在语言的最新版本Python 2.5中引入的大量改变。
无论是新手还是老手，你都会发现这本经过彻底更新的书确实名副其实，它教给你编写代码的正确途径。它以清晰而简练的方式解释了Python语言的语法以及编程技巧，并辅以大量例子阐明正确的使用方法和通用特性。通过阅读这本全面的指南，你将学习到如何将Python运用到实际问题中，例如：
·用户图形界面编程
·并行处理
·网络应用程序
·Internet脚本编程
·数据库管理
从深入讨论核心概念开始，再到完整的程序，《Python编程 第三版》逐一覆盖这些领域。书中确有大型的程序示例，但只在你已经掌握了足够的知识，能够理解技术和代码后才会出现。
在学习过程中，你也会学到如何在实际规模的程序中使用Python——诸如面向对象编程和代码重用概念皆是贯穿全书的副题。如果你对Python 程序设计感兴趣，就需要这本O'Reilly经典书籍长伴你的左右。实践中的建议、代码的片断和程序设计模式，这些财富都可以在日常生活中得到应用——使你的生活更轻松更高效。|,东南大学出版社,138.00元
Python Tutorial,|Guido Van Rossum,Fred L. Drake, Jr (editor)|,最权威的 Python 教程，由 Python 作者 Guido van Rossum 主笔，有少许学院味道。中文电子版由刘鑫、李梦夷翻译。英文原稿网址：http:\/\/docs.python.org\/tut\/简体中文版网址：http:\/\/wiki.woodpecker.org.cn\/moin\/March_Liu\/PyTutorial,Iuniverse Inc,USD 12.95
Python UNIX和Linux系统管理指南,|基弗特 (Gift, Noab),琼斯 (Jones, Jeremy M.)|,|《Python UNIX和Linux系统管理指南》介绍了Python语言如何为管理uNIx和Linux服务器提供各种更加有效的任务处理方式。书中各章都提出了具体的管理问题，如并发或数据备份，然后通过Python示例提供了解决方案。通过《Python UNIX和Linux系统管理指南》，读者可以学习如何用Python开发自己的一套命令行工具来解决诸多问题。
作者建立了一个免费下载的Ubuntu虚拟机，其中包含《Python UNIX和Linux系统管理指南》的源代码和运行实例，也包括SNMP、IPython、SQLAlchemy及其他工具。通过《Python UNIX和Linux系统管理指南》，你可以发现Python在如下几个方面的作用：
读取文本文件并提取信息。
使用多线程和fork选项。
使用网络设备从一个进程获取另一个进程的信息。
创建可点击的、易于交互的GUl工具。
通过交互式SNMP编程实现监控大型主机集群。
掌握IPython shell，作为Bash、Korn或Z—Shell的替换或补充。
将云计算整合到基础设施中，编写Google App引擎的应用程序。
通过定制脚本解决独特数据备份的难题。
使用Djan90、SQLAlchemy和Storm ORM与数据库进行交互。
通过《Python UNIX和Linux系统管理指南》及其补充的虚拟机，你可以了解如何打包并部署Python应用程序和库，以及编写代码在类似的多个UNIXfH Linux平台上运行。|,机械工业出版社,65.00元
Foundations of Python Network Programming,|John Goerzen,Tim Bower,Brandon Rhodes|,|This second edition of Foundations of Python Network Programming targets Python 2.5 through Python 2.7, the most popular production versions of the language. Python has made great strides since Apress released the first edition of this book back in the days of Python 2.3. The advances required new chapters to be written from the ground up, and others to be extensively revised. You will learn fundamentals like IP, TCP, DNS and SSL by using working Python programs; you will also be able to familiarize yourself with infrastructure components like memcached and message queues. You can also delve into Network server designs, and compare threaded approaches with asynchronous event-based solutions. But the biggest change is this edition's expanded treatment of the web. The HTTP protocol is covered in extensive detail, with each feature accompanied by sample Python code. You can use your HTTP protocol expertise by studying an entire chapter on screen scraping and you can then test lxml and BeautifulSoup against a real-world web site. The chapter on web application programming now covers both the WSGI standard for component interoperability, as well as modern web frameworks like Django. Finally, all of the old favorites from the first edition are back: E-mail protocols like SMTP, POP, and IMAP get full treatment, as does XML-RPC. You can still learn how to code Python network programs using the Telnet and FTP protocols, but you are likely to appreciate the power of more modern alternatives like the paramiko SSH2 library. If you are a Python programmer who needs to learn the network, this is the book that you want by your side. What you'll learn * Understand low level networking * Handle sending and receiving email including composing and decoding emails, SMTP, POP and IMAP * Program the lower levels of web application programming such as FastCGI and WSGI and HTTP itself * Learn how to use memcached and message qeues using Python * Access web services using Python * Master multitasking with threads, forking, and asynchronous communication Who this book is for This book will be of interest to python programmers who need to program networked applications using Python. From web application developers, to systems integrators, to system administrators--this book has everything you need to know. Table of Contents * Introduction to Client\/Server Networking * UDP * TCP * Socket Names and DNS * Network Data and Network Errors * TLS and SSL * Server Architecture * Caches, Message Queues, and Map-Reduce * HTTP * Screen Scraping * Web Applications * E-mail Composition and Decoding * SMTP * POP * IMAP * Telnet and SSH * FTP * RPC|,Apress,USD 54.99
Python自然语言处理,|(英)伯德,(英)克莱因,(美)洛普|,|《Python自然语言处理(影印版)》提供了非常易学的自然语言处理入门介绍，该领域涵盖从文本和电子邮件预测过滤，到自动总结和翻译等多种语言处理技术。在《Python自然语言处理(影印版)》中，你将学会编写Python程序处理大量非结构化文本。你还将通过使用综合语言数据结构访问含有丰富注释的数据集，理解用于分析书面通信内容和结构的主要算法。
《Python自然语言处理》准备了充足的示例和练习，可以帮助你：
从非结构化文本中抽取信息，甚至猜测主题或识别“命名实体”；
分析文本语言结构，包括解析和语义分析；
访问流行的语言学数据库，包括WordNet和树库(treebank)；
从多种语言学和人工智能领域中提取的整合技巧。
《Python自然语言处理(影印版)》将帮助你学习运用Python编程语言和自然语言工具包(NLTK)获得实用的自然语言处理技能。如果对于开发Web应用、分析多语言新闻源或记录濒危语言感兴趣——即便只是想从程序员视角观察人类语言如何运作，你将发现《Python自然语言处理》是一本令人着迷且极为有用的好书。|,东南大学出版社,64.00元
学习PYTHON 第三版(英文影印版),(美国)(Lutz.M.)卢茨,|Python是一种理想的独立程序和脚本程序语言，具有可移植、强大和易用的特点。无论您是初学程序设计还是初学Python，都能通过《学习 Python 第三版》快速而高效地掌握Python核心语言的基础。通读《学习Python 第三版》，您可以获得足够多的知识，能够学习将Python用于您所选择的任何应用领域。.
《学习Python（第三版）》基于作者Mark Lutz在过去10年间讲授培训课程所使用的资料。除了大量的注解插图和每章总结外，作者还为每章加入了独特的一节，通过实际练习和复习提问的方式，让您在学习过程中练习新的技能，测验对概念的理解程度。
类型和运算——深入Python内置对象类型：数值、列表、字典及其他。
语句和语法——用来创建和处理对象的Python代码以及Python通用语法模型。
函数——Python的基本结构化和代码重用工具。..
模块——将语句、函数和其他工具组织为更大的组件。
类和面向对象编程——可选的Python面向对象程序设计工具，用于定制和重用结构化代码。
异常和工具——处理语句和模块异常，并介绍编写较大型程序所使用的开发工具。
有关即将发布的Python 3.0的一些讨论。
《学习Python 第三版》为您理解Python语言提供了完整而又深入的介绍，帮助您领会在以后的工作中会遇到的应用级Python实例。如果您准备好探索Google和 YouTube究竟从Python中发现了什么，那么《学习Python 第三版》就是一个最好的开始。|,东南大学出版社,88.00元
Python Cookbook,|Alex Martelli,Anna Ravenscroft,David Ascher|,|Portable, powerful, and a breeze to use, Python is the popular open source object-oriented programming language used for both standalone programs and scripting applications.  It is now being used by an increasing number of major organizations, including NASA and Google. Updated for Python 2.4, The Python Cookbook, 2nd Edition offers a wealth of useful code for all Python programmers, not just advanced practitioners.  Like its predecessor, the new edition provides solutions to problems that Python programmers face everyday. It now includes over 200 recipes that range from simple tasks, such as working with dictionaries and list comprehensions, to complex tasks, such as monitoring a network and building a templating system. This revised version also includes new chapters on topics such as time, money, and metaprogramming. Here's a list of additional topics covered:  * Manipulating text * Searching and sorting * Working with files and the filesystem * Object-oriented programming * Dealing with threads and processes * System administration * Interacting with databases * Creating user interfaces * Network and web programming * Processing XML * Distributed programming * Debugging and testing Another advantage of The Python Cookbook, 2nd Edition is its trio of authors--three well-known Python programming experts, who are highly visible on email lists and in newsgroups, and speak often at Python conferences.  With scores of practical examples and pertinent background information, The Python Cookbook, 2nd Edition is the one source you need if you're looking to build efficient, flexible, scalable, and well-integrated systems.|,O'Reilly Media,USD 49.95
Python编程快速上手,斯维加特 (Al Sweigart),|如今，人们面临的大多数任务都可以通过编写计算机软件来完成。Python是一种解释型、面向对象、动态数据类型的高级程序设计语言。通过Python编程，我们能够解决现实生活中的很多任务。
本书是一本面向实践的Python编程实用指南。本书的目的，不仅是介绍Python语言的基础知识，而且还通过项目实践教会读者如何应用这些知识和技能。本书的首部分介绍了基本Python编程概念，第二部分介绍了一些不同的任务，通过编写Python程序，可以让计算机自动完成它们。第二部分的每一章都有一些项目程序，供读者学习。每章的末尾还提供了一些习题和深入的实践项目，帮助读者巩固所学的知识。附录部分提供了所有习题的解答。
本书适合任何想要通过Python学习编程的读者，尤其适合缺乏编程基础的初学者。通过阅读本书，读者将能利用强大的编程语言和工具，并且会体会到Python编程的快乐。|,人民邮电出版社,CNY 69.00
Fluent Python,Luciano Ramalho,|Learn how to write idiomatic, effective Python code by leveraging its best features. Python's simplicity quickly lets you become productive with it, but this often means you aren’t using everything the language has to offer. By taking you through Python’s key language features and libraries, this practical book shows you how to make your code shorter, faster, and more readable all at the same time—what experts consider Pythonic.
Many programmers who learn Python basics fall into the trap of reinventing the wheel because of past experience in other languages, and try to bend the language to patterns that don't really apply to it. Author Luciano Ramalho, a Python Software Foundation member and Python programmer for 15 years, helps you drop your accent from another language so you can code Python fluently.
•Learn practical applications of generators for database processing
•Rethink some design patterns in a Python context
•Examine attribute descriptors and when to use them: the key to ORMs
•Explore Pythonic objects: protocols versus interfaces, abstract base classes and multiple inheritance|,O'Reilly Media,USD 39.99
Python金融大数据分析,[德] 伊夫·希尔皮斯科,|唯一一本详细讲解使用Python分析处理金融大数据的专业图书；金融应用开发领域从业人员必读。
Python凭借其简单、易读、可扩展性以及拥有巨大而活跃的科学计算社区，在需要分析、处理大量数据的金融行业得到了广泛而迅速的应用，并且成为该行业开发核心应用的首选编程语言。《Python金融大数据分析》提供了使用Python进行数据分析，以及开发相关应用程序的技巧和工具。
《Python金融大数据分析》总计分为3部分，共19章，第1部分介绍了Python在金融学中的应用，其内容涵盖了Python用于金融行业的原因、Python的基础架构和工具，以及Python在计量金融学中的一些具体入门实例；第2部分介绍了金融分析和应用程序开发中最重要的Python库、技术和方法，其内容涵盖了Python的数据类型和结构、用matplotlib进行数据可视化、金融时间序列数据处理、高性能输入\/输出操作、高性能的Python技术和库、金融学中需要的多种数学工具、随机数生成和随机过程模拟、Python统计学应用、Python和Excel的集成、Python面向对象编程和GUI的开发、Python与Web技术的集成，以及基于Web应用和Web服务的开发；第3部分关注的是蒙特卡洛模拟期权与衍生品定价实际应用的开发工作，其内容涵盖了估值框架的介绍、金融模型的模拟、衍生品的估值、投资组合的估值、波动率期权等知识。
《Python金融大数据分析》适合对使用Python进行大数据分析、处理感兴趣的金融行业开发人员阅读。|,人民邮电出版社,CNY 99.00
Python参考手册（第4版）,David M.Beazley,|本书是权威的Python语言参考指南，内容涉及核心Python语言和Python库的最重要部分。本书内容简洁扼要、可读性强，书中还包括了一些没有在Python官方文档或其他资料中出现过的一些高级的主题。
这一版在内容上进行了全面更新，介绍了Python 2.6和Python 3新引入的编程语言特性和库模块，同时还分析了Python程序员面临的如下难题：是应继续使用现有的Python代码，还是应制定计划将其移植到Python 3？|,人民邮电出版社,89.00元
编写高质量代码：改善Python程序的91个建议,|张颖,赖勇浩|,|在通往“Python技术殿堂”的路上，本书将为你编写健壮、优雅、高质量的Python代码提供切实帮助！内容全部由Python编码的最佳实践组成，从基本原则、惯用法、语法、库、设计模式、内部机制、开发工具和性能优化8个方面深入探讨了编写高质量Python代码的技巧与禁忌，一共总结出91条宝贵的建议。每条建议对应Python程序员可能会遇到的一个问题。本书不仅以建议的方式从正反两方面给出了被实践证明为十分优秀的解决方案或非常糟糕的解决方案，而且分析了问题产生的根源，会使人有一种醍醐灌顶的感觉，豁然开朗。
《编写高质量代码：改善Python程序的91个建议》针对每个问题所选择的应用场景都非常典型，给出的建议也都与实践紧密结合。书中的每一条建议都可能在你的下一行代码、下一个应用或下一个项目中显露锋芒。建议你将本书搁置在手边，随时查阅，相信这么做一定能使你的学习和开发工作事半功倍。|,机械工业出版社,59.00元
流畅的Python,[巴西] Luciano Ramalho,|【技术大咖推荐】
“很荣幸担任这本优秀图书的技术审校。这本书能帮助很多中级Python程序员掌握这门语言，我也从中学到了相当多的知识！”——Alex Martelli，Python软件基金会成员
“对于想要扩充知识的中级和高级Python程序员来说，这本书是充满了实用编程技巧的宝藏。”——Daniel Greenfeld和Audrey Roy Greenfeld，Two Scoops of Django作者
【本书特色】
本书由奋战在Python开发一线近20年的Luciano Ramalho执笔，Victor Stinner、Alex Martelli等Python大咖担纲技术审稿人，从语言设计层面剖析编程细节，兼顾Python 3和Python 2，告诉你Python中不亲自动手实践就无法理解的语言陷阱成因和解决之道，教你写出风格地道的Python代码。
●	Python数据模型：理解为什么特殊方法是对象行为一致的关键。
●	数据结构：充分利用内置类型，理解Unicode文本和字节二象性。
●	把函数视作对象：把Python函数视作一等对象，并了解这一点对流行的设计模式的影响。
●	面向对象习惯用法：通过构建类学习引用、可变性、接口、运算符重载和多重继承。
●	控制流程：学习使用上下文管理器、生成器、协程，以及通过concurrent.futures和asyncio包实现的并发。
●	元编程：理解特性、描述符、类装饰器和元类的工作原理。
【主要内容】
本书致力于帮助Python开发人员挖掘这门语言及相关程序库的优秀特性，避免重复劳动，同时写出简洁、流畅、易读、易维护，并且具有地道Python风格的代码。本书尤其深入探讨了Python语言的高级用法，涵盖数据结构、Python风格的对象、并行与并发，以及元编程等不同的方面。
本书适合中高级Python软件开发人员阅读参考。
【译者简介】
安道
专注于现代计算机技术的自由翻译，译有《Flask Web 开发》《Python 网络编程攻略》《Ruby on Rails 教程》等书。
个人网站：http:\/\/about.ac\/。
吴珂
现为Airbnb公司软件工程师，所在团队主要负责开发和维护各类可伸缩、高性能服务，并在Airbnb内推广面向服务的系统架构。在分布式系统、云存储服务和跨平台SDK开发，以及大规模数据处理等方面有多年经验。|,人民邮电出版社,139元
Python计算与编程实践,|（美）Mark Guzdial,（美）Barbara Ericson|,|计算机程序设计课程往往是枯燥乏味的，而本书根据教育理论，开发了一种新的教学方法，介绍如何通过多媒体编程来学习计算机程序设计，将趣味性和实用性融于枯燥的编程课程的教学当中。本书方法独特新颖，实例通俗易懂，可帮助读者快速入门并深入掌握编程技能，是一本理论联系实际的程序设计教程。
本书使用的编程语言是Python，这是因为Python强大实用（比如网站开发）、易于入门，计算机科学专业和非专业人士都可以学习。本书以Python数字多媒体编程为主线，从图像、声音、文本和电影这些学生已经熟知的内容开始，讲解它们的处理方法，其中穿插介绍计算机科学与程序设计的基础知识。在讲解知识点的时候也独具匠心，先介绍容易理解的基本概念，如赋值、顺序操作、迭代、条件式、函数定义等，逐步涉及抽象内容，如算法复杂度、程序效率、计算机组成、层次式分解、递归、面向对象等。本书还提供了大量例题和习题，方便教学。|,机械工业出版社,69.00元
Learning Python,Mark Lutz,|Amazon.com Review
The authors of Learning Python show you enough essentials of the Python scripting language to enable you to begin solving problems right away, then reveal more powerful aspects of the language one at a time. This approach is sure to appeal to programmers and system administrators who have urgent problems and a preference for learning by semi-guided experimentation.
First off, Learning Python shows the relationships among Python scripts and their interpreter (in a mostly platform-neutral way). Then, the authors address the mechanics of the language itself, providing illustrations of how Python conceives of numbers, strings, and other objects as well as the operators you use to work with them. Dictionaries, lists, tuples, and other data structures specific to Python receive plenty of attention including complete examples.
Authors Mark Lutz and David Ascher build on that fundamental information in their discussions of functions and modules, which evolve into coverage of namespaces, classes, and the object-oriented aspects of Python programming. There's also information on creating graphical user interfaces (GUIs) for Python applications with Tkinter.
In addition to its careful expository prose, Learning Python includes exercises that both test your Python skills and help reveal more elusive truths about the language. --This text refers to an out of print or unavailable edition of this title.
Review
As a book for programmers who want to learn Python, it does a very good job. The coverage is informative and well order; making it easy to find what you're looking for. Overall, if you do some work with Python, you will benefit from owning this book. " - Sam Smith, news@UK, March "This book is a good example of Python culture, in the clarity of its text as much as in the quality of its code. Anyhone working their way through it will have a solid foundation upon which to explore Python's potential. Highly recommended." - Ivan Uemilianin, CVu, October 2004 --This text refers to the Paperback edition.|,O'Reilly Media,USD 54.99
Think Python,Allen B. Downey,|Think Python is an introduction to Python programming for students with no programming experience. It starts with the most basic concepts of programming, and is carefully designed to define all terms when they are first used and to develop each new concept in a logical progression. Larger pieces, like recursion and object-oriented programming are divided into a sequence of smaller steps and introduced over the course of several chapters.|,O'Reilly Media,GBP 29.99
|Learn Python The Hard Way, 1st Edition|,Zed Shaw,|Learn Python The Hard Way is a book I wrote to teach programming to people who do not know how to code. It assumes you are probably a power user of your computer, and then takes you from nothing to programming simple games. After reading my book you should be ready for many of the other programming books out there.|,Lulu.com,$29.99
Selenium 2自动化测试实战,虫师,|《Selenium 2自动化测试实战——基于Python语言》共分 14 章。第 1 章是自动化测试相关基础知识的介绍；第 2 章到第 10 章是《Selenium 2自动化测试实战——基于Python语言》的重点，循 序渐进地介绍了自动化测试所用到的技术；第 11 章通过一个具体的项目综合运用了前面章节所介绍 的技术与技巧；第 12 章到第 14 章选取了当前最热门的技术进行了介绍，旨在扩展测试人员的综合技 术能力。 《Selenium 2自动化测试实战——基于Python语言》的写作目的并不是为了简单地告诉读者如何使用一个自动化测试工具，而是希望读者在学习
《Selenium 2自动化测试实战——基于Python语言》的内容后能够提高综合的技术高度与宽度，从而摆脱简单的手工测试，向高级测试工程师的道路 迈进。|,电子工业出版社,CNY 59.00
NumPy攻略,[印尼] Ivan Idris,|本书带领读者了解熟悉当下最流行的科学计算库NumPy的方方面面。书中不仅介绍了NumPy的安装、使用和各种相关概念，还介绍了如何利用这一最新的开源软件库，以尽可能接近传统数学语言的方式，编写可读性好、实现效率高和运行速度快的代码。最后还探究了几个和NumPy相关的科学计算项目。此外，本书将为你掌握NumPy数组和通用函数打下坚实的基础，也会通过实例教你用Matplotlib绘图，并了解和SciPy相关的项目。
本书将帮助你：
• 学习高级索引技术和线性代数知识
• 了解数组形状及图像大小的调整
• 探察广播机制和直方图
• 分析NumPy代码并用可视化的方式表示分析结果
• 用Cython为代码提速
• 使用数组接口共享数据
• 使用通用函数和互操作功能
• 学习Matplotlib以及经常和NumPy同时使用的SciPy|,人民邮电出版社,49.00
Python编程（第三版·英文影印版）,Mark Lutz,|《Python编程 第三版》已经成为Python用户的行业标准，且更加完善。第三版进行的更新反映了当前的最佳实践以及在语言的最新版本Python 2.5中引入的大量改变。
无论是新手还是老手，你都会发现这本经过彻底更新的书确实名副其实，它教给你编写代码的正确途径。它以清晰而简练的方式解释了Python语言的语法以及编程技巧，并辅以大量例子阐明正确的使用方法和通用特性。通过阅读这本全面的指南，你将学习到如何将Python运用到实际问题中，例如：
·用户图形界面编程
·并行处理
·网络应用程序
·Internet脚本编程
·数据库管理
从深入讨论核心概念开始，再到完整的程序，《Python编程 第三版》逐一覆盖这些领域。书中确有大型的程序示例，但只在你已经掌握了足够的知识，能够理解技术和代码后才会出现。
在学习过程中，你也会学到如何在实际规模的程序中使用Python——诸如面向对象编程和代码重用概念皆是贯穿全书的副题。如果你对Python 程序设计感兴趣，就需要这本O'Reilly经典书籍长伴你的左右。实践中的建议、代码的片断和程序设计模式，这些财富都可以在日常生活中得到应用——使你的生活更轻松更高效。|,东南大学出版社,138.00元
Python Tutorial,|Guido Van Rossum,Fred L. Drake, Jr (editor)|,最权威的 Python 教程，由 Python 作者 Guido van Rossum 主笔，有少许学院味道。中文电子版由刘鑫、李梦夷翻译。英文原稿网址：http:\/\/docs.python.org\/tut\/简体中文版网址：http:\/\/wiki.woodpecker.org.cn\/moin\/March_Liu\/PyTutorial,Iuniverse Inc,USD 12.95
Python UNIX和Linux系统管理指南,|基弗特 (Gift, Noab),琼斯 (Jones, Jeremy M.)|,|《Python UNIX和Linux系统管理指南》介绍了Python语言如何为管理uNIx和Linux服务器提供各种更加有效的任务处理方式。书中各章都提出了具体的管理问题，如并发或数据备份，然后通过Python示例提供了解决方案。通过《Python UNIX和Linux系统管理指南》，读者可以学习如何用Python开发自己的一套命令行工具来解决诸多问题。
作者建立了一个免费下载的Ubuntu虚拟机，其中包含《Python UNIX和Linux系统管理指南》的源代码和运行实例，也包括SNMP、IPython、SQLAlchemy及其他工具。通过《Python UNIX和Linux系统管理指南》，你可以发现Python在如下几个方面的作用：
读取文本文件并提取信息。
使用多线程和fork选项。
使用网络设备从一个进程获取另一个进程的信息。
创建可点击的、易于交互的GUl工具。
通过交互式SNMP编程实现监控大型主机集群。
掌握IPython shell，作为Bash、Korn或Z—Shell的替换或补充。
将云计算整合到基础设施中，编写Google App引擎的应用程序。
通过定制脚本解决独特数据备份的难题。
使用Djan90、SQLAlchemy和Storm ORM与数据库进行交互。
通过《Python UNIX和Linux系统管理指南》及其补充的虚拟机，你可以了解如何打包并部署Python应用程序和库，以及编写代码在类似的多个UNIXfH Linux平台上运行。|,机械工业出版社,65.00元
Foundations of Python Network Programming,|John Goerzen,Tim Bower,Brandon Rhodes|,|This second edition of Foundations of Python Network Programming targets Python 2.5 through Python 2.7, the most popular production versions of the language. Python has made great strides since Apress released the first edition of this book back in the days of Python 2.3. The advances required new chapters to be written from the ground up, and others to be extensively revised. You will learn fundamentals like IP, TCP, DNS and SSL by using working Python programs; you will also be able to familiarize yourself with infrastructure components like memcached and message queues. You can also delve into Network server designs, and compare threaded approaches with asynchronous event-based solutions. But the biggest change is this edition's expanded treatment of the web. The HTTP protocol is covered in extensive detail, with each feature accompanied by sample Python code. You can use your HTTP protocol expertise by studying an entire chapter on screen scraping and you can then test lxml and BeautifulSoup against a real-world web site. The chapter on web application programming now covers both the WSGI standard for component interoperability, as well as modern web frameworks like Django. Finally, all of the old favorites from the first edition are back: E-mail protocols like SMTP, POP, and IMAP get full treatment, as does XML-RPC. You can still learn how to code Python network programs using the Telnet and FTP protocols, but you are likely to appreciate the power of more modern alternatives like the paramiko SSH2 library. If you are a Python programmer who needs to learn the network, this is the book that you want by your side. What you'll learn * Understand low level networking * Handle sending and receiving email including composing and decoding emails, SMTP, POP and IMAP * Program the lower levels of web application programming such as FastCGI and WSGI and HTTP itself * Learn how to use memcached and message qeues using Python * Access web services using Python * Master multitasking with threads, forking, and asynchronous communication Who this book is for This book will be of interest to python programmers who need to program networked applications using Python. From web application developers, to systems integrators, to system administrators--this book has everything you need to know. Table of Contents * Introduction to Client\/Server Networking * UDP * TCP * Socket Names and DNS * Network Data and Network Errors * TLS and SSL * Server Architecture * Caches, Message Queues, and Map-Reduce * HTTP * Screen Scraping * Web Applications * E-mail Composition and Decoding * SMTP * POP * IMAP * Telnet and SSH * FTP * RPC|,Apress,USD 54.99
How to Think Like a Computer Scientist: Learning with Python,|Allen B. Downey,Jeffrey Elkner,Chris Meyers|,|""How to Think Like a Computer Scientist"" is an introduction to programming using Python, one of the best languages for beginners. This is a Free Book -- you can download it from thinkpython.com. But if you would like to make a contribution to this project, you can do it by buying a hardcopy or paying to download the electronic version here. Thank you!|,Green Tea Press,USD 24.95
学习PYTHON 第三版(英文影印版),(美国)(Lutz.M.)卢茨,|Python是一种理想的独立程序和脚本程序语言，具有可移植、强大和易用的特点。无论您是初学程序设计还是初学Python，都能通过《学习 Python 第三版》快速而高效地掌握Python核心语言的基础。通读《学习Python 第三版》，您可以获得足够多的知识，能够学习将Python用于您所选择的任何应用领域。.
《学习Python（第三版）》基于作者Mark Lutz在过去10年间讲授培训课程所使用的资料。除了大量的注解插图和每章总结外，作者还为每章加入了独特的一节，通过实际练习和复习提问的方式，让您在学习过程中练习新的技能，测验对概念的理解程度。
类型和运算——深入Python内置对象类型：数值、列表、字典及其他。
语句和语法——用来创建和处理对象的Python代码以及Python通用语法模型。
函数——Python的基本结构化和代码重用工具。..
模块——将语句、函数和其他工具组织为更大的组件。
类和面向对象编程——可选的Python面向对象程序设计工具，用于定制和重用结构化代码。
异常和工具——处理语句和模块异常，并介绍编写较大型程序所使用的开发工具。
有关即将发布的Python 3.0的一些讨论。
《学习Python 第三版》为您理解Python语言提供了完整而又深入的介绍，帮助您领会在以后的工作中会遇到的应用级Python实例。如果您准备好探索Google和 YouTube究竟从Python中发现了什么，那么《学习Python 第三版》就是一个最好的开始。|,东南大学出版社,88.00元
Python Cookbook,|Alex Martelli,Anna Ravenscroft,David Ascher|,|Portable, powerful, and a breeze to use, Python is the popular open source object-oriented programming language used for both standalone programs and scripting applications.  It is now being used by an increasing number of major organizations, including NASA and Google. Updated for Python 2.4, The Python Cookbook, 2nd Edition offers a wealth of useful code for all Python programmers, not just advanced practitioners.  Like its predecessor, the new edition provides solutions to problems that Python programmers face everyday. It now includes over 200 recipes that range from simple tasks, such as working with dictionaries and list comprehensions, to complex tasks, such as monitoring a network and building a templating system. This revised version also includes new chapters on topics such as time, money, and metaprogramming. Here's a list of additional topics covered:  * Manipulating text * Searching and sorting * Working with files and the filesystem * Object-oriented programming * Dealing with threads and processes * System administration * Interacting with databases * Creating user interfaces * Network and web programming * Processing XML * Distributed programming * Debugging and testing Another advantage of The Python Cookbook, 2nd Edition is its trio of authors--three well-known Python programming experts, who are highly visible on email lists and in newsgroups, and speak often at Python conferences.  With scores of practical examples and pertinent background information, The Python Cookbook, 2nd Edition is the one source you need if you're looking to build efficient, flexible, scalable, and well-integrated systems.|,O'Reilly Media,USD 49.95
Python编程快速上手,斯维加特 (Al Sweigart),|如今，人们面临的大多数任务都可以通过编写计算机软件来完成。Python是一种解释型、面向对象、动态数据类型的高级程序设计语言。通过Python编程，我们能够解决现实生活中的很多任务。
本书是一本面向实践的Python编程实用指南。本书的目的，不仅是介绍Python语言的基础知识，而且还通过项目实践教会读者如何应用这些知识和技能。本书的首部分介绍了基本Python编程概念，第二部分介绍了一些不同的任务，通过编写Python程序，可以让计算机自动完成它们。第二部分的每一章都有一些项目程序，供读者学习。每章的末尾还提供了一些习题和深入的实践项目，帮助读者巩固所学的知识。附录部分提供了所有习题的解答。
本书适合任何想要通过Python学习编程的读者，尤其适合缺乏编程基础的初学者。通过阅读本书，读者将能利用强大的编程语言和工具，并且会体会到Python编程的快乐。|,人民邮电出版社,CNY 69.00
Fluent Python,Luciano Ramalho,|Learn how to write idiomatic, effective Python code by leveraging its best features. Python's simplicity quickly lets you become productive with it, but this often means you aren’t using everything the language has to offer. By taking you through Python’s key language features and libraries, this practical book shows you how to make your code shorter, faster, and more readable all at the same time—what experts consider Pythonic.
Many programmers who learn Python basics fall into the trap of reinventing the wheel because of past experience in other languages, and try to bend the language to patterns that don't really apply to it. Author Luciano Ramalho, a Python Software Foundation member and Python programmer for 15 years, helps you drop your accent from another language so you can code Python fluently.
•Learn practical applications of generators for database processing
•Rethink some design patterns in a Python context
•Examine attribute descriptors and when to use them: the key to ORMs
•Explore Pythonic objects: protocols versus interfaces, abstract base classes and multiple inheritance|,O'Reilly Media,USD 39.99
Python金融大数据分析,[德] 伊夫·希尔皮斯科,|唯一一本详细讲解使用Python分析处理金融大数据的专业图书；金融应用开发领域从业人员必读。
Python凭借其简单、易读、可扩展性以及拥有巨大而活跃的科学计算社区，在需要分析、处理大量数据的金融行业得到了广泛而迅速的应用，并且成为该行业开发核心应用的首选编程语言。《Python金融大数据分析》提供了使用Python进行数据分析，以及开发相关应用程序的技巧和工具。
《Python金融大数据分析》总计分为3部分，共19章，第1部分介绍了Python在金融学中的应用，其内容涵盖了Python用于金融行业的原因、Python的基础架构和工具，以及Python在计量金融学中的一些具体入门实例；第2部分介绍了金融分析和应用程序开发中最重要的Python库、技术和方法，其内容涵盖了Python的数据类型和结构、用matplotlib进行数据可视化、金融时间序列数据处理、高性能输入\/输出操作、高性能的Python技术和库、金融学中需要的多种数学工具、随机数生成和随机过程模拟、Python统计学应用、Python和Excel的集成、Python面向对象编程和GUI的开发、Python与Web技术的集成，以及基于Web应用和Web服务的开发；第3部分关注的是蒙特卡洛模拟期权与衍生品定价实际应用的开发工作，其内容涵盖了估值框架的介绍、金融模型的模拟、衍生品的估值、投资组合的估值、波动率期权等知识。
《Python金融大数据分析》适合对使用Python进行大数据分析、处理感兴趣的金融行业开发人员阅读。|,人民邮电出版社,CNY 99.00
Python参考手册（第4版）,David M.Beazley,|本书是权威的Python语言参考指南，内容涉及核心Python语言和Python库的最重要部分。本书内容简洁扼要、可读性强，书中还包括了一些没有在Python官方文档或其他资料中出现过的一些高级的主题。
这一版在内容上进行了全面更新，介绍了Python 2.6和Python 3新引入的编程语言特性和库模块，同时还分析了Python程序员面临的如下难题：是应继续使用现有的Python代码，还是应制定计划将其移植到Python 3？|,人民邮电出版社,89.00元
编写高质量代码：改善Python程序的91个建议,|张颖,赖勇浩|,|在通往“Python技术殿堂”的路上，本书将为你编写健壮、优雅、高质量的Python代码提供切实帮助！内容全部由Python编码的最佳实践组成，从基本原则、惯用法、语法、库、设计模式、内部机制、开发工具和性能优化8个方面深入探讨了编写高质量Python代码的技巧与禁忌，一共总结出91条宝贵的建议。每条建议对应Python程序员可能会遇到的一个问题。本书不仅以建议的方式从正反两方面给出了被实践证明为十分优秀的解决方案或非常糟糕的解决方案，而且分析了问题产生的根源，会使人有一种醍醐灌顶的感觉，豁然开朗。
《编写高质量代码：改善Python程序的91个建议》针对每个问题所选择的应用场景都非常典型，给出的建议也都与实践紧密结合。书中的每一条建议都可能在你的下一行代码、下一个应用或下一个项目中显露锋芒。建议你将本书搁置在手边，随时查阅，相信这么做一定能使你的学习和开发工作事半功倍。|,机械工业出版社,59.00元
流畅的Python,[巴西] Luciano Ramalho,|【技术大咖推荐】
“很荣幸担任这本优秀图书的技术审校。这本书能帮助很多中级Python程序员掌握这门语言，我也从中学到了相当多的知识！”——Alex Martelli，Python软件基金会成员
“对于想要扩充知识的中级和高级Python程序员来说，这本书是充满了实用编程技巧的宝藏。”——Daniel Greenfeld和Audrey Roy Greenfeld，Two Scoops of Django作者
【本书特色】
本书由奋战在Python开发一线近20年的Luciano Ramalho执笔，Victor Stinner、Alex Martelli等Python大咖担纲技术审稿人，从语言设计层面剖析编程细节，兼顾Python 3和Python 2，告诉你Python中不亲自动手实践就无法理解的语言陷阱成因和解决之道，教你写出风格地道的Python代码。
●	Python数据模型：理解为什么特殊方法是对象行为一致的关键。
●	数据结构：充分利用内置类型，理解Unicode文本和字节二象性。
●	把函数视作对象：把Python函数视作一等对象，并了解这一点对流行的设计模式的影响。
●	面向对象习惯用法：通过构建类学习引用、可变性、接口、运算符重载和多重继承。
●	控制流程：学习使用上下文管理器、生成器、协程，以及通过concurrent.futures和asyncio包实现的并发。
●	元编程：理解特性、描述符、类装饰器和元类的工作原理。
【主要内容】
本书致力于帮助Python开发人员挖掘这门语言及相关程序库的优秀特性，避免重复劳动，同时写出简洁、流畅、易读、易维护，并且具有地道Python风格的代码。本书尤其深入探讨了Python语言的高级用法，涵盖数据结构、Python风格的对象、并行与并发，以及元编程等不同的方面。
本书适合中高级Python软件开发人员阅读参考。
【译者简介】
安道
专注于现代计算机技术的自由翻译，译有《Flask Web 开发》《Python 网络编程攻略》《Ruby on Rails 教程》等书。
个人网站：http:\/\/about.ac\/。
吴珂
现为Airbnb公司软件工程师，所在团队主要负责开发和维护各类可伸缩、高性能服务，并在Airbnb内推广面向服务的系统架构。在分布式系统、云存储服务和跨平台SDK开发，以及大规模数据处理等方面有多年经验。|,人民邮电出版社,139元
Python计算与编程实践,|（美）Mark Guzdial,（美）Barbara Ericson|,|计算机程序设计课程往往是枯燥乏味的，而本书根据教育理论，开发了一种新的教学方法，介绍如何通过多媒体编程来学习计算机程序设计，将趣味性和实用性融于枯燥的编程课程的教学当中。本书方法独特新颖，实例通俗易懂，可帮助读者快速入门并深入掌握编程技能，是一本理论联系实际的程序设计教程。
本书使用的编程语言是Python，这是因为Python强大实用（比如网站开发）、易于入门，计算机科学专业和非专业人士都可以学习。本书以Python数字多媒体编程为主线，从图像、声音、文本和电影这些学生已经熟知的内容开始，讲解它们的处理方法，其中穿插介绍计算机科学与程序设计的基础知识。在讲解知识点的时候也独具匠心，先介绍容易理解的基本概念，如赋值、顺序操作、迭代、条件式、函数定义等，逐步涉及抽象内容，如算法复杂度、程序效率、计算机组成、层次式分解、递归、面向对象等。本书还提供了大量例题和习题，方便教学。|,机械工业出版社,69.00元
Learning Python,Mark Lutz,|Amazon.com Review
The authors of Learning Python show you enough essentials of the Python scripting language to enable you to begin solving problems right away, then reveal more powerful aspects of the language one at a time. This approach is sure to appeal to programmers and system administrators who have urgent problems and a preference for learning by semi-guided experimentation.
First off, Learning Python shows the relationships among Python scripts and their interpreter (in a mostly platform-neutral way). Then, the authors address the mechanics of the language itself, providing illustrations of how Python conceives of numbers, strings, and other objects as well as the operators you use to work with them. Dictionaries, lists, tuples, and other data structures specific to Python receive plenty of attention including complete examples.
Authors Mark Lutz and David Ascher build on that fundamental information in their discussions of functions and modules, which evolve into coverage of namespaces, classes, and the object-oriented aspects of Python programming. There's also information on creating graphical user interfaces (GUIs) for Python applications with Tkinter.
In addition to its careful expository prose, Learning Python includes exercises that both test your Python skills and help reveal more elusive truths about the language. --This text refers to an out of print or unavailable edition of this title.
Review
As a book for programmers who want to learn Python, it does a very good job. The coverage is informative and well order; making it easy to find what you're looking for. Overall, if you do some work with Python, you will benefit from owning this book. " - Sam Smith, news@UK, March "This book is a good example of Python culture, in the clarity of its text as much as in the quality of its code. Anyhone working their way through it will have a solid foundation upon which to explore Python's potential. Highly recommended." - Ivan Uemilianin, CVu, October 2004 --This text refers to the Paperback edition.|,O'Reilly Media,USD 54.99
Think Python,Allen B. Downey,|Think Python is an introduction to Python programming for students with no programming experience. It starts with the most basic concepts of programming, and is carefully designed to define all terms when they are first used and to develop each new concept in a logical progression. Larger pieces, like recursion and object-oriented programming are divided into a sequence of smaller steps and introduced over the course of several chapters.|,O'Reilly Media,GBP 29.99
|Learn Python The Hard Way, 1st Edition|,Zed Shaw,|Learn Python The Hard Way is a book I wrote to teach programming to people who do not know how to code. It assumes you are probably a power user of your computer, and then takes you from nothing to programming simple games. After reading my book you should be ready for many of the other programming books out there.|,Lulu.com,$29.99
Selenium 2自动化测试实战,虫师,|《Selenium 2自动化测试实战——基于Python语言》共分 14 章。第 1 章是自动化测试相关基础知识的介绍；第 2 章到第 10 章是《Selenium 2自动化测试实战——基于Python语言》的重点，循 序渐进地介绍了自动化测试所用到的技术；第 11 章通过一个具体的项目综合运用了前面章节所介绍 的技术与技巧；第 12 章到第 14 章选取了当前最热门的技术进行了介绍，旨在扩展测试人员的综合技 术能力。 《Selenium 2自动化测试实战——基于Python语言》的写作目的并不是为了简单地告诉读者如何使用一个自动化测试工具，而是希望读者在学习
《Selenium 2自动化测试实战——基于Python语言》的内容后能够提高综合的技术高度与宽度，从而摆脱简单的手工测试，向高级测试工程师的道路 迈进。|,电子工业出版社,CNY 59.00
NumPy攻略,[印尼] Ivan Idris,|本书带领读者了解熟悉当下最流行的科学计算库NumPy的方方面面。书中不仅介绍了NumPy的安装、使用和各种相关概念，还介绍了如何利用这一最新的开源软件库，以尽可能接近传统数学语言的方式，编写可读性好、实现效率高和运行速度快的代码。最后还探究了几个和NumPy相关的科学计算项目。此外，本书将为你掌握NumPy数组和通用函数打下坚实的基础，也会通过实例教你用Matplotlib绘图，并了解和SciPy相关的项目。
本书将帮助你：
• 学习高级索引技术和线性代数知识
• 了解数组形状及图像大小的调整
• 探察广播机制和直方图
• 分析NumPy代码并用可视化的方式表示分析结果
• 用Cython为代码提速
• 使用数组接口共享数据
• 使用通用函数和互操作功能
• 学习Matplotlib以及经常和NumPy同时使用的SciPy|,人民邮电出版社,49.00
Python编程（第三版·英文影印版）,Mark Lutz,|《Python编程 第三版》已经成为Python用户的行业标准，且更加完善。第三版进行的更新反映了当前的最佳实践以及在语言的最新版本Python 2.5中引入的大量改变。
无论是新手还是老手，你都会发现这本经过彻底更新的书确实名副其实，它教给你编写代码的正确途径。它以清晰而简练的方式解释了Python语言的语法以及编程技巧，并辅以大量例子阐明正确的使用方法和通用特性。通过阅读这本全面的指南，你将学习到如何将Python运用到实际问题中，例如：
·用户图形界面编程
·并行处理
·网络应用程序
·Internet脚本编程
·数据库管理
从深入讨论核心概念开始，再到完整的程序，《Python编程 第三版》逐一覆盖这些领域。书中确有大型的程序示例，但只在你已经掌握了足够的知识，能够理解技术和代码后才会出现。
在学习过程中，你也会学到如何在实际规模的程序中使用Python——诸如面向对象编程和代码重用概念皆是贯穿全书的副题。如果你对Python 程序设计感兴趣，就需要这本O'Reilly经典书籍长伴你的左右。实践中的建议、代码的片断和程序设计模式，这些财富都可以在日常生活中得到应用——使你的生活更轻松更高效。|,东南大学出版社,138.00元
Python Tutorial,|Guido Van Rossum,Fred L. Drake, Jr (editor)|,最权威的 Python 教程，由 Python 作者 Guido van Rossum 主笔，有少许学院味道。中文电子版由刘鑫、李梦夷翻译。英文原稿网址：http:\/\/docs.python.org\/tut\/简体中文版网址：http:\/\/wiki.woodpecker.org.cn\/moin\/March_Liu\/PyTutorial,Iuniverse Inc,USD 12.95
Python UNIX和Linux系统管理指南,|基弗特 (Gift, Noab),琼斯 (Jones, Jeremy M.)|,|《Python UNIX和Linux系统管理指南》介绍了Python语言如何为管理uNIx和Linux服务器提供各种更加有效的任务处理方式。书中各章都提出了具体的管理问题，如并发或数据备份，然后通过Python示例提供了解决方案。通过《Python UNIX和Linux系统管理指南》，读者可以学习如何用Python开发自己的一套命令行工具来解决诸多问题。
作者建立了一个免费下载的Ubuntu虚拟机，其中包含《Python UNIX和Linux系统管理指南》的源代码和运行实例，也包括SNMP、IPython、SQLAlchemy及其他工具。通过《Python UNIX和Linux系统管理指南》，你可以发现Python在如下几个方面的作用：
读取文本文件并提取信息。
使用多线程和fork选项。
使用网络设备从一个进程获取另一个进程的信息。
创建可点击的、易于交互的GUl工具。
通过交互式SNMP编程实现监控大型主机集群。
掌握IPython shell，作为Bash、Korn或Z—Shell的替换或补充。
将云计算整合到基础设施中，编写Google App引擎的应用程序。
通过定制脚本解决独特数据备份的难题。
使用Djan90、SQLAlchemy和Storm ORM与数据库进行交互。
通过《Python UNIX和Linux系统管理指南》及其补充的虚拟机，你可以了解如何打包并部署Python应用程序和库，以及编写代码在类似的多个UNIXfH Linux平台上运行。|,机械工业出版社,65.00元
Foundations of Python Network Programming,|John Goerzen,Tim Bower,Brandon Rhodes|,|This second edition of Foundations of Python Network Programming targets Python 2.5 through Python 2.7, the most popular production versions of the language. Python has made great strides since Apress released the first edition of this book back in the days of Python 2.3. The advances required new chapters to be written from the ground up, and others to be extensively revised. You will learn fundamentals like IP, TCP, DNS and SSL by using working Python programs; you will also be able to familiarize yourself with infrastructure components like memcached and message queues. You can also delve into Network server designs, and compare threaded approaches with asynchronous event-based solutions. But the biggest change is this edition's expanded treatment of the web. The HTTP protocol is covered in extensive detail, with each feature accompanied by sample Python code. You can use your HTTP protocol expertise by studying an entire chapter on screen scraping and you can then test lxml and BeautifulSoup against a real-world web site. The chapter on web application programming now covers both the WSGI standard for component interoperability, as well as modern web frameworks like Django. Finally, all of the old favorites from the first edition are back: E-mail protocols like SMTP, POP, and IMAP get full treatment, as does XML-RPC. You can still learn how to code Python network programs using the Telnet and FTP protocols, but you are likely to appreciate the power of more modern alternatives like the paramiko SSH2 library. If you are a Python programmer who needs to learn the network, this is the book that you want by your side. What you'll learn * Understand low level networking * Handle sending and receiving email including composing and decoding emails, SMTP, POP and IMAP * Program the lower levels of web application programming such as FastCGI and WSGI and HTTP itself * Learn how to use memcached and message qeues using Python * Access web services using Python * Master multitasking with threads, forking, and asynchronous communication Who this book is for This book will be of interest to python programmers who need to program networked applications using Python. From web application developers, to systems integrators, to system administrators--this book has everything you need to know. Table of Contents * Introduction to Client\/Server Networking * UDP * TCP * Socket Names and DNS * Network Data and Network Errors * TLS and SSL * Server Architecture * Caches, Message Queues, and Map-Reduce * HTTP * Screen Scraping * Web Applications * E-mail Composition and Decoding * SMTP * POP * IMAP * Telnet and SSH * FTP * RPC|,Apress,USD 54.99
How to Think Like a Computer Scientist: Learning with Python,|Allen B. Downey,Jeffrey Elkner,Chris Meyers|,|""How to Think Like a Computer Scientist"" is an introduction to programming using Python, one of the best languages for beginners. This is a Free Book -- you can download it from thinkpython.com. But if you would like to make a contribution to this project, you can do it by buying a hardcopy or paying to download the electronic version here. Thank you!|,Green Tea Press,USD 24.95
Python机器学习,[美] Michael Bowles,|在学习和研究机器学习的时候，面临令人眼花缭乱的算法，机器学习新手往往会不知
所措。本书从算法和Python 语言实现的角度，帮助读者认识机器学习。
书专注于两类核心的“算法族”，即惩罚线性回归和集成方法，并通过代码实例来
展示所讨论的算法的使用原则。全书共分为7 章，详细讨论了预测模型的两类核心算法、预测模型的构建、惩罚线性回归和集成方法的具体应用和实现。
本书主要针对想提高机器学习技能的Python 开发人员，帮助他们解决某一特定的项
目或是提升相关的技能。|,人民邮电出版社,69.00元
Python Cookbook,|Alex Martelli,Anna Ravenscroft,David Ascher|,|Portable, powerful, and a breeze to use, Python is the popular open source object-oriented programming language used for both standalone programs and scripting applications.  It is now being used by an increasing number of major organizations, including NASA and Google. Updated for Python 2.4, The Python Cookbook, 2nd Edition offers a wealth of useful code for all Python programmers, not just advanced practitioners.  Like its predecessor, the new edition provides solutions to problems that Python programmers face everyday. It now includes over 200 recipes that range from simple tasks, such as working with dictionaries and list comprehensions, to complex tasks, such as monitoring a network and building a templating system. This revised version also includes new chapters on topics such as time, money, and metaprogramming. Here's a list of additional topics covered:  * Manipulating text * Searching and sorting * Working with files and the filesystem * Object-oriented programming * Dealing with threads and processes * System administration * Interacting with databases * Creating user interfaces * Network and web programming * Processing XML * Distributed programming * Debugging and testing Another advantage of The Python Cookbook, 2nd Edition is its trio of authors--three well-known Python programming experts, who are highly visible on email lists and in newsgroups, and speak often at Python conferences.  With scores of practical examples and pertinent background information, The Python Cookbook, 2nd Edition is the one source you need if you're looking to build efficient, flexible, scalable, and well-integrated systems.|,O'Reilly Media,USD 49.95
Python编程快速上手,斯维加特 (Al Sweigart),|如今，人们面临的大多数任务都可以通过编写计算机软件来完成。Python是一种解释型、面向对象、动态数据类型的高级程序设计语言。通过Python编程，我们能够解决现实生活中的很多任务。
本书是一本面向实践的Python编程实用指南。本书的目的，不仅是介绍Python语言的基础知识，而且还通过项目实践教会读者如何应用这些知识和技能。本书的首部分介绍了基本Python编程概念，第二部分介绍了一些不同的任务，通过编写Python程序，可以让计算机自动完成它们。第二部分的每一章都有一些项目程序，供读者学习。每章的末尾还提供了一些习题和深入的实践项目，帮助读者巩固所学的知识。附录部分提供了所有习题的解答。
本书适合任何想要通过Python学习编程的读者，尤其适合缺乏编程基础的初学者。通过阅读本书，读者将能利用强大的编程语言和工具，并且会体会到Python编程的快乐。|,人民邮电出版社,CNY 69.00
Fluent Python,Luciano Ramalho,|Learn how to write idiomatic, effective Python code by leveraging its best features. Python's simplicity quickly lets you become productive with it, but this often means you aren’t using everything the language has to offer. By taking you through Python’s key language features and libraries, this practical book shows you how to make your code shorter, faster, and more readable all at the same time—what experts consider Pythonic.
Many programmers who learn Python basics fall into the trap of reinventing the wheel because of past experience in other languages, and try to bend the language to patterns that don't really apply to it. Author Luciano Ramalho, a Python Software Foundation member and Python programmer for 15 years, helps you drop your accent from another language so you can code Python fluently.
•Learn practical applications of generators for database processing
•Rethink some design patterns in a Python context
•Examine attribute descriptors and when to use them: the key to ORMs
•Explore Pythonic objects: protocols versus interfaces, abstract base classes and multiple inheritance|,O'Reilly Media,USD 39.99
Python金融大数据分析,[德] 伊夫·希尔皮斯科,|唯一一本详细讲解使用Python分析处理金融大数据的专业图书；金融应用开发领域从业人员必读。
Python凭借其简单、易读、可扩展性以及拥有巨大而活跃的科学计算社区，在需要分析、处理大量数据的金融行业得到了广泛而迅速的应用，并且成为该行业开发核心应用的首选编程语言。《Python金融大数据分析》提供了使用Python进行数据分析，以及开发相关应用程序的技巧和工具。
《Python金融大数据分析》总计分为3部分，共19章，第1部分介绍了Python在金融学中的应用，其内容涵盖了Python用于金融行业的原因、Python的基础架构和工具，以及Python在计量金融学中的一些具体入门实例；第2部分介绍了金融分析和应用程序开发中最重要的Python库、技术和方法，其内容涵盖了Python的数据类型和结构、用matplotlib进行数据可视化、金融时间序列数据处理、高性能输入\/输出操作、高性能的Python技术和库、金融学中需要的多种数学工具、随机数生成和随机过程模拟、Python统计学应用、Python和Excel的集成、Python面向对象编程和GUI的开发、Python与Web技术的集成，以及基于Web应用和Web服务的开发；第3部分关注的是蒙特卡洛模拟期权与衍生品定价实际应用的开发工作，其内容涵盖了估值框架的介绍、金融模型的模拟、衍生品的估值、投资组合的估值、波动率期权等知识。
《Python金融大数据分析》适合对使用Python进行大数据分析、处理感兴趣的金融行业开发人员阅读。|,人民邮电出版社,CNY 99.00
Python参考手册（第4版）,David M.Beazley,|本书是权威的Python语言参考指南，内容涉及核心Python语言和Python库的最重要部分。本书内容简洁扼要、可读性强，书中还包括了一些没有在Python官方文档或其他资料中出现过的一些高级的主题。
这一版在内容上进行了全面更新，介绍了Python 2.6和Python 3新引入的编程语言特性和库模块，同时还分析了Python程序员面临的如下难题：是应继续使用现有的Python代码，还是应制定计划将其移植到Python 3？|,人民邮电出版社,89.00元
编写高质量代码：改善Python程序的91个建议,|张颖,赖勇浩|,|在通往“Python技术殿堂”的路上，本书将为你编写健壮、优雅、高质量的Python代码提供切实帮助！内容全部由Python编码的最佳实践组成，从基本原则、惯用法、语法、库、设计模式、内部机制、开发工具和性能优化8个方面深入探讨了编写高质量Python代码的技巧与禁忌，一共总结出91条宝贵的建议。每条建议对应Python程序员可能会遇到的一个问题。本书不仅以建议的方式从正反两方面给出了被实践证明为十分优秀的解决方案或非常糟糕的解决方案，而且分析了问题产生的根源，会使人有一种醍醐灌顶的感觉，豁然开朗。
《编写高质量代码：改善Python程序的91个建议》针对每个问题所选择的应用场景都非常典型，给出的建议也都与实践紧密结合。书中的每一条建议都可能在你的下一行代码、下一个应用或下一个项目中显露锋芒。建议你将本书搁置在手边，随时查阅，相信这么做一定能使你的学习和开发工作事半功倍。|,机械工业出版社,59.00元
流畅的Python,[巴西] Luciano Ramalho,|【技术大咖推荐】
“很荣幸担任这本优秀图书的技术审校。这本书能帮助很多中级Python程序员掌握这门语言，我也从中学到了相当多的知识！”——Alex Martelli，Python软件基金会成员
“对于想要扩充知识的中级和高级Python程序员来说，这本书是充满了实用编程技巧的宝藏。”——Daniel Greenfeld和Audrey Roy Greenfeld，Two Scoops of Django作者
【本书特色】
本书由奋战在Python开发一线近20年的Luciano Ramalho执笔，Victor Stinner、Alex Martelli等Python大咖担纲技术审稿人，从语言设计层面剖析编程细节，兼顾Python 3和Python 2，告诉你Python中不亲自动手实践就无法理解的语言陷阱成因和解决之道，教你写出风格地道的Python代码。
●	Python数据模型：理解为什么特殊方法是对象行为一致的关键。
●	数据结构：充分利用内置类型，理解Unicode文本和字节二象性。
●	把函数视作对象：把Python函数视作一等对象，并了解这一点对流行的设计模式的影响。
●	面向对象习惯用法：通过构建类学习引用、可变性、接口、运算符重载和多重继承。
●	控制流程：学习使用上下文管理器、生成器、协程，以及通过concurrent.futures和asyncio包实现的并发。
●	元编程：理解特性、描述符、类装饰器和元类的工作原理。
【主要内容】
本书致力于帮助Python开发人员挖掘这门语言及相关程序库的优秀特性，避免重复劳动，同时写出简洁、流畅、易读、易维护，并且具有地道Python风格的代码。本书尤其深入探讨了Python语言的高级用法，涵盖数据结构、Python风格的对象、并行与并发，以及元编程等不同的方面。
本书适合中高级Python软件开发人员阅读参考。
【译者简介】
安道
专注于现代计算机技术的自由翻译，译有《Flask Web 开发》《Python 网络编程攻略》《Ruby on Rails 教程》等书。
个人网站：http:\/\/about.ac\/。
吴珂
现为Airbnb公司软件工程师，所在团队主要负责开发和维护各类可伸缩、高性能服务，并在Airbnb内推广面向服务的系统架构。在分布式系统、云存储服务和跨平台SDK开发，以及大规模数据处理等方面有多年经验。|,人民邮电出版社,139元
Python计算与编程实践,|（美）Mark Guzdial,（美）Barbara Ericson|,|计算机程序设计课程往往是枯燥乏味的，而本书根据教育理论，开发了一种新的教学方法，介绍如何通过多媒体编程来学习计算机程序设计，将趣味性和实用性融于枯燥的编程课程的教学当中。本书方法独特新颖，实例通俗易懂，可帮助读者快速入门并深入掌握编程技能，是一本理论联系实际的程序设计教程。
本书使用的编程语言是Python，这是因为Python强大实用（比如网站开发）、易于入门，计算机科学专业和非专业人士都可以学习。本书以Python数字多媒体编程为主线，从图像、声音、文本和电影这些学生已经熟知的内容开始，讲解它们的处理方法，其中穿插介绍计算机科学与程序设计的基础知识。在讲解知识点的时候也独具匠心，先介绍容易理解的基本概念，如赋值、顺序操作、迭代、条件式、函数定义等，逐步涉及抽象内容，如算法复杂度、程序效率、计算机组成、层次式分解、递归、面向对象等。本书还提供了大量例题和习题，方便教学。|,机械工业出版社,69.00元
Learning Python,Mark Lutz,|Amazon.com Review
The authors of Learning Python show you enough essentials of the Python scripting language to enable you to begin solving problems right away, then reveal more powerful aspects of the language one at a time. This approach is sure to appeal to programmers and system administrators who have urgent problems and a preference for learning by semi-guided experimentation.
First off, Learning Python shows the relationships among Python scripts and their interpreter (in a mostly platform-neutral way). Then, the authors address the mechanics of the language itself, providing illustrations of how Python conceives of numbers, strings, and other objects as well as the operators you use to work with them. Dictionaries, lists, tuples, and other data structures specific to Python receive plenty of attention including complete examples.
Authors Mark Lutz and David Ascher build on that fundamental information in their discussions of functions and modules, which evolve into coverage of namespaces, classes, and the object-oriented aspects of Python programming. There's also information on creating graphical user interfaces (GUIs) for Python applications with Tkinter.
In addition to its careful expository prose, Learning Python includes exercises that both test your Python skills and help reveal more elusive truths about the language. --This text refers to an out of print or unavailable edition of this title.
Review
As a book for programmers who want to learn Python, it does a very good job. The coverage is informative and well order; making it easy to find what you're looking for. Overall, if you do some work with Python, you will benefit from owning this book. " - Sam Smith, news@UK, March "This book is a good example of Python culture, in the clarity of its text as much as in the quality of its code. Anyhone working their way through it will have a solid foundation upon which to explore Python's potential. Highly recommended." - Ivan Uemilianin, CVu, October 2004 --This text refers to the Paperback edition.|,O'Reilly Media,USD 54.99
Think Python,Allen B. Downey,|Think Python is an introduction to Python programming for students with no programming experience. It starts with the most basic concepts of programming, and is carefully designed to define all terms when they are first used and to develop each new concept in a logical progression. Larger pieces, like recursion and object-oriented programming are divided into a sequence of smaller steps and introduced over the course of several chapters.|,O'Reilly Media,GBP 29.99
|Learn Python The Hard Way, 1st Edition|,Zed Shaw,|Learn Python The Hard Way is a book I wrote to teach programming to people who do not know how to code. It assumes you are probably a power user of your computer, and then takes you from nothing to programming simple games. After reading my book you should be ready for many of the other programming books out there.|,Lulu.com,$29.99
Selenium 2自动化测试实战,虫师,|《Selenium 2自动化测试实战——基于Python语言》共分 14 章。第 1 章是自动化测试相关基础知识的介绍；第 2 章到第 10 章是《Selenium 2自动化测试实战——基于Python语言》的重点，循 序渐进地介绍了自动化测试所用到的技术；第 11 章通过一个具体的项目综合运用了前面章节所介绍 的技术与技巧；第 12 章到第 14 章选取了当前最热门的技术进行了介绍，旨在扩展测试人员的综合技 术能力。 《Selenium 2自动化测试实战——基于Python语言》的写作目的并不是为了简单地告诉读者如何使用一个自动化测试工具，而是希望读者在学习
《Selenium 2自动化测试实战——基于Python语言》的内容后能够提高综合的技术高度与宽度，从而摆脱简单的手工测试，向高级测试工程师的道路 迈进。|,电子工业出版社,CNY 59.00
NumPy攻略,[印尼] Ivan Idris,|本书带领读者了解熟悉当下最流行的科学计算库NumPy的方方面面。书中不仅介绍了NumPy的安装、使用和各种相关概念，还介绍了如何利用这一最新的开源软件库，以尽可能接近传统数学语言的方式，编写可读性好、实现效率高和运行速度快的代码。最后还探究了几个和NumPy相关的科学计算项目。此外，本书将为你掌握NumPy数组和通用函数打下坚实的基础，也会通过实例教你用Matplotlib绘图，并了解和SciPy相关的项目。
本书将帮助你：
• 学习高级索引技术和线性代数知识
• 了解数组形状及图像大小的调整
• 探察广播机制和直方图
• 分析NumPy代码并用可视化的方式表示分析结果
• 用Cython为代码提速
• 使用数组接口共享数据
• 使用通用函数和互操作功能
• 学习Matplotlib以及经常和NumPy同时使用的SciPy|,人民邮电出版社,49.00
Python编程（第三版·英文影印版）,Mark Lutz,|《Python编程 第三版》已经成为Python用户的行业标准，且更加完善。第三版进行的更新反映了当前的最佳实践以及在语言的最新版本Python 2.5中引入的大量改变。
无论是新手还是老手，你都会发现这本经过彻底更新的书确实名副其实，它教给你编写代码的正确途径。它以清晰而简练的方式解释了Python语言的语法以及编程技巧，并辅以大量例子阐明正确的使用方法和通用特性。通过阅读这本全面的指南，你将学习到如何将Python运用到实际问题中，例如：
·用户图形界面编程
·并行处理
·网络应用程序
·Internet脚本编程
·数据库管理
从深入讨论核心概念开始，再到完整的程序，《Python编程 第三版》逐一覆盖这些领域。书中确有大型的程序示例，但只在你已经掌握了足够的知识，能够理解技术和代码后才会出现。
在学习过程中，你也会学到如何在实际规模的程序中使用Python——诸如面向对象编程和代码重用概念皆是贯穿全书的副题。如果你对Python 程序设计感兴趣，就需要这本O'Reilly经典书籍长伴你的左右。实践中的建议、代码的片断和程序设计模式，这些财富都可以在日常生活中得到应用——使你的生活更轻松更高效。|,东南大学出版社,138.00元
Python Tutorial,|Guido Van Rossum,Fred L. Drake, Jr (editor)|,最权威的 Python 教程，由 Python 作者 Guido van Rossum 主笔，有少许学院味道。中文电子版由刘鑫、李梦夷翻译。英文原稿网址：http:\/\/docs.python.org\/tut\/简体中文版网址：http:\/\/wiki.woodpecker.org.cn\/moin\/March_Liu\/PyTutorial,Iuniverse Inc,USD 12.95
Python UNIX和Linux系统管理指南,|基弗特 (Gift, Noab),琼斯 (Jones, Jeremy M.)|,|《Python UNIX和Linux系统管理指南》介绍了Python语言如何为管理uNIx和Linux服务器提供各种更加有效的任务处理方式。书中各章都提出了具体的管理问题，如并发或数据备份，然后通过Python示例提供了解决方案。通过《Python UNIX和Linux系统管理指南》，读者可以学习如何用Python开发自己的一套命令行工具来解决诸多问题。
作者建立了一个免费下载的Ubuntu虚拟机，其中包含《Python UNIX和Linux系统管理指南》的源代码和运行实例，也包括SNMP、IPython、SQLAlchemy及其他工具。通过《Python UNIX和Linux系统管理指南》，你可以发现Python在如下几个方面的作用：
读取文本文件并提取信息。
使用多线程和fork选项。
使用网络设备从一个进程获取另一个进程的信息。
创建可点击的、易于交互的GUl工具。
通过交互式SNMP编程实现监控大型主机集群。
掌握IPython shell，作为Bash、Korn或Z—Shell的替换或补充。
将云计算整合到基础设施中，编写Google App引擎的应用程序。
通过定制脚本解决独特数据备份的难题。
使用Djan90、SQLAlchemy和Storm ORM与数据库进行交互。
通过《Python UNIX和Linux系统管理指南》及其补充的虚拟机，你可以了解如何打包并部署Python应用程序和库，以及编写代码在类似的多个UNIXfH Linux平台上运行。|,机械工业出版社,65.00元
Foundations of Python Network Programming,|John Goerzen,Tim Bower,Brandon Rhodes|,|This second edition of Foundations of Python Network Programming targets Python 2.5 through Python 2.7, the most popular production versions of the language. Python has made great strides since Apress released the first edition of this book back in the days of Python 2.3. The advances required new chapters to be written from the ground up, and others to be extensively revised. You will learn fundamentals like IP, TCP, DNS and SSL by using working Python programs; you will also be able to familiarize yourself with infrastructure components like memcached and message queues. You can also delve into Network server designs, and compare threaded approaches with asynchronous event-based solutions. But the biggest change is this edition's expanded treatment of the web. The HTTP protocol is covered in extensive detail, with each feature accompanied by sample Python code. You can use your HTTP protocol expertise by studying an entire chapter on screen scraping and you can then test lxml and BeautifulSoup against a real-world web site. The chapter on web application programming now covers both the WSGI standard for component interoperability, as well as modern web frameworks like Django. Finally, all of the old favorites from the first edition are back: E-mail protocols like SMTP, POP, and IMAP get full treatment, as does XML-RPC. You can still learn how to code Python network programs using the Telnet and FTP protocols, but you are likely to appreciate the power of more modern alternatives like the paramiko SSH2 library. If you are a Python programmer who needs to learn the network, this is the book that you want by your side. What you'll learn * Understand low level networking * Handle sending and receiving email including composing and decoding emails, SMTP, POP and IMAP * Program the lower levels of web application programming such as FastCGI and WSGI and HTTP itself * Learn how to use memcached and message qeues using Python * Access web services using Python * Master multitasking with threads, forking, and asynchronous communication Who this book is for This book will be of interest to python programmers who need to program networked applications using Python. From web application developers, to systems integrators, to system administrators--this book has everything you need to know. Table of Contents * Introduction to Client\/Server Networking * UDP * TCP * Socket Names and DNS * Network Data and Network Errors * TLS and SSL * Server Architecture * Caches, Message Queues, and Map-Reduce * HTTP * Screen Scraping * Web Applications * E-mail Composition and Decoding * SMTP * POP * IMAP * Telnet and SSH * FTP * RPC|,Apress,USD 54.99
How to Think Like a Computer Scientist: Learning with Python,|Allen B. Downey,Jeffrey Elkner,Chris Meyers|,|""How to Think Like a Computer Scientist"" is an introduction to programming using Python, one of the best languages for beginners. This is a Free Book -- you can download it from thinkpython.com. But if you would like to make a contribution to this project, you can do it by buying a hardcopy or paying to download the electronic version here. Thank you!|,Green Tea Press,USD 24.95
Python机器学习,[美] Michael Bowles,|在学习和研究机器学习的时候，面临令人眼花缭乱的算法，机器学习新手往往会不知
所措。本书从算法和Python 语言实现的角度，帮助读者认识机器学习。
书专注于两类核心的“算法族”，即惩罚线性回归和集成方法，并通过代码实例来
展示所讨论的算法的使用原则。全书共分为7 章，详细讨论了预测模型的两类核心算法、预测模型的构建、惩罚线性回归和集成方法的具体应用和实现。
本书主要针对想提高机器学习技能的Python 开发人员，帮助他们解决某一特定的项
目或是提升相关的技能。|,人民邮电出版社,69.00元
从Python开始学编程,Vamei,改编自Vamei博客的《Python快速教程》。本书以Python为样本，不仅介绍了编程的基本概念，还着重讲解编程语言的主流范式：面向过程、面向对象、面向函数。读者不仅可以轻松学会Python，以后再学习其他编程语言时也会更加容易。,电子工业出版社,CNY 49.00
Python编程快速上手,斯维加特 (Al Sweigart),|如今，人们面临的大多数任务都可以通过编写计算机软件来完成。Python是一种解释型、面向对象、动态数据类型的高级程序设计语言。通过Python编程，我们能够解决现实生活中的很多任务。
本书是一本面向实践的Python编程实用指南。本书的目的，不仅是介绍Python语言的基础知识，而且还通过项目实践教会读者如何应用这些知识和技能。本书的首部分介绍了基本Python编程概念，第二部分介绍了一些不同的任务，通过编写Python程序，可以让计算机自动完成它们。第二部分的每一章都有一些项目程序，供读者学习。每章的末尾还提供了一些习题和深入的实践项目，帮助读者巩固所学的知识。附录部分提供了所有习题的解答。
本书适合任何想要通过Python学习编程的读者，尤其适合缺乏编程基础的初学者。通过阅读本书，读者将能利用强大的编程语言和工具，并且会体会到Python编程的快乐。|,人民邮电出版社,CNY 69.00
Fluent Python,Luciano Ramalho,|Learn how to write idiomatic, effective Python code by leveraging its best features. Python's simplicity quickly lets you become productive with it, but this often means you aren’t using everything the language has to offer. By taking you through Python’s key language features and libraries, this practical book shows you how to make your code shorter, faster, and more readable all at the same time—what experts consider Pythonic.
Many programmers who learn Python basics fall into the trap of reinventing the wheel because of past experience in other languages, and try to bend the language to patterns that don't really apply to it. Author Luciano Ramalho, a Python Software Foundation member and Python programmer for 15 years, helps you drop your accent from another language so you can code Python fluently.
•Learn practical applications of generators for database processing
•Rethink some design patterns in a Python context
•Examine attribute descriptors and when to use them: the key to ORMs
•Explore Pythonic objects: protocols versus interfaces, abstract base classes and multiple inheritance|,O'Reilly Media,USD 39.99
Python金融大数据分析,[德] 伊夫·希尔皮斯科,|唯一一本详细讲解使用Python分析处理金融大数据的专业图书；金融应用开发领域从业人员必读。
Python凭借其简单、易读、可扩展性以及拥有巨大而活跃的科学计算社区，在需要分析、处理大量数据的金融行业得到了广泛而迅速的应用，并且成为该行业开发核心应用的首选编程语言。《Python金融大数据分析》提供了使用Python进行数据分析，以及开发相关应用程序的技巧和工具。
《Python金融大数据分析》总计分为3部分，共19章，第1部分介绍了Python在金融学中的应用，其内容涵盖了Python用于金融行业的原因、Python的基础架构和工具，以及Python在计量金融学中的一些具体入门实例；第2部分介绍了金融分析和应用程序开发中最重要的Python库、技术和方法，其内容涵盖了Python的数据类型和结构、用matplotlib进行数据可视化、金融时间序列数据处理、高性能输入\/输出操作、高性能的Python技术和库、金融学中需要的多种数学工具、随机数生成和随机过程模拟、Python统计学应用、Python和Excel的集成、Python面向对象编程和GUI的开发、Python与Web技术的集成，以及基于Web应用和Web服务的开发；第3部分关注的是蒙特卡洛模拟期权与衍生品定价实际应用的开发工作，其内容涵盖了估值框架的介绍、金融模型的模拟、衍生品的估值、投资组合的估值、波动率期权等知识。
《Python金融大数据分析》适合对使用Python进行大数据分析、处理感兴趣的金融行业开发人员阅读。|,人民邮电出版社,CNY 99.00
Python参考手册（第4版）,David M.Beazley,|本书是权威的Python语言参考指南，内容涉及核心Python语言和Python库的最重要部分。本书内容简洁扼要、可读性强，书中还包括了一些没有在Python官方文档或其他资料中出现过的一些高级的主题。
这一版在内容上进行了全面更新，介绍了Python 2.6和Python 3新引入的编程语言特性和库模块，同时还分析了Python程序员面临的如下难题：是应继续使用现有的Python代码，还是应制定计划将其移植到Python 3？|,人民邮电出版社,89.00元
编写高质量代码：改善Python程序的91个建议,|张颖,赖勇浩|,|在通往“Python技术殿堂”的路上，本书将为你编写健壮、优雅、高质量的Python代码提供切实帮助！内容全部由Python编码的最佳实践组成，从基本原则、惯用法、语法、库、设计模式、内部机制、开发工具和性能优化8个方面深入探讨了编写高质量Python代码的技巧与禁忌，一共总结出91条宝贵的建议。每条建议对应Python程序员可能会遇到的一个问题。本书不仅以建议的方式从正反两方面给出了被实践证明为十分优秀的解决方案或非常糟糕的解决方案，而且分析了问题产生的根源，会使人有一种醍醐灌顶的感觉，豁然开朗。
《编写高质量代码：改善Python程序的91个建议》针对每个问题所选择的应用场景都非常典型，给出的建议也都与实践紧密结合。书中的每一条建议都可能在你的下一行代码、下一个应用或下一个项目中显露锋芒。建议你将本书搁置在手边，随时查阅，相信这么做一定能使你的学习和开发工作事半功倍。|,机械工业出版社,59.00元
流畅的Python,[巴西] Luciano Ramalho,|【技术大咖推荐】
“很荣幸担任这本优秀图书的技术审校。这本书能帮助很多中级Python程序员掌握这门语言，我也从中学到了相当多的知识！”——Alex Martelli，Python软件基金会成员
“对于想要扩充知识的中级和高级Python程序员来说，这本书是充满了实用编程技巧的宝藏。”——Daniel Greenfeld和Audrey Roy Greenfeld，Two Scoops of Django作者
【本书特色】
本书由奋战在Python开发一线近20年的Luciano Ramalho执笔，Victor Stinner、Alex Martelli等Python大咖担纲技术审稿人，从语言设计层面剖析编程细节，兼顾Python 3和Python 2，告诉你Python中不亲自动手实践就无法理解的语言陷阱成因和解决之道，教你写出风格地道的Python代码。
●	Python数据模型：理解为什么特殊方法是对象行为一致的关键。
●	数据结构：充分利用内置类型，理解Unicode文本和字节二象性。
●	把函数视作对象：把Python函数视作一等对象，并了解这一点对流行的设计模式的影响。
●	面向对象习惯用法：通过构建类学习引用、可变性、接口、运算符重载和多重继承。
●	控制流程：学习使用上下文管理器、生成器、协程，以及通过concurrent.futures和asyncio包实现的并发。
●	元编程：理解特性、描述符、类装饰器和元类的工作原理。
【主要内容】
本书致力于帮助Python开发人员挖掘这门语言及相关程序库的优秀特性，避免重复劳动，同时写出简洁、流畅、易读、易维护，并且具有地道Python风格的代码。本书尤其深入探讨了Python语言的高级用法，涵盖数据结构、Python风格的对象、并行与并发，以及元编程等不同的方面。
本书适合中高级Python软件开发人员阅读参考。
【译者简介】
安道
专注于现代计算机技术的自由翻译，译有《Flask Web 开发》《Python 网络编程攻略》《Ruby on Rails 教程》等书。
个人网站：http:\/\/about.ac\/。
吴珂
现为Airbnb公司软件工程师，所在团队主要负责开发和维护各类可伸缩、高性能服务，并在Airbnb内推广面向服务的系统架构。在分布式系统、云存储服务和跨平台SDK开发，以及大规模数据处理等方面有多年经验。|,人民邮电出版社,139元
Python计算与编程实践,|（美）Mark Guzdial,（美）Barbara Ericson|,|计算机程序设计课程往往是枯燥乏味的，而本书根据教育理论，开发了一种新的教学方法，介绍如何通过多媒体编程来学习计算机程序设计，将趣味性和实用性融于枯燥的编程课程的教学当中。本书方法独特新颖，实例通俗易懂，可帮助读者快速入门并深入掌握编程技能，是一本理论联系实际的程序设计教程。
本书使用的编程语言是Python，这是因为Python强大实用（比如网站开发）、易于入门，计算机科学专业和非专业人士都可以学习。本书以Python数字多媒体编程为主线，从图像、声音、文本和电影这些学生已经熟知的内容开始，讲解它们的处理方法，其中穿插介绍计算机科学与程序设计的基础知识。在讲解知识点的时候也独具匠心，先介绍容易理解的基本概念，如赋值、顺序操作、迭代、条件式、函数定义等，逐步涉及抽象内容，如算法复杂度、程序效率、计算机组成、层次式分解、递归、面向对象等。本书还提供了大量例题和习题，方便教学。|,机械工业出版社,69.00元
Learning Python,Mark Lutz,|Amazon.com Review
The authors of Learning Python show you enough essentials of the Python scripting language to enable you to begin solving problems right away, then reveal more powerful aspects of the language one at a time. This approach is sure to appeal to programmers and system administrators who have urgent problems and a preference for learning by semi-guided experimentation.
First off, Learning Python shows the relationships among Python scripts and their interpreter (in a mostly platform-neutral way). Then, the authors address the mechanics of the language itself, providing illustrations of how Python conceives of numbers, strings, and other objects as well as the operators you use to work with them. Dictionaries, lists, tuples, and other data structures specific to Python receive plenty of attention including complete examples.
Authors Mark Lutz and David Ascher build on that fundamental information in their discussions of functions and modules, which evolve into coverage of namespaces, classes, and the object-oriented aspects of Python programming. There's also information on creating graphical user interfaces (GUIs) for Python applications with Tkinter.
In addition to its careful expository prose, Learning Python includes exercises that both test your Python skills and help reveal more elusive truths about the language. --This text refers to an out of print or unavailable edition of this title.
Review
As a book for programmers who want to learn Python, it does a very good job. The coverage is informative and well order; making it easy to find what you're looking for. Overall, if you do some work with Python, you will benefit from owning this book. " - Sam Smith, news@UK, March "This book is a good example of Python culture, in the clarity of its text as much as in the quality of its code. Anyhone working their way through it will have a solid foundation upon which to explore Python's potential. Highly recommended." - Ivan Uemilianin, CVu, October 2004 --This text refers to the Paperback edition.|,O'Reilly Media,USD 54.99
Think Python,Allen B. Downey,|Think Python is an introduction to Python programming for students with no programming experience. It starts with the most basic concepts of programming, and is carefully designed to define all terms when they are first used and to develop each new concept in a logical progression. Larger pieces, like recursion and object-oriented programming are divided into a sequence of smaller steps and introduced over the course of several chapters.|,O'Reilly Media,GBP 29.99
|Learn Python The Hard Way, 1st Edition|,Zed Shaw,|Learn Python The Hard Way is a book I wrote to teach programming to people who do not know how to code. It assumes you are probably a power user of your computer, and then takes you from nothing to programming simple games. After reading my book you should be ready for many of the other programming books out there.|,Lulu.com,$29.99
Selenium 2自动化测试实战,虫师,|《Selenium 2自动化测试实战——基于Python语言》共分 14 章。第 1 章是自动化测试相关基础知识的介绍；第 2 章到第 10 章是《Selenium 2自动化测试实战——基于Python语言》的重点，循 序渐进地介绍了自动化测试所用到的技术；第 11 章通过一个具体的项目综合运用了前面章节所介绍 的技术与技巧；第 12 章到第 14 章选取了当前最热门的技术进行了介绍，旨在扩展测试人员的综合技 术能力。 《Selenium 2自动化测试实战——基于Python语言》的写作目的并不是为了简单地告诉读者如何使用一个自动化测试工具，而是希望读者在学习
《Selenium 2自动化测试实战——基于Python语言》的内容后能够提高综合的技术高度与宽度，从而摆脱简单的手工测试，向高级测试工程师的道路 迈进。|,电子工业出版社,CNY 59.00
NumPy攻略,[印尼] Ivan Idris,|本书带领读者了解熟悉当下最流行的科学计算库NumPy的方方面面。书中不仅介绍了NumPy的安装、使用和各种相关概念，还介绍了如何利用这一最新的开源软件库，以尽可能接近传统数学语言的方式，编写可读性好、实现效率高和运行速度快的代码。最后还探究了几个和NumPy相关的科学计算项目。此外，本书将为你掌握NumPy数组和通用函数打下坚实的基础，也会通过实例教你用Matplotlib绘图，并了解和SciPy相关的项目。
本书将帮助你：
• 学习高级索引技术和线性代数知识
• 了解数组形状及图像大小的调整
• 探察广播机制和直方图
• 分析NumPy代码并用可视化的方式表示分析结果
• 用Cython为代码提速
• 使用数组接口共享数据
• 使用通用函数和互操作功能
• 学习Matplotlib以及经常和NumPy同时使用的SciPy|,人民邮电出版社,49.00
Python编程（第三版·英文影印版）,Mark Lutz,|《Python编程 第三版》已经成为Python用户的行业标准，且更加完善。第三版进行的更新反映了当前的最佳实践以及在语言的最新版本Python 2.5中引入的大量改变。
无论是新手还是老手，你都会发现这本经过彻底更新的书确实名副其实，它教给你编写代码的正确途径。它以清晰而简练的方式解释了Python语言的语法以及编程技巧，并辅以大量例子阐明正确的使用方法和通用特性。通过阅读这本全面的指南，你将学习到如何将Python运用到实际问题中，例如：
·用户图形界面编程
·并行处理
·网络应用程序
·Internet脚本编程
·数据库管理
从深入讨论核心概念开始，再到完整的程序，《Python编程 第三版》逐一覆盖这些领域。书中确有大型的程序示例，但只在你已经掌握了足够的知识，能够理解技术和代码后才会出现。
在学习过程中，你也会学到如何在实际规模的程序中使用Python——诸如面向对象编程和代码重用概念皆是贯穿全书的副题。如果你对Python 程序设计感兴趣，就需要这本O'Reilly经典书籍长伴你的左右。实践中的建议、代码的片断和程序设计模式，这些财富都可以在日常生活中得到应用——使你的生活更轻松更高效。|,东南大学出版社,138.00元
Python Tutorial,|Guido Van Rossum,Fred L. Drake, Jr (editor)|,最权威的 Python 教程，由 Python 作者 Guido van Rossum 主笔，有少许学院味道。中文电子版由刘鑫、李梦夷翻译。英文原稿网址：http:\/\/docs.python.org\/tut\/简体中文版网址：http:\/\/wiki.woodpecker.org.cn\/moin\/March_Liu\/PyTutorial,Iuniverse Inc,USD 12.95
Python UNIX和Linux系统管理指南,|基弗特 (Gift, Noab),琼斯 (Jones, Jeremy M.)|,|《Python UNIX和Linux系统管理指南》介绍了Python语言如何为管理uNIx和Linux服务器提供各种更加有效的任务处理方式。书中各章都提出了具体的管理问题，如并发或数据备份，然后通过Python示例提供了解决方案。通过《Python UNIX和Linux系统管理指南》，读者可以学习如何用Python开发自己的一套命令行工具来解决诸多问题。
作者建立了一个免费下载的Ubuntu虚拟机，其中包含《Python UNIX和Linux系统管理指南》的源代码和运行实例，也包括SNMP、IPython、SQLAlchemy及其他工具。通过《Python UNIX和Linux系统管理指南》，你可以发现Python在如下几个方面的作用：
读取文本文件并提取信息。
使用多线程和fork选项。
使用网络设备从一个进程获取另一个进程的信息。
创建可点击的、易于交互的GUl工具。
通过交互式SNMP编程实现监控大型主机集群。
掌握IPython shell，作为Bash、Korn或Z—Shell的替换或补充。
将云计算整合到基础设施中，编写Google App引擎的应用程序。
通过定制脚本解决独特数据备份的难题。
使用Djan90、SQLAlchemy和Storm ORM与数据库进行交互。
通过《Python UNIX和Linux系统管理指南》及其补充的虚拟机，你可以了解如何打包并部署Python应用程序和库，以及编写代码在类似的多个UNIXfH Linux平台上运行。|,机械工业出版社,65.00元
Foundations of Python Network Programming,|John Goerzen,Tim Bower,Brandon Rhodes|,|This second edition of Foundations of Python Network Programming targets Python 2.5 through Python 2.7, the most popular production versions of the language. Python has made great strides since Apress released the first edition of this book back in the days of Python 2.3. The advances required new chapters to be written from the ground up, and others to be extensively revised. You will learn fundamentals like IP, TCP, DNS and SSL by using working Python programs; you will also be able to familiarize yourself with infrastructure components like memcached and message queues. You can also delve into Network server designs, and compare threaded approaches with asynchronous event-based solutions. But the biggest change is this edition's expanded treatment of the web. The HTTP protocol is covered in extensive detail, with each feature accompanied by sample Python code. You can use your HTTP protocol expertise by studying an entire chapter on screen scraping and you can then test lxml and BeautifulSoup against a real-world web site. The chapter on web application programming now covers both the WSGI standard for component interoperability, as well as modern web frameworks like Django. Finally, all of the old favorites from the first edition are back: E-mail protocols like SMTP, POP, and IMAP get full treatment, as does XML-RPC. You can still learn how to code Python network programs using the Telnet and FTP protocols, but you are likely to appreciate the power of more modern alternatives like the paramiko SSH2 library. If you are a Python programmer who needs to learn the network, this is the book that you want by your side. What you'll learn * Understand low level networking * Handle sending and receiving email including composing and decoding emails, SMTP, POP and IMAP * Program the lower levels of web application programming such as FastCGI and WSGI and HTTP itself * Learn how to use memcached and message qeues using Python * Access web services using Python * Master multitasking with threads, forking, and asynchronous communication Who this book is for This book will be of interest to python programmers who need to program networked applications using Python. From web application developers, to systems integrators, to system administrators--this book has everything you need to know. Table of Contents * Introduction to Client\/Server Networking * UDP * TCP * Socket Names and DNS * Network Data and Network Errors * TLS and SSL * Server Architecture * Caches, Message Queues, and Map-Reduce * HTTP * Screen Scraping * Web Applications * E-mail Composition and Decoding * SMTP * POP * IMAP * Telnet and SSH * FTP * RPC|,Apress,USD 54.99
How to Think Like a Computer Scientist: Learning with Python,|Allen B. Downey,Jeffrey Elkner,Chris Meyers|,|""How to Think Like a Computer Scientist"" is an introduction to programming using Python, one of the best languages for beginners. This is a Free Book -- you can download it from thinkpython.com. But if you would like to make a contribution to this project, you can do it by buying a hardcopy or paying to download the electronic version here. Thank you!|,Green Tea Press,USD 24.95
Python机器学习,[美] Michael Bowles,|在学习和研究机器学习的时候，面临令人眼花缭乱的算法，机器学习新手往往会不知
所措。本书从算法和Python 语言实现的角度，帮助读者认识机器学习。
书专注于两类核心的“算法族”，即惩罚线性回归和集成方法，并通过代码实例来
展示所讨论的算法的使用原则。全书共分为7 章，详细讨论了预测模型的两类核心算法、预测模型的构建、惩罚线性回归和集成方法的具体应用和实现。
本书主要针对想提高机器学习技能的Python 开发人员，帮助他们解决某一特定的项
目或是提升相关的技能。|,人民邮电出版社,69.00元
从Python开始学编程,Vamei,改编自Vamei博客的《Python快速教程》。本书以Python为样本，不仅介绍了编程的基本概念，还着重讲解编程语言的主流范式：面向过程、面向对象、面向函数。读者不仅可以轻松学会Python，以后再学习其他编程语言时也会更加容易。,电子工业出版社,CNY 49.00
Natural Language Processing with Python,|Steven Bird,Ewan Klein,Edward Loper|,|This book offers a highly accessible introduction to Natural Language Processing, the field that underpins a variety of language technologies, ranging from predictive text and email filtering to automatic summarization and translation. With Natural Language Processing with Python, you'll learn how to write Python programs to work with large collections of unstructured text. You'll access richly-annotated datasets using a comprehensive range of linguistic data structures. And you'll understand the main algorithms for analyzing the content and structure of written communication.
Packed with examples and exercises, Natural Language Processing with Python will help you:
* Extract information from unstructured text, to guess the topic or identify "named entities"
* Analyze linguistic structure in text, including parsing and semantic analysis
* Access popular linguistic databases, including WordNet and treebanks
* Integrate techniques drawn from fields as diverse as linguistics and artificial intelligence
Perfect for individual study, or as a classroom and workshop textbook, this book will help you gain practical skills in Natural Language Processing using the Python programming language and the Natural Language Toolkit (NLTK) open source library.
If you're interested in developing Web applications, analyzing multilingual news sources, documenting endangered languages, or if you are simply curious to have a programmer's perspective on how human language works, you will find Natural Language Processing with Python both fascinating and immensely useful.|,O'Reilly Media,USD 44.99
Fluent Python,Luciano Ramalho,|Learn how to write idiomatic, effective Python code by leveraging its best features. Python's simplicity quickly lets you become productive with it, but this often means you aren’t using everything the language has to offer. By taking you through Python’s key language features and libraries, this practical book shows you how to make your code shorter, faster, and more readable all at the same time—what experts consider Pythonic.
Many programmers who learn Python basics fall into the trap of reinventing the wheel because of past experience in other languages, and try to bend the language to patterns that don't really apply to it. Author Luciano Ramalho, a Python Software Foundation member and Python programmer for 15 years, helps you drop your accent from another language so you can code Python fluently.
•Learn practical applications of generators for database processing
•Rethink some design patterns in a Python context
•Examine attribute descriptors and when to use them: the key to ORMs
•Explore Pythonic objects: protocols versus interfaces, abstract base classes and multiple inheritance|,O'Reilly Media,USD 39.99
Python金融大数据分析,[德] 伊夫·希尔皮斯科,|唯一一本详细讲解使用Python分析处理金融大数据的专业图书；金融应用开发领域从业人员必读。
Python凭借其简单、易读、可扩展性以及拥有巨大而活跃的科学计算社区，在需要分析、处理大量数据的金融行业得到了广泛而迅速的应用，并且成为该行业开发核心应用的首选编程语言。《Python金融大数据分析》提供了使用Python进行数据分析，以及开发相关应用程序的技巧和工具。
《Python金融大数据分析》总计分为3部分，共19章，第1部分介绍了Python在金融学中的应用，其内容涵盖了Python用于金融行业的原因、Python的基础架构和工具，以及Python在计量金融学中的一些具体入门实例；第2部分介绍了金融分析和应用程序开发中最重要的Python库、技术和方法，其内容涵盖了Python的数据类型和结构、用matplotlib进行数据可视化、金融时间序列数据处理、高性能输入\/输出操作、高性能的Python技术和库、金融学中需要的多种数学工具、随机数生成和随机过程模拟、Python统计学应用、Python和Excel的集成、Python面向对象编程和GUI的开发、Python与Web技术的集成，以及基于Web应用和Web服务的开发；第3部分关注的是蒙特卡洛模拟期权与衍生品定价实际应用的开发工作，其内容涵盖了估值框架的介绍、金融模型的模拟、衍生品的估值、投资组合的估值、波动率期权等知识。
《Python金融大数据分析》适合对使用Python进行大数据分析、处理感兴趣的金融行业开发人员阅读。|,人民邮电出版社,CNY 99.00
Python参考手册（第4版）,David M.Beazley,|本书是权威的Python语言参考指南，内容涉及核心Python语言和Python库的最重要部分。本书内容简洁扼要、可读性强，书中还包括了一些没有在Python官方文档或其他资料中出现过的一些高级的主题。
这一版在内容上进行了全面更新，介绍了Python 2.6和Python 3新引入的编程语言特性和库模块，同时还分析了Python程序员面临的如下难题：是应继续使用现有的Python代码，还是应制定计划将其移植到Python 3？|,人民邮电出版社,89.00元
编写高质量代码：改善Python程序的91个建议,|张颖,赖勇浩|,|在通往“Python技术殿堂”的路上，本书将为你编写健壮、优雅、高质量的Python代码提供切实帮助！内容全部由Python编码的最佳实践组成，从基本原则、惯用法、语法、库、设计模式、内部机制、开发工具和性能优化8个方面深入探讨了编写高质量Python代码的技巧与禁忌，一共总结出91条宝贵的建议。每条建议对应Python程序员可能会遇到的一个问题。本书不仅以建议的方式从正反两方面给出了被实践证明为十分优秀的解决方案或非常糟糕的解决方案，而且分析了问题产生的根源，会使人有一种醍醐灌顶的感觉，豁然开朗。
《编写高质量代码：改善Python程序的91个建议》针对每个问题所选择的应用场景都非常典型，给出的建议也都与实践紧密结合。书中的每一条建议都可能在你的下一行代码、下一个应用或下一个项目中显露锋芒。建议你将本书搁置在手边，随时查阅，相信这么做一定能使你的学习和开发工作事半功倍。|,机械工业出版社,59.00元
流畅的Python,[巴西] Luciano Ramalho,|【技术大咖推荐】
“很荣幸担任这本优秀图书的技术审校。这本书能帮助很多中级Python程序员掌握这门语言，我也从中学到了相当多的知识！”——Alex Martelli，Python软件基金会成员
“对于想要扩充知识的中级和高级Python程序员来说，这本书是充满了实用编程技巧的宝藏。”——Daniel Greenfeld和Audrey Roy Greenfeld，Two Scoops of Django作者
【本书特色】
本书由奋战在Python开发一线近20年的Luciano Ramalho执笔，Victor Stinner、Alex Martelli等Python大咖担纲技术审稿人，从语言设计层面剖析编程细节，兼顾Python 3和Python 2，告诉你Python中不亲自动手实践就无法理解的语言陷阱成因和解决之道，教你写出风格地道的Python代码。
●	Python数据模型：理解为什么特殊方法是对象行为一致的关键。
●	数据结构：充分利用内置类型，理解Unicode文本和字节二象性。
●	把函数视作对象：把Python函数视作一等对象，并了解这一点对流行的设计模式的影响。
●	面向对象习惯用法：通过构建类学习引用、可变性、接口、运算符重载和多重继承。
●	控制流程：学习使用上下文管理器、生成器、协程，以及通过concurrent.futures和asyncio包实现的并发。
●	元编程：理解特性、描述符、类装饰器和元类的工作原理。
【主要内容】
本书致力于帮助Python开发人员挖掘这门语言及相关程序库的优秀特性，避免重复劳动，同时写出简洁、流畅、易读、易维护，并且具有地道Python风格的代码。本书尤其深入探讨了Python语言的高级用法，涵盖数据结构、Python风格的对象、并行与并发，以及元编程等不同的方面。
本书适合中高级Python软件开发人员阅读参考。
【译者简介】
安道
专注于现代计算机技术的自由翻译，译有《Flask Web 开发》《Python 网络编程攻略》《Ruby on Rails 教程》等书。
个人网站：http:\/\/about.ac\/。
吴珂
现为Airbnb公司软件工程师，所在团队主要负责开发和维护各类可伸缩、高性能服务，并在Airbnb内推广面向服务的系统架构。在分布式系统、云存储服务和跨平台SDK开发，以及大规模数据处理等方面有多年经验。|,人民邮电出版社,139元
Python计算与编程实践,|（美）Mark Guzdial,（美）Barbara Ericson|,|计算机程序设计课程往往是枯燥乏味的，而本书根据教育理论，开发了一种新的教学方法，介绍如何通过多媒体编程来学习计算机程序设计，将趣味性和实用性融于枯燥的编程课程的教学当中。本书方法独特新颖，实例通俗易懂，可帮助读者快速入门并深入掌握编程技能，是一本理论联系实际的程序设计教程。
本书使用的编程语言是Python，这是因为Python强大实用（比如网站开发）、易于入门，计算机科学专业和非专业人士都可以学习。本书以Python数字多媒体编程为主线，从图像、声音、文本和电影这些学生已经熟知的内容开始，讲解它们的处理方法，其中穿插介绍计算机科学与程序设计的基础知识。在讲解知识点的时候也独具匠心，先介绍容易理解的基本概念，如赋值、顺序操作、迭代、条件式、函数定义等，逐步涉及抽象内容，如算法复杂度、程序效率、计算机组成、层次式分解、递归、面向对象等。本书还提供了大量例题和习题，方便教学。|,机械工业出版社,69.00元
Learning Python,Mark Lutz,|Amazon.com Review
The authors of Learning Python show you enough essentials of the Python scripting language to enable you to begin solving problems right away, then reveal more powerful aspects of the language one at a time. This approach is sure to appeal to programmers and system administrators who have urgent problems and a preference for learning by semi-guided experimentation.
First off, Learning Python shows the relationships among Python scripts and their interpreter (in a mostly platform-neutral way). Then, the authors address the mechanics of the language itself, providing illustrations of how Python conceives of numbers, strings, and other objects as well as the operators you use to work with them. Dictionaries, lists, tuples, and other data structures specific to Python receive plenty of attention including complete examples.
Authors Mark Lutz and David Ascher build on that fundamental information in their discussions of functions and modules, which evolve into coverage of namespaces, classes, and the object-oriented aspects of Python programming. There's also information on creating graphical user interfaces (GUIs) for Python applications with Tkinter.
In addition to its careful expository prose, Learning Python includes exercises that both test your Python skills and help reveal more elusive truths about the language. --This text refers to an out of print or unavailable edition of this title.
Review
As a book for programmers who want to learn Python, it does a very good job. The coverage is informative and well order; making it easy to find what you're looking for. Overall, if you do some work with Python, you will benefit from owning this book. " - Sam Smith, news@UK, March "This book is a good example of Python culture, in the clarity of its text as much as in the quality of its code. Anyhone working their way through it will have a solid foundation upon which to explore Python's potential. Highly recommended." - Ivan Uemilianin, CVu, October 2004 --This text refers to the Paperback edition.|,O'Reilly Media,USD 54.99
Think Python,Allen B. Downey,|Think Python is an introduction to Python programming for students with no programming experience. It starts with the most basic concepts of programming, and is carefully designed to define all terms when they are first used and to develop each new concept in a logical progression. Larger pieces, like recursion and object-oriented programming are divided into a sequence of smaller steps and introduced over the course of several chapters.|,O'Reilly Media,GBP 29.99
|Learn Python The Hard Way, 1st Edition|,Zed Shaw,|Learn Python The Hard Way is a book I wrote to teach programming to people who do not know how to code. It assumes you are probably a power user of your computer, and then takes you from nothing to programming simple games. After reading my book you should be ready for many of the other programming books out there.|,Lulu.com,$29.99
Selenium 2自动化测试实战,虫师,|《Selenium 2自动化测试实战——基于Python语言》共分 14 章。第 1 章是自动化测试相关基础知识的介绍；第 2 章到第 10 章是《Selenium 2自动化测试实战——基于Python语言》的重点，循 序渐进地介绍了自动化测试所用到的技术；第 11 章通过一个具体的项目综合运用了前面章节所介绍 的技术与技巧；第 12 章到第 14 章选取了当前最热门的技术进行了介绍，旨在扩展测试人员的综合技 术能力。 《Selenium 2自动化测试实战——基于Python语言》的写作目的并不是为了简单地告诉读者如何使用一个自动化测试工具，而是希望读者在学习
《Selenium 2自动化测试实战——基于Python语言》的内容后能够提高综合的技术高度与宽度，从而摆脱简单的手工测试，向高级测试工程师的道路 迈进。|,电子工业出版社,CNY 59.00
NumPy攻略,[印尼] Ivan Idris,|本书带领读者了解熟悉当下最流行的科学计算库NumPy的方方面面。书中不仅介绍了NumPy的安装、使用和各种相关概念，还介绍了如何利用这一最新的开源软件库，以尽可能接近传统数学语言的方式，编写可读性好、实现效率高和运行速度快的代码。最后还探究了几个和NumPy相关的科学计算项目。此外，本书将为你掌握NumPy数组和通用函数打下坚实的基础，也会通过实例教你用Matplotlib绘图，并了解和SciPy相关的项目。
本书将帮助你：
• 学习高级索引技术和线性代数知识
• 了解数组形状及图像大小的调整
• 探察广播机制和直方图
• 分析NumPy代码并用可视化的方式表示分析结果
• 用Cython为代码提速
• 使用数组接口共享数据
• 使用通用函数和互操作功能
• 学习Matplotlib以及经常和NumPy同时使用的SciPy|,人民邮电出版社,49.00
Python编程（第三版·英文影印版）,Mark Lutz,|《Python编程 第三版》已经成为Python用户的行业标准，且更加完善。第三版进行的更新反映了当前的最佳实践以及在语言的最新版本Python 2.5中引入的大量改变。
无论是新手还是老手，你都会发现这本经过彻底更新的书确实名副其实，它教给你编写代码的正确途径。它以清晰而简练的方式解释了Python语言的语法以及编程技巧，并辅以大量例子阐明正确的使用方法和通用特性。通过阅读这本全面的指南，你将学习到如何将Python运用到实际问题中，例如：
·用户图形界面编程
·并行处理
·网络应用程序
·Internet脚本编程
·数据库管理
从深入讨论核心概念开始，再到完整的程序，《Python编程 第三版》逐一覆盖这些领域。书中确有大型的程序示例，但只在你已经掌握了足够的知识，能够理解技术和代码后才会出现。
在学习过程中，你也会学到如何在实际规模的程序中使用Python——诸如面向对象编程和代码重用概念皆是贯穿全书的副题。如果你对Python 程序设计感兴趣，就需要这本O'Reilly经典书籍长伴你的左右。实践中的建议、代码的片断和程序设计模式，这些财富都可以在日常生活中得到应用——使你的生活更轻松更高效。|,东南大学出版社,138.00元
Python Tutorial,|Guido Van Rossum,Fred L. Drake, Jr (editor)|,最权威的 Python 教程，由 Python 作者 Guido van Rossum 主笔，有少许学院味道。中文电子版由刘鑫、李梦夷翻译。英文原稿网址：http:\/\/docs.python.org\/tut\/简体中文版网址：http:\/\/wiki.woodpecker.org.cn\/moin\/March_Liu\/PyTutorial,Iuniverse Inc,USD 12.95
Python UNIX和Linux系统管理指南,|基弗特 (Gift, Noab),琼斯 (Jones, Jeremy M.)|,|《Python UNIX和Linux系统管理指南》介绍了Python语言如何为管理uNIx和Linux服务器提供各种更加有效的任务处理方式。书中各章都提出了具体的管理问题，如并发或数据备份，然后通过Python示例提供了解决方案。通过《Python UNIX和Linux系统管理指南》，读者可以学习如何用Python开发自己的一套命令行工具来解决诸多问题。
作者建立了一个免费下载的Ubuntu虚拟机，其中包含《Python UNIX和Linux系统管理指南》的源代码和运行实例，也包括SNMP、IPython、SQLAlchemy及其他工具。通过《Python UNIX和Linux系统管理指南》，你可以发现Python在如下几个方面的作用：
读取文本文件并提取信息。
使用多线程和fork选项。
使用网络设备从一个进程获取另一个进程的信息。
创建可点击的、易于交互的GUl工具。
通过交互式SNMP编程实现监控大型主机集群。
掌握IPython shell，作为Bash、Korn或Z—Shell的替换或补充。
将云计算整合到基础设施中，编写Google App引擎的应用程序。
通过定制脚本解决独特数据备份的难题。
使用Djan90、SQLAlchemy和Storm ORM与数据库进行交互。
通过《Python UNIX和Linux系统管理指南》及其补充的虚拟机，你可以了解如何打包并部署Python应用程序和库，以及编写代码在类似的多个UNIXfH Linux平台上运行。|,机械工业出版社,65.00元
Foundations of Python Network Programming,|John Goerzen,Tim Bower,Brandon Rhodes|,|This second edition of Foundations of Python Network Programming targets Python 2.5 through Python 2.7, the most popular production versions of the language. Python has made great strides since Apress released the first edition of this book back in the days of Python 2.3. The advances required new chapters to be written from the ground up, and others to be extensively revised. You will learn fundamentals like IP, TCP, DNS and SSL by using working Python programs; you will also be able to familiarize yourself with infrastructure components like memcached and message queues. You can also delve into Network server designs, and compare threaded approaches with asynchronous event-based solutions. But the biggest change is this edition's expanded treatment of the web. The HTTP protocol is covered in extensive detail, with each feature accompanied by sample Python code. You can use your HTTP protocol expertise by studying an entire chapter on screen scraping and you can then test lxml and BeautifulSoup against a real-world web site. The chapter on web application programming now covers both the WSGI standard for component interoperability, as well as modern web frameworks like Django. Finally, all of the old favorites from the first edition are back: E-mail protocols like SMTP, POP, and IMAP get full treatment, as does XML-RPC. You can still learn how to code Python network programs using the Telnet and FTP protocols, but you are likely to appreciate the power of more modern alternatives like the paramiko SSH2 library. If you are a Python programmer who needs to learn the network, this is the book that you want by your side. What you'll learn * Understand low level networking * Handle sending and receiving email including composing and decoding emails, SMTP, POP and IMAP * Program the lower levels of web application programming such as FastCGI and WSGI and HTTP itself * Learn how to use memcached and message qeues using Python * Access web services using Python * Master multitasking with threads, forking, and asynchronous communication Who this book is for This book will be of interest to python programmers who need to program networked applications using Python. From web application developers, to systems integrators, to system administrators--this book has everything you need to know. Table of Contents * Introduction to Client\/Server Networking * UDP * TCP * Socket Names and DNS * Network Data and Network Errors * TLS and SSL * Server Architecture * Caches, Message Queues, and Map-Reduce * HTTP * Screen Scraping * Web Applications * E-mail Composition and Decoding * SMTP * POP * IMAP * Telnet and SSH * FTP * RPC|,Apress,USD 54.99
How to Think Like a Computer Scientist: Learning with Python,|Allen B. Downey,Jeffrey Elkner,Chris Meyers|,|""How to Think Like a Computer Scientist"" is an introduction to programming using Python, one of the best languages for beginners. This is a Free Book -- you can download it from thinkpython.com. But if you would like to make a contribution to this project, you can do it by buying a hardcopy or paying to download the electronic version here. Thank you!|,Green Tea Press,USD 24.95
Python机器学习,[美] Michael Bowles,|在学习和研究机器学习的时候，面临令人眼花缭乱的算法，机器学习新手往往会不知
所措。本书从算法和Python 语言实现的角度，帮助读者认识机器学习。
书专注于两类核心的“算法族”，即惩罚线性回归和集成方法，并通过代码实例来
展示所讨论的算法的使用原则。全书共分为7 章，详细讨论了预测模型的两类核心算法、预测模型的构建、惩罚线性回归和集成方法的具体应用和实现。
本书主要针对想提高机器学习技能的Python 开发人员，帮助他们解决某一特定的项
目或是提升相关的技能。|,人民邮电出版社,69.00元
从Python开始学编程,Vamei,改编自Vamei博客的《Python快速教程》。本书以Python为样本，不仅介绍了编程的基本概念，还着重讲解编程语言的主流范式：面向过程、面向对象、面向函数。读者不仅可以轻松学会Python，以后再学习其他编程语言时也会更加容易。,电子工业出版社,CNY 49.00
Natural Language Processing with Python,|Steven Bird,Ewan Klein,Edward Loper|,|This book offers a highly accessible introduction to Natural Language Processing, the field that underpins a variety of language technologies, ranging from predictive text and email filtering to automatic summarization and translation. With Natural Language Processing with Python, you'll learn how to write Python programs to work with large collections of unstructured text. You'll access richly-annotated datasets using a comprehensive range of linguistic data structures. And you'll understand the main algorithms for analyzing the content and structure of written communication.
Packed with examples and exercises, Natural Language Processing with Python will help you:
* Extract information from unstructured text, to guess the topic or identify "named entities"
* Analyze linguistic structure in text, including parsing and semantic analysis
* Access popular linguistic databases, including WordNet and treebanks
* Integrate techniques drawn from fields as diverse as linguistics and artificial intelligence
Perfect for individual study, or as a classroom and workshop textbook, this book will help you gain practical skills in Natural Language Processing using the Python programming language and the Natural Language Toolkit (NLTK) open source library.
If you're interested in developing Web applications, analyzing multilingual news sources, documenting endangered languages, or if you are simply curious to have a programmer's perspective on how human language works, you will find Natural Language Processing with Python both fascinating and immensely useful.|,O'Reilly Media,USD 44.99
Python,James O. Knowlton,|Python: Create-Modify-Reuse is designed for all levels of Python developers interested in a practical, hands-on way of learning Python development. This book is designed to show you how to use Python (in combination with the raw processing power of your computer) to accomplish real-world tasks in a more efficient way. Don't look for an exhaustive description of the Python language––you won't find it. The book's main purpose is not to thoroughly cover the Python language, but rather to show how you can use Python to create robust, real-world applications. In this respect, the goal is similar to foreign-language books that identify themselves as “conversational,” focusing on the vocabulary and concepts that people will need the most. Likewise, I focus specifically on the Python knowledge needed to accomplish practical, specific tasks. Along the way, you will learn to create useful, efficient scripts that are easy to maintain and enhance. This book is for developers with some experience with Python who want to explore how to develop full-blown applications. It is also for developers with experience in other languages who want to learn Python by building robust applications. It is well-suited for developers who like to “learn by doing,” rather than exploring a language feature by feature. To get the most out of the book, you should understand basic programming principles. Because this book is project-based, you can approach it in numerous ways. You can, of course, read it from cover to cover. Chapters 2 through 8 each cover a different project, so the chapters are independent of each other. However, because each chapter project is covered individually, there may be some overlap of information. I also sometimes refer to explanations of particular topics covered in previous chapters. This will help to reinforce important concepts. The end of the book contains two appendixes. The first one is a listing of Python resources you can check out for more information. The second one will help you with installing additional components used in some of the examples. This book starts with a basic overview of the Python language, designed for those familiar with other languages but new to Python. It is followed by several chapters, each of which describes a complete project that can be used as-is or modified and extended to suit your particular purposes. You'll find applications that access databases, take advantage of web technologies, and facilitate network communications, to name a few. In addition, and more important than the technologies you will be introduced to, you will learn how to use Python to solve real challenges. Following these chapters are two chapters that cover accessing operating system resources and debugging and testing, respectively. Each project chapter contains complete instructions describing how to install and use the application, so you can actually see the program run as you learn how to construct and use it, including how the project was designed and prototyped. This book is intended to be both a reference guide and a learning aid, teaching you how to build solutions with Python and providing reference information on a wide variety of Python programming concepts. It is hoped that this book will help you have fun with Python and build useful applications, and—unlike my experience with building a deck—without sore thumbs. This book is framed around the code itself. This is because developers are typically looking for how to do something; and, as with many activities, you learn how to do something by watching how others do and trying it yourself. If you want to know how a  for  loop works, you'll find  for  loops in my code, but that's not the thrust of the book. Instead, this book shows you how to do things: how to build a content management system, how to build a test management system, how to set up a system for tracking customer follow-up, and so on. Along the way, you'll learn how to communicate with a SQL database, how to act as a web server or communicate with one, how to access operating system services, and more. There are three basic components to the book: Chapter 1 is a brief overview of the Python language. Chapters 2–8 cover seven different programming projects, which illustrate various technologies and techniques available to Python developers. Chapters 9–10 cover additional, advanced topics, which will help you as you build Python projects. The project chapters have a consistent structure: Overview: What does the application do? Using the program Design How it all fits together Modules involved Code and code explanation Module\/class 1 explanation Module\/class 2 explanation Minor code file explanation Testing, including suggested tests Modifying the project, including some suggested adaptations Summary Each project is designed with classes that can be reused and accessed for multiple purposes. This is one of the main benefits of object-oriented programming, so designing for reusability is a main focus of the book. The book contains the following chapters: 1. Python Basics This chapter is a basic primer on the Python language, and it functions as either a quick tutorial for experienced programmers new to Python or a refresher for programmers with Python experience. Part I: The Projects 2. Directory\/File Snapshot Program This project demonstrates how to interact with files, create and manipulate data structures, and provide user output. It also touches on code design issues to improve code maintainability. Often when installing or uninstalling software, or verifying changes to a file system, it can be valuable to take a “snapshot” of the files and directories, along with their size and last-modified time. The script introduced in this chapter does just that. This chapter also explores how to capture a directory listing into a Python list, and explains how to query this list for particular values. 3. DVD Inventory System This project takes advantage of Python’s capability to access and manipulate data in a SQL database. The application enables multiple users to log in to a website that provides access to a DVD inventory database. Permissions are set such that some users can add, modify, or delete entries, whereas other users have read-only access to the data. 4. Web Performance Tester This project shows how to communicate with a Python web server and retrieve information regarding how long it takes to receive requested items from the web server. Although writing Python programs to work on a single computer can be useful, the real power of Python can be seen when it is used to script communication between computers on a network. Most networks contain several web servers. A nice feature of Python is that it can act as a lightweight server for various Internet protocols, such as HTTP (web) and ftp. This application enables you to monitor performance of HTTP traffic on your network. 5. Customer Follow-Up System This project shows how to present a web form to the user and retrieve data from it, how to automatically format and send e-mail through an SMTP server, and how to generate an HTML-formatted report. The task for the second example is to automatically generate a customer comments e-mail message based on information the customer enters in a form. It uses the  mod_python  Apache module to take the information entered in the HTTP form and then utilizes a Python script on the web server to send that information to an SMTP server for mail delivery. 6. Test Management\/Reporting System This project makes use of the  unittest  module to run tests against an existing application, and creates a framework for reporting test results. Testing is a vital process for developing software. This application enables users to run tests for a given piece of software, to list the previous test runs by date, to show test run results for any previously run tests, and to output the results of any test run as HTML for viewing in a web browser. 7. Version Management System This project connects to a list of servers via telnet, checks the application version of a pre-set application list, and displays its results both as output and to a log file. Often, a system administrator needs to patch systems or ensure that systems have the latest application versions installed. This script is an easy way to accomplish that task. It makes use of Python’s capability to emulate a telnet client and log in to remote systems and perform functions on that remote system. 8. Content Management System This project explores Plone, a popular content management system based on Python and Zope (a Python-based application server). Because Python is a very mature language, numerous applications have been built on top of it. A great thing about working with Python-based applications is that you get the benefit of a full-blown application but you can still use Python to configure and customize it. Part II: Advanced Topics 9. Interacting with the Operating System When writing scripts “in the real world,” often it is critical to be able to access services available through (and particular to) the operating system you happen to be on. For example, suppose you wanted to read or modify the Window Registry? Or you wanted to get the Linux process ID of a particular process that is running? Is such a thing even possible? Definitely—and this chapter shows you how. 10. Debugging and Testing Because I am a software tester myself, testing is a subject that is certainly close to my heart. In this chapter, I discuss why testing is important, how to put the right amount of testing into your code, and how writing automated tests can help you to actually write code more quickly. You’ll look at PyUnit, the automated testing framework for Python, and learn how to use it to test the riskiest parts of a script. You’ll also explore the Python de...|,Wrox,USD 39.99
Python金融大数据分析,[德] 伊夫·希尔皮斯科,|唯一一本详细讲解使用Python分析处理金融大数据的专业图书；金融应用开发领域从业人员必读。
Python凭借其简单、易读、可扩展性以及拥有巨大而活跃的科学计算社区，在需要分析、处理大量数据的金融行业得到了广泛而迅速的应用，并且成为该行业开发核心应用的首选编程语言。《Python金融大数据分析》提供了使用Python进行数据分析，以及开发相关应用程序的技巧和工具。
《Python金融大数据分析》总计分为3部分，共19章，第1部分介绍了Python在金融学中的应用，其内容涵盖了Python用于金融行业的原因、Python的基础架构和工具，以及Python在计量金融学中的一些具体入门实例；第2部分介绍了金融分析和应用程序开发中最重要的Python库、技术和方法，其内容涵盖了Python的数据类型和结构、用matplotlib进行数据可视化、金融时间序列数据处理、高性能输入\/输出操作、高性能的Python技术和库、金融学中需要的多种数学工具、随机数生成和随机过程模拟、Python统计学应用、Python和Excel的集成、Python面向对象编程和GUI的开发、Python与Web技术的集成，以及基于Web应用和Web服务的开发；第3部分关注的是蒙特卡洛模拟期权与衍生品定价实际应用的开发工作，其内容涵盖了估值框架的介绍、金融模型的模拟、衍生品的估值、投资组合的估值、波动率期权等知识。
《Python金融大数据分析》适合对使用Python进行大数据分析、处理感兴趣的金融行业开发人员阅读。|,人民邮电出版社,CNY 99.00
Python参考手册（第4版）,David M.Beazley,|本书是权威的Python语言参考指南，内容涉及核心Python语言和Python库的最重要部分。本书内容简洁扼要、可读性强，书中还包括了一些没有在Python官方文档或其他资料中出现过的一些高级的主题。
这一版在内容上进行了全面更新，介绍了Python 2.6和Python 3新引入的编程语言特性和库模块，同时还分析了Python程序员面临的如下难题：是应继续使用现有的Python代码，还是应制定计划将其移植到Python 3？|,人民邮电出版社,89.00元
编写高质量代码：改善Python程序的91个建议,|张颖,赖勇浩|,|在通往“Python技术殿堂”的路上，本书将为你编写健壮、优雅、高质量的Python代码提供切实帮助！内容全部由Python编码的最佳实践组成，从基本原则、惯用法、语法、库、设计模式、内部机制、开发工具和性能优化8个方面深入探讨了编写高质量Python代码的技巧与禁忌，一共总结出91条宝贵的建议。每条建议对应Python程序员可能会遇到的一个问题。本书不仅以建议的方式从正反两方面给出了被实践证明为十分优秀的解决方案或非常糟糕的解决方案，而且分析了问题产生的根源，会使人有一种醍醐灌顶的感觉，豁然开朗。
《编写高质量代码：改善Python程序的91个建议》针对每个问题所选择的应用场景都非常典型，给出的建议也都与实践紧密结合。书中的每一条建议都可能在你的下一行代码、下一个应用或下一个项目中显露锋芒。建议你将本书搁置在手边，随时查阅，相信这么做一定能使你的学习和开发工作事半功倍。|,机械工业出版社,59.00元
流畅的Python,[巴西] Luciano Ramalho,|【技术大咖推荐】
“很荣幸担任这本优秀图书的技术审校。这本书能帮助很多中级Python程序员掌握这门语言，我也从中学到了相当多的知识！”——Alex Martelli，Python软件基金会成员
“对于想要扩充知识的中级和高级Python程序员来说，这本书是充满了实用编程技巧的宝藏。”——Daniel Greenfeld和Audrey Roy Greenfeld，Two Scoops of Django作者
【本书特色】
本书由奋战在Python开发一线近20年的Luciano Ramalho执笔，Victor Stinner、Alex Martelli等Python大咖担纲技术审稿人，从语言设计层面剖析编程细节，兼顾Python 3和Python 2，告诉你Python中不亲自动手实践就无法理解的语言陷阱成因和解决之道，教你写出风格地道的Python代码。
●	Python数据模型：理解为什么特殊方法是对象行为一致的关键。
●	数据结构：充分利用内置类型，理解Unicode文本和字节二象性。
●	把函数视作对象：把Python函数视作一等对象，并了解这一点对流行的设计模式的影响。
●	面向对象习惯用法：通过构建类学习引用、可变性、接口、运算符重载和多重继承。
●	控制流程：学习使用上下文管理器、生成器、协程，以及通过concurrent.futures和asyncio包实现的并发。
●	元编程：理解特性、描述符、类装饰器和元类的工作原理。
【主要内容】
本书致力于帮助Python开发人员挖掘这门语言及相关程序库的优秀特性，避免重复劳动，同时写出简洁、流畅、易读、易维护，并且具有地道Python风格的代码。本书尤其深入探讨了Python语言的高级用法，涵盖数据结构、Python风格的对象、并行与并发，以及元编程等不同的方面。
本书适合中高级Python软件开发人员阅读参考。
【译者简介】
安道
专注于现代计算机技术的自由翻译，译有《Flask Web 开发》《Python 网络编程攻略》《Ruby on Rails 教程》等书。
个人网站：http:\/\/about.ac\/。
吴珂
现为Airbnb公司软件工程师，所在团队主要负责开发和维护各类可伸缩、高性能服务，并在Airbnb内推广面向服务的系统架构。在分布式系统、云存储服务和跨平台SDK开发，以及大规模数据处理等方面有多年经验。|,人民邮电出版社,139元
Python计算与编程实践,|（美）Mark Guzdial,（美）Barbara Ericson|,|计算机程序设计课程往往是枯燥乏味的，而本书根据教育理论，开发了一种新的教学方法，介绍如何通过多媒体编程来学习计算机程序设计，将趣味性和实用性融于枯燥的编程课程的教学当中。本书方法独特新颖，实例通俗易懂，可帮助读者快速入门并深入掌握编程技能，是一本理论联系实际的程序设计教程。
本书使用的编程语言是Python，这是因为Python强大实用（比如网站开发）、易于入门，计算机科学专业和非专业人士都可以学习。本书以Python数字多媒体编程为主线，从图像、声音、文本和电影这些学生已经熟知的内容开始，讲解它们的处理方法，其中穿插介绍计算机科学与程序设计的基础知识。在讲解知识点的时候也独具匠心，先介绍容易理解的基本概念，如赋值、顺序操作、迭代、条件式、函数定义等，逐步涉及抽象内容，如算法复杂度、程序效率、计算机组成、层次式分解、递归、面向对象等。本书还提供了大量例题和习题，方便教学。|,机械工业出版社,69.00元
Learning Python,Mark Lutz,|Amazon.com Review
The authors of Learning Python show you enough essentials of the Python scripting language to enable you to begin solving problems right away, then reveal more powerful aspects of the language one at a time. This approach is sure to appeal to programmers and system administrators who have urgent problems and a preference for learning by semi-guided experimentation.
First off, Learning Python shows the relationships among Python scripts and their interpreter (in a mostly platform-neutral way). Then, the authors address the mechanics of the language itself, providing illustrations of how Python conceives of numbers, strings, and other objects as well as the operators you use to work with them. Dictionaries, lists, tuples, and other data structures specific to Python receive plenty of attention including complete examples.
Authors Mark Lutz and David Ascher build on that fundamental information in their discussions of functions and modules, which evolve into coverage of namespaces, classes, and the object-oriented aspects of Python programming. There's also information on creating graphical user interfaces (GUIs) for Python applications with Tkinter.
In addition to its careful expository prose, Learning Python includes exercises that both test your Python skills and help reveal more elusive truths about the language. --This text refers to an out of print or unavailable edition of this title.
Review
As a book for programmers who want to learn Python, it does a very good job. The coverage is informative and well order; making it easy to find what you're looking for. Overall, if you do some work with Python, you will benefit from owning this book. " - Sam Smith, news@UK, March "This book is a good example of Python culture, in the clarity of its text as much as in the quality of its code. Anyhone working their way through it will have a solid foundation upon which to explore Python's potential. Highly recommended." - Ivan Uemilianin, CVu, October 2004 --This text refers to the Paperback edition.|,O'Reilly Media,USD 54.99
Think Python,Allen B. Downey,|Think Python is an introduction to Python programming for students with no programming experience. It starts with the most basic concepts of programming, and is carefully designed to define all terms when they are first used and to develop each new concept in a logical progression. Larger pieces, like recursion and object-oriented programming are divided into a sequence of smaller steps and introduced over the course of several chapters.|,O'Reilly Media,GBP 29.99
|Learn Python The Hard Way, 1st Edition|,Zed Shaw,|Learn Python The Hard Way is a book I wrote to teach programming to people who do not know how to code. It assumes you are probably a power user of your computer, and then takes you from nothing to programming simple games. After reading my book you should be ready for many of the other programming books out there.|,Lulu.com,$29.99
Selenium 2自动化测试实战,虫师,|《Selenium 2自动化测试实战——基于Python语言》共分 14 章。第 1 章是自动化测试相关基础知识的介绍；第 2 章到第 10 章是《Selenium 2自动化测试实战——基于Python语言》的重点，循 序渐进地介绍了自动化测试所用到的技术；第 11 章通过一个具体的项目综合运用了前面章节所介绍 的技术与技巧；第 12 章到第 14 章选取了当前最热门的技术进行了介绍，旨在扩展测试人员的综合技 术能力。 《Selenium 2自动化测试实战——基于Python语言》的写作目的并不是为了简单地告诉读者如何使用一个自动化测试工具，而是希望读者在学习
《Selenium 2自动化测试实战——基于Python语言》的内容后能够提高综合的技术高度与宽度，从而摆脱简单的手工测试，向高级测试工程师的道路 迈进。|,电子工业出版社,CNY 59.00
NumPy攻略,[印尼] Ivan Idris,|本书带领读者了解熟悉当下最流行的科学计算库NumPy的方方面面。书中不仅介绍了NumPy的安装、使用和各种相关概念，还介绍了如何利用这一最新的开源软件库，以尽可能接近传统数学语言的方式，编写可读性好、实现效率高和运行速度快的代码。最后还探究了几个和NumPy相关的科学计算项目。此外，本书将为你掌握NumPy数组和通用函数打下坚实的基础，也会通过实例教你用Matplotlib绘图，并了解和SciPy相关的项目。
本书将帮助你：
• 学习高级索引技术和线性代数知识
• 了解数组形状及图像大小的调整
• 探察广播机制和直方图
• 分析NumPy代码并用可视化的方式表示分析结果
• 用Cython为代码提速
• 使用数组接口共享数据
• 使用通用函数和互操作功能
• 学习Matplotlib以及经常和NumPy同时使用的SciPy|,人民邮电出版社,49.00
Python编程（第三版·英文影印版）,Mark Lutz,|《Python编程 第三版》已经成为Python用户的行业标准，且更加完善。第三版进行的更新反映了当前的最佳实践以及在语言的最新版本Python 2.5中引入的大量改变。
无论是新手还是老手，你都会发现这本经过彻底更新的书确实名副其实，它教给你编写代码的正确途径。它以清晰而简练的方式解释了Python语言的语法以及编程技巧，并辅以大量例子阐明正确的使用方法和通用特性。通过阅读这本全面的指南，你将学习到如何将Python运用到实际问题中，例如：
·用户图形界面编程
·并行处理
·网络应用程序
·Internet脚本编程
·数据库管理
从深入讨论核心概念开始，再到完整的程序，《Python编程 第三版》逐一覆盖这些领域。书中确有大型的程序示例，但只在你已经掌握了足够的知识，能够理解技术和代码后才会出现。
在学习过程中，你也会学到如何在实际规模的程序中使用Python——诸如面向对象编程和代码重用概念皆是贯穿全书的副题。如果你对Python 程序设计感兴趣，就需要这本O'Reilly经典书籍长伴你的左右。实践中的建议、代码的片断和程序设计模式，这些财富都可以在日常生活中得到应用——使你的生活更轻松更高效。|,东南大学出版社,138.00元
Python Tutorial,|Guido Van Rossum,Fred L. Drake, Jr (editor)|,最权威的 Python 教程，由 Python 作者 Guido van Rossum 主笔，有少许学院味道。中文电子版由刘鑫、李梦夷翻译。英文原稿网址：http:\/\/docs.python.org\/tut\/简体中文版网址：http:\/\/wiki.woodpecker.org.cn\/moin\/March_Liu\/PyTutorial,Iuniverse Inc,USD 12.95
Python UNIX和Linux系统管理指南,|基弗特 (Gift, Noab),琼斯 (Jones, Jeremy M.)|,|《Python UNIX和Linux系统管理指南》介绍了Python语言如何为管理uNIx和Linux服务器提供各种更加有效的任务处理方式。书中各章都提出了具体的管理问题，如并发或数据备份，然后通过Python示例提供了解决方案。通过《Python UNIX和Linux系统管理指南》，读者可以学习如何用Python开发自己的一套命令行工具来解决诸多问题。
作者建立了一个免费下载的Ubuntu虚拟机，其中包含《Python UNIX和Linux系统管理指南》的源代码和运行实例，也包括SNMP、IPython、SQLAlchemy及其他工具。通过《Python UNIX和Linux系统管理指南》，你可以发现Python在如下几个方面的作用：
读取文本文件并提取信息。
使用多线程和fork选项。
使用网络设备从一个进程获取另一个进程的信息。
创建可点击的、易于交互的GUl工具。
通过交互式SNMP编程实现监控大型主机集群。
掌握IPython shell，作为Bash、Korn或Z—Shell的替换或补充。
将云计算整合到基础设施中，编写Google App引擎的应用程序。
通过定制脚本解决独特数据备份的难题。
使用Djan90、SQLAlchemy和Storm ORM与数据库进行交互。
通过《Python UNIX和Linux系统管理指南》及其补充的虚拟机，你可以了解如何打包并部署Python应用程序和库，以及编写代码在类似的多个UNIXfH Linux平台上运行。|,机械工业出版社,65.00元
Foundations of Python Network Programming,|John Goerzen,Tim Bower,Brandon Rhodes|,|This second edition of Foundations of Python Network Programming targets Python 2.5 through Python 2.7, the most popular production versions of the language. Python has made great strides since Apress released the first edition of this book back in the days of Python 2.3. The advances required new chapters to be written from the ground up, and others to be extensively revised. You will learn fundamentals like IP, TCP, DNS and SSL by using working Python programs; you will also be able to familiarize yourself with infrastructure components like memcached and message queues. You can also delve into Network server designs, and compare threaded approaches with asynchronous event-based solutions. But the biggest change is this edition's expanded treatment of the web. The HTTP protocol is covered in extensive detail, with each feature accompanied by sample Python code. You can use your HTTP protocol expertise by studying an entire chapter on screen scraping and you can then test lxml and BeautifulSoup against a real-world web site. The chapter on web application programming now covers both the WSGI standard for component interoperability, as well as modern web frameworks like Django. Finally, all of the old favorites from the first edition are back: E-mail protocols like SMTP, POP, and IMAP get full treatment, as does XML-RPC. You can still learn how to code Python network programs using the Telnet and FTP protocols, but you are likely to appreciate the power of more modern alternatives like the paramiko SSH2 library. If you are a Python programmer who needs to learn the network, this is the book that you want by your side. What you'll learn * Understand low level networking * Handle sending and receiving email including composing and decoding emails, SMTP, POP and IMAP * Program the lower levels of web application programming such as FastCGI and WSGI and HTTP itself * Learn how to use memcached and message qeues using Python * Access web services using Python * Master multitasking with threads, forking, and asynchronous communication Who this book is for This book will be of interest to python programmers who need to program networked applications using Python. From web application developers, to systems integrators, to system administrators--this book has everything you need to know. Table of Contents * Introduction to Client\/Server Networking * UDP * TCP * Socket Names and DNS * Network Data and Network Errors * TLS and SSL * Server Architecture * Caches, Message Queues, and Map-Reduce * HTTP * Screen Scraping * Web Applications * E-mail Composition and Decoding * SMTP * POP * IMAP * Telnet and SSH * FTP * RPC|,Apress,USD 54.99
How to Think Like a Computer Scientist: Learning with Python,|Allen B. Downey,Jeffrey Elkner,Chris Meyers|,|""How to Think Like a Computer Scientist"" is an introduction to programming using Python, one of the best languages for beginners. This is a Free Book -- you can download it from thinkpython.com. But if you would like to make a contribution to this project, you can do it by buying a hardcopy or paying to download the electronic version here. Thank you!|,Green Tea Press,USD 24.95
Python机器学习,[美] Michael Bowles,|在学习和研究机器学习的时候，面临令人眼花缭乱的算法，机器学习新手往往会不知
所措。本书从算法和Python 语言实现的角度，帮助读者认识机器学习。
书专注于两类核心的“算法族”，即惩罚线性回归和集成方法，并通过代码实例来
展示所讨论的算法的使用原则。全书共分为7 章，详细讨论了预测模型的两类核心算法、预测模型的构建、惩罚线性回归和集成方法的具体应用和实现。
本书主要针对想提高机器学习技能的Python 开发人员，帮助他们解决某一特定的项
目或是提升相关的技能。|,人民邮电出版社,69.00元
从Python开始学编程,Vamei,改编自Vamei博客的《Python快速教程》。本书以Python为样本，不仅介绍了编程的基本概念，还着重讲解编程语言的主流范式：面向过程、面向对象、面向函数。读者不仅可以轻松学会Python，以后再学习其他编程语言时也会更加容易。,电子工业出版社,CNY 49.00
Natural Language Processing with Python,|Steven Bird,Ewan Klein,Edward Loper|,|This book offers a highly accessible introduction to Natural Language Processing, the field that underpins a variety of language technologies, ranging from predictive text and email filtering to automatic summarization and translation. With Natural Language Processing with Python, you'll learn how to write Python programs to work with large collections of unstructured text. You'll access richly-annotated datasets using a comprehensive range of linguistic data structures. And you'll understand the main algorithms for analyzing the content and structure of written communication.
Packed with examples and exercises, Natural Language Processing with Python will help you:
* Extract information from unstructured text, to guess the topic or identify "named entities"
* Analyze linguistic structure in text, including parsing and semantic analysis
* Access popular linguistic databases, including WordNet and treebanks
* Integrate techniques drawn from fields as diverse as linguistics and artificial intelligence
Perfect for individual study, or as a classroom and workshop textbook, this book will help you gain practical skills in Natural Language Processing using the Python programming language and the Natural Language Toolkit (NLTK) open source library.
If you're interested in developing Web applications, analyzing multilingual news sources, documenting endangered languages, or if you are simply curious to have a programmer's perspective on how human language works, you will find Natural Language Processing with Python both fascinating and immensely useful.|,O'Reilly Media,USD 44.99
Python,James O. Knowlton,|Python: Create-Modify-Reuse is designed for all levels of Python developers interested in a practical, hands-on way of learning Python development. This book is designed to show you how to use Python (in combination with the raw processing power of your computer) to accomplish real-world tasks in a more efficient way. Don't look for an exhaustive description of the Python language––you won't find it. The book's main purpose is not to thoroughly cover the Python language, but rather to show how you can use Python to create robust, real-world applications. In this respect, the goal is similar to foreign-language books that identify themselves as “conversational,” focusing on the vocabulary and concepts that people will need the most. Likewise, I focus specifically on the Python knowledge needed to accomplish practical, specific tasks. Along the way, you will learn to create useful, efficient scripts that are easy to maintain and enhance. This book is for developers with some experience with Python who want to explore how to develop full-blown applications. It is also for developers with experience in other languages who want to learn Python by building robust applications. It is well-suited for developers who like to “learn by doing,” rather than exploring a language feature by feature. To get the most out of the book, you should understand basic programming principles. Because this book is project-based, you can approach it in numerous ways. You can, of course, read it from cover to cover. Chapters 2 through 8 each cover a different project, so the chapters are independent of each other. However, because each chapter project is covered individually, there may be some overlap of information. I also sometimes refer to explanations of particular topics covered in previous chapters. This will help to reinforce important concepts. The end of the book contains two appendixes. The first one is a listing of Python resources you can check out for more information. The second one will help you with installing additional components used in some of the examples. This book starts with a basic overview of the Python language, designed for those familiar with other languages but new to Python. It is followed by several chapters, each of which describes a complete project that can be used as-is or modified and extended to suit your particular purposes. You'll find applications that access databases, take advantage of web technologies, and facilitate network communications, to name a few. In addition, and more important than the technologies you will be introduced to, you will learn how to use Python to solve real challenges. Following these chapters are two chapters that cover accessing operating system resources and debugging and testing, respectively. Each project chapter contains complete instructions describing how to install and use the application, so you can actually see the program run as you learn how to construct and use it, including how the project was designed and prototyped. This book is intended to be both a reference guide and a learning aid, teaching you how to build solutions with Python and providing reference information on a wide variety of Python programming concepts. It is hoped that this book will help you have fun with Python and build useful applications, and—unlike my experience with building a deck—without sore thumbs. This book is framed around the code itself. This is because developers are typically looking for how to do something; and, as with many activities, you learn how to do something by watching how others do and trying it yourself. If you want to know how a  for  loop works, you'll find  for  loops in my code, but that's not the thrust of the book. Instead, this book shows you how to do things: how to build a content management system, how to build a test management system, how to set up a system for tracking customer follow-up, and so on. Along the way, you'll learn how to communicate with a SQL database, how to act as a web server or communicate with one, how to access operating system services, and more. There are three basic components to the book: Chapter 1 is a brief overview of the Python language. Chapters 2–8 cover seven different programming projects, which illustrate various technologies and techniques available to Python developers. Chapters 9–10 cover additional, advanced topics, which will help you as you build Python projects. The project chapters have a consistent structure: Overview: What does the application do? Using the program Design How it all fits together Modules involved Code and code explanation Module\/class 1 explanation Module\/class 2 explanation Minor code file explanation Testing, including suggested tests Modifying the project, including some suggested adaptations Summary Each project is designed with classes that can be reused and accessed for multiple purposes. This is one of the main benefits of object-oriented programming, so designing for reusability is a main focus of the book. The book contains the following chapters: 1. Python Basics This chapter is a basic primer on the Python language, and it functions as either a quick tutorial for experienced programmers new to Python or a refresher for programmers with Python experience. Part I: The Projects 2. Directory\/File Snapshot Program This project demonstrates how to interact with files, create and manipulate data structures, and provide user output. It also touches on code design issues to improve code maintainability. Often when installing or uninstalling software, or verifying changes to a file system, it can be valuable to take a “snapshot” of the files and directories, along with their size and last-modified time. The script introduced in this chapter does just that. This chapter also explores how to capture a directory listing into a Python list, and explains how to query this list for particular values. 3. DVD Inventory System This project takes advantage of Python’s capability to access and manipulate data in a SQL database. The application enables multiple users to log in to a website that provides access to a DVD inventory database. Permissions are set such that some users can add, modify, or delete entries, whereas other users have read-only access to the data. 4. Web Performance Tester This project shows how to communicate with a Python web server and retrieve information regarding how long it takes to receive requested items from the web server. Although writing Python programs to work on a single computer can be useful, the real power of Python can be seen when it is used to script communication between computers on a network. Most networks contain several web servers. A nice feature of Python is that it can act as a lightweight server for various Internet protocols, such as HTTP (web) and ftp. This application enables you to monitor performance of HTTP traffic on your network. 5. Customer Follow-Up System This project shows how to present a web form to the user and retrieve data from it, how to automatically format and send e-mail through an SMTP server, and how to generate an HTML-formatted report. The task for the second example is to automatically generate a customer comments e-mail message based on information the customer enters in a form. It uses the  mod_python  Apache module to take the information entered in the HTTP form and then utilizes a Python script on the web server to send that information to an SMTP server for mail delivery. 6. Test Management\/Reporting System This project makes use of the  unittest  module to run tests against an existing application, and creates a framework for reporting test results. Testing is a vital process for developing software. This application enables users to run tests for a given piece of software, to list the previous test runs by date, to show test run results for any previously run tests, and to output the results of any test run as HTML for viewing in a web browser. 7. Version Management System This project connects to a list of servers via telnet, checks the application version of a pre-set application list, and displays its results both as output and to a log file. Often, a system administrator needs to patch systems or ensure that systems have the latest application versions installed. This script is an easy way to accomplish that task. It makes use of Python’s capability to emulate a telnet client and log in to remote systems and perform functions on that remote system. 8. Content Management System This project explores Plone, a popular content management system based on Python and Zope (a Python-based application server). Because Python is a very mature language, numerous applications have been built on top of it. A great thing about working with Python-based applications is that you get the benefit of a full-blown application but you can still use Python to configure and customize it. Part II: Advanced Topics 9. Interacting with the Operating System When writing scripts “in the real world,” often it is critical to be able to access services available through (and particular to) the operating system you happen to be on. For example, suppose you wanted to read or modify the Window Registry? Or you wanted to get the Linux process ID of a particular process that is running? Is such a thing even possible? Definitely—and this chapter shows you how. 10. Debugging and Testing Because I am a software tester myself, testing is a subject that is certainly close to my heart. In this chapter, I discuss why testing is important, how to put the right amount of testing into your code, and how writing automated tests can help you to actually write code more quickly. You’ll look at PyUnit, the automated testing framework for Python, and learn how to use it to test the riskiest parts of a script. You’ll also explore the Python de...|,Wrox,USD 39.99
深入浅出Python（影印版）,Paul Barry,你是否想过通过一本书来学习Python？《深入浅出Python))通过一种独特的超越语法手册的方式来帮助你学习Python。你将能够快速掌握Python的基础知识，然后扩展到持久化、异常处理、Web开发、SQLite、数据处理和Google应用引擎中去。你也将学会如何为Android编写移动应用，这要感谢Pvthon带给你的强大能力。《深入浅出Python》融合了完备的学习经验，它将帮助你成为真正的Python编程员。,东南大学出版社,88.00元
Python参考手册（第4版）,David M.Beazley,|本书是权威的Python语言参考指南，内容涉及核心Python语言和Python库的最重要部分。本书内容简洁扼要、可读性强，书中还包括了一些没有在Python官方文档或其他资料中出现过的一些高级的主题。
这一版在内容上进行了全面更新，介绍了Python 2.6和Python 3新引入的编程语言特性和库模块，同时还分析了Python程序员面临的如下难题：是应继续使用现有的Python代码，还是应制定计划将其移植到Python 3？|,人民邮电出版社,89.00元
编写高质量代码：改善Python程序的91个建议,|张颖,赖勇浩|,|在通往“Python技术殿堂”的路上，本书将为你编写健壮、优雅、高质量的Python代码提供切实帮助！内容全部由Python编码的最佳实践组成，从基本原则、惯用法、语法、库、设计模式、内部机制、开发工具和性能优化8个方面深入探讨了编写高质量Python代码的技巧与禁忌，一共总结出91条宝贵的建议。每条建议对应Python程序员可能会遇到的一个问题。本书不仅以建议的方式从正反两方面给出了被实践证明为十分优秀的解决方案或非常糟糕的解决方案，而且分析了问题产生的根源，会使人有一种醍醐灌顶的感觉，豁然开朗。
《编写高质量代码：改善Python程序的91个建议》针对每个问题所选择的应用场景都非常典型，给出的建议也都与实践紧密结合。书中的每一条建议都可能在你的下一行代码、下一个应用或下一个项目中显露锋芒。建议你将本书搁置在手边，随时查阅，相信这么做一定能使你的学习和开发工作事半功倍。|,机械工业出版社,59.00元
流畅的Python,[巴西] Luciano Ramalho,|【技术大咖推荐】
“很荣幸担任这本优秀图书的技术审校。这本书能帮助很多中级Python程序员掌握这门语言，我也从中学到了相当多的知识！”——Alex Martelli，Python软件基金会成员
“对于想要扩充知识的中级和高级Python程序员来说，这本书是充满了实用编程技巧的宝藏。”——Daniel Greenfeld和Audrey Roy Greenfeld，Two Scoops of Django作者
【本书特色】
本书由奋战在Python开发一线近20年的Luciano Ramalho执笔，Victor Stinner、Alex Martelli等Python大咖担纲技术审稿人，从语言设计层面剖析编程细节，兼顾Python 3和Python 2，告诉你Python中不亲自动手实践就无法理解的语言陷阱成因和解决之道，教你写出风格地道的Python代码。
●	Python数据模型：理解为什么特殊方法是对象行为一致的关键。
●	数据结构：充分利用内置类型，理解Unicode文本和字节二象性。
●	把函数视作对象：把Python函数视作一等对象，并了解这一点对流行的设计模式的影响。
●	面向对象习惯用法：通过构建类学习引用、可变性、接口、运算符重载和多重继承。
●	控制流程：学习使用上下文管理器、生成器、协程，以及通过concurrent.futures和asyncio包实现的并发。
●	元编程：理解特性、描述符、类装饰器和元类的工作原理。
【主要内容】
本书致力于帮助Python开发人员挖掘这门语言及相关程序库的优秀特性，避免重复劳动，同时写出简洁、流畅、易读、易维护，并且具有地道Python风格的代码。本书尤其深入探讨了Python语言的高级用法，涵盖数据结构、Python风格的对象、并行与并发，以及元编程等不同的方面。
本书适合中高级Python软件开发人员阅读参考。
【译者简介】
安道
专注于现代计算机技术的自由翻译，译有《Flask Web 开发》《Python 网络编程攻略》《Ruby on Rails 教程》等书。
个人网站：http:\/\/about.ac\/。
吴珂
现为Airbnb公司软件工程师，所在团队主要负责开发和维护各类可伸缩、高性能服务，并在Airbnb内推广面向服务的系统架构。在分布式系统、云存储服务和跨平台SDK开发，以及大规模数据处理等方面有多年经验。|,人民邮电出版社,139元
Python计算与编程实践,|（美）Mark Guzdial,（美）Barbara Ericson|,|计算机程序设计课程往往是枯燥乏味的，而本书根据教育理论，开发了一种新的教学方法，介绍如何通过多媒体编程来学习计算机程序设计，将趣味性和实用性融于枯燥的编程课程的教学当中。本书方法独特新颖，实例通俗易懂，可帮助读者快速入门并深入掌握编程技能，是一本理论联系实际的程序设计教程。
本书使用的编程语言是Python，这是因为Python强大实用（比如网站开发）、易于入门，计算机科学专业和非专业人士都可以学习。本书以Python数字多媒体编程为主线，从图像、声音、文本和电影这些学生已经熟知的内容开始，讲解它们的处理方法，其中穿插介绍计算机科学与程序设计的基础知识。在讲解知识点的时候也独具匠心，先介绍容易理解的基本概念，如赋值、顺序操作、迭代、条件式、函数定义等，逐步涉及抽象内容，如算法复杂度、程序效率、计算机组成、层次式分解、递归、面向对象等。本书还提供了大量例题和习题，方便教学。|,机械工业出版社,69.00元
Learning Python,Mark Lutz,|Amazon.com Review
The authors of Learning Python show you enough essentials of the Python scripting language to enable you to begin solving problems right away, then reveal more powerful aspects of the language one at a time. This approach is sure to appeal to programmers and system administrators who have urgent problems and a preference for learning by semi-guided experimentation.
First off, Learning Python shows the relationships among Python scripts and their interpreter (in a mostly platform-neutral way). Then, the authors address the mechanics of the language itself, providing illustrations of how Python conceives of numbers, strings, and other objects as well as the operators you use to work with them. Dictionaries, lists, tuples, and other data structures specific to Python receive plenty of attention including complete examples.
Authors Mark Lutz and David Ascher build on that fundamental information in their discussions of functions and modules, which evolve into coverage of namespaces, classes, and the object-oriented aspects of Python programming. There's also information on creating graphical user interfaces (GUIs) for Python applications with Tkinter.
In addition to its careful expository prose, Learning Python includes exercises that both test your Python skills and help reveal more elusive truths about the language. --This text refers to an out of print or unavailable edition of this title.
Review
As a book for programmers who want to learn Python, it does a very good job. The coverage is informative and well order; making it easy to find what you're looking for. Overall, if you do some work with Python, you will benefit from owning this book. " - Sam Smith, news@UK, March "This book is a good example of Python culture, in the clarity of its text as much as in the quality of its code. Anyhone working their way through it will have a solid foundation upon which to explore Python's potential. Highly recommended." - Ivan Uemilianin, CVu, October 2004 --This text refers to the Paperback edition.|,O'Reilly Media,USD 54.99
Think Python,Allen B. Downey,|Think Python is an introduction to Python programming for students with no programming experience. It starts with the most basic concepts of programming, and is carefully designed to define all terms when they are first used and to develop each new concept in a logical progression. Larger pieces, like recursion and object-oriented programming are divided into a sequence of smaller steps and introduced over the course of several chapters.|,O'Reilly Media,GBP 29.99
|Learn Python The Hard Way, 1st Edition|,Zed Shaw,|Learn Python The Hard Way is a book I wrote to teach programming to people who do not know how to code. It assumes you are probably a power user of your computer, and then takes you from nothing to programming simple games. After reading my book you should be ready for many of the other programming books out there.|,Lulu.com,$29.99
Selenium 2自动化测试实战,虫师,|《Selenium 2自动化测试实战——基于Python语言》共分 14 章。第 1 章是自动化测试相关基础知识的介绍；第 2 章到第 10 章是《Selenium 2自动化测试实战——基于Python语言》的重点，循 序渐进地介绍了自动化测试所用到的技术；第 11 章通过一个具体的项目综合运用了前面章节所介绍 的技术与技巧；第 12 章到第 14 章选取了当前最热门的技术进行了介绍，旨在扩展测试人员的综合技 术能力。 《Selenium 2自动化测试实战——基于Python语言》的写作目的并不是为了简单地告诉读者如何使用一个自动化测试工具，而是希望读者在学习
《Selenium 2自动化测试实战——基于Python语言》的内容后能够提高综合的技术高度与宽度，从而摆脱简单的手工测试，向高级测试工程师的道路 迈进。|,电子工业出版社,CNY 59.00
NumPy攻略,[印尼] Ivan Idris,|本书带领读者了解熟悉当下最流行的科学计算库NumPy的方方面面。书中不仅介绍了NumPy的安装、使用和各种相关概念，还介绍了如何利用这一最新的开源软件库，以尽可能接近传统数学语言的方式，编写可读性好、实现效率高和运行速度快的代码。最后还探究了几个和NumPy相关的科学计算项目。此外，本书将为你掌握NumPy数组和通用函数打下坚实的基础，也会通过实例教你用Matplotlib绘图，并了解和SciPy相关的项目。
本书将帮助你：
• 学习高级索引技术和线性代数知识
• 了解数组形状及图像大小的调整
• 探察广播机制和直方图
• 分析NumPy代码并用可视化的方式表示分析结果
• 用Cython为代码提速
• 使用数组接口共享数据
• 使用通用函数和互操作功能
• 学习Matplotlib以及经常和NumPy同时使用的SciPy|,人民邮电出版社,49.00
Python编程（第三版·英文影印版）,Mark Lutz,|《Python编程 第三版》已经成为Python用户的行业标准，且更加完善。第三版进行的更新反映了当前的最佳实践以及在语言的最新版本Python 2.5中引入的大量改变。
无论是新手还是老手，你都会发现这本经过彻底更新的书确实名副其实，它教给你编写代码的正确途径。它以清晰而简练的方式解释了Python语言的语法以及编程技巧，并辅以大量例子阐明正确的使用方法和通用特性。通过阅读这本全面的指南，你将学习到如何将Python运用到实际问题中，例如：
·用户图形界面编程
·并行处理
·网络应用程序
·Internet脚本编程
·数据库管理
从深入讨论核心概念开始，再到完整的程序，《Python编程 第三版》逐一覆盖这些领域。书中确有大型的程序示例，但只在你已经掌握了足够的知识，能够理解技术和代码后才会出现。
在学习过程中，你也会学到如何在实际规模的程序中使用Python——诸如面向对象编程和代码重用概念皆是贯穿全书的副题。如果你对Python 程序设计感兴趣，就需要这本O'Reilly经典书籍长伴你的左右。实践中的建议、代码的片断和程序设计模式，这些财富都可以在日常生活中得到应用——使你的生活更轻松更高效。|,东南大学出版社,138.00元
Python Tutorial,|Guido Van Rossum,Fred L. Drake, Jr (editor)|,最权威的 Python 教程，由 Python 作者 Guido van Rossum 主笔，有少许学院味道。中文电子版由刘鑫、李梦夷翻译。英文原稿网址：http:\/\/docs.python.org\/tut\/简体中文版网址：http:\/\/wiki.woodpecker.org.cn\/moin\/March_Liu\/PyTutorial,Iuniverse Inc,USD 12.95
Python UNIX和Linux系统管理指南,|基弗特 (Gift, Noab),琼斯 (Jones, Jeremy M.)|,|《Python UNIX和Linux系统管理指南》介绍了Python语言如何为管理uNIx和Linux服务器提供各种更加有效的任务处理方式。书中各章都提出了具体的管理问题，如并发或数据备份，然后通过Python示例提供了解决方案。通过《Python UNIX和Linux系统管理指南》，读者可以学习如何用Python开发自己的一套命令行工具来解决诸多问题。
作者建立了一个免费下载的Ubuntu虚拟机，其中包含《Python UNIX和Linux系统管理指南》的源代码和运行实例，也包括SNMP、IPython、SQLAlchemy及其他工具。通过《Python UNIX和Linux系统管理指南》，你可以发现Python在如下几个方面的作用：
读取文本文件并提取信息。
使用多线程和fork选项。
使用网络设备从一个进程获取另一个进程的信息。
创建可点击的、易于交互的GUl工具。
通过交互式SNMP编程实现监控大型主机集群。
掌握IPython shell，作为Bash、Korn或Z—Shell的替换或补充。
将云计算整合到基础设施中，编写Google App引擎的应用程序。
通过定制脚本解决独特数据备份的难题。
使用Djan90、SQLAlchemy和Storm ORM与数据库进行交互。
通过《Python UNIX和Linux系统管理指南》及其补充的虚拟机，你可以了解如何打包并部署Python应用程序和库，以及编写代码在类似的多个UNIXfH Linux平台上运行。|,机械工业出版社,65.00元
Foundations of Python Network Programming,|John Goerzen,Tim Bower,Brandon Rhodes|,|This second edition of Foundations of Python Network Programming targets Python 2.5 through Python 2.7, the most popular production versions of the language. Python has made great strides since Apress released the first edition of this book back in the days of Python 2.3. The advances required new chapters to be written from the ground up, and others to be extensively revised. You will learn fundamentals like IP, TCP, DNS and SSL by using working Python programs; you will also be able to familiarize yourself with infrastructure components like memcached and message queues. You can also delve into Network server designs, and compare threaded approaches with asynchronous event-based solutions. But the biggest change is this edition's expanded treatment of the web. The HTTP protocol is covered in extensive detail, with each feature accompanied by sample Python code. You can use your HTTP protocol expertise by studying an entire chapter on screen scraping and you can then test lxml and BeautifulSoup against a real-world web site. The chapter on web application programming now covers both the WSGI standard for component interoperability, as well as modern web frameworks like Django. Finally, all of the old favorites from the first edition are back: E-mail protocols like SMTP, POP, and IMAP get full treatment, as does XML-RPC. You can still learn how to code Python network programs using the Telnet and FTP protocols, but you are likely to appreciate the power of more modern alternatives like the paramiko SSH2 library. If you are a Python programmer who needs to learn the network, this is the book that you want by your side. What you'll learn * Understand low level networking * Handle sending and receiving email including composing and decoding emails, SMTP, POP and IMAP * Program the lower levels of web application programming such as FastCGI and WSGI and HTTP itself * Learn how to use memcached and message qeues using Python * Access web services using Python * Master multitasking with threads, forking, and asynchronous communication Who this book is for This book will be of interest to python programmers who need to program networked applications using Python. From web application developers, to systems integrators, to system administrators--this book has everything you need to know. Table of Contents * Introduction to Client\/Server Networking * UDP * TCP * Socket Names and DNS * Network Data and Network Errors * TLS and SSL * Server Architecture * Caches, Message Queues, and Map-Reduce * HTTP * Screen Scraping * Web Applications * E-mail Composition and Decoding * SMTP * POP * IMAP * Telnet and SSH * FTP * RPC|,Apress,USD 54.99
How to Think Like a Computer Scientist: Learning with Python,|Allen B. Downey,Jeffrey Elkner,Chris Meyers|,|""How to Think Like a Computer Scientist"" is an introduction to programming using Python, one of the best languages for beginners. This is a Free Book -- you can download it from thinkpython.com. But if you would like to make a contribution to this project, you can do it by buying a hardcopy or paying to download the electronic version here. Thank you!|,Green Tea Press,USD 24.95
Python机器学习,[美] Michael Bowles,|在学习和研究机器学习的时候，面临令人眼花缭乱的算法，机器学习新手往往会不知
所措。本书从算法和Python 语言实现的角度，帮助读者认识机器学习。
书专注于两类核心的“算法族”，即惩罚线性回归和集成方法，并通过代码实例来
展示所讨论的算法的使用原则。全书共分为7 章，详细讨论了预测模型的两类核心算法、预测模型的构建、惩罚线性回归和集成方法的具体应用和实现。
本书主要针对想提高机器学习技能的Python 开发人员，帮助他们解决某一特定的项
目或是提升相关的技能。|,人民邮电出版社,69.00元
从Python开始学编程,Vamei,改编自Vamei博客的《Python快速教程》。本书以Python为样本，不仅介绍了编程的基本概念，还着重讲解编程语言的主流范式：面向过程、面向对象、面向函数。读者不仅可以轻松学会Python，以后再学习其他编程语言时也会更加容易。,电子工业出版社,CNY 49.00
Natural Language Processing with Python,|Steven Bird,Ewan Klein,Edward Loper|,|This book offers a highly accessible introduction to Natural Language Processing, the field that underpins a variety of language technologies, ranging from predictive text and email filtering to automatic summarization and translation. With Natural Language Processing with Python, you'll learn how to write Python programs to work with large collections of unstructured text. You'll access richly-annotated datasets using a comprehensive range of linguistic data structures. And you'll understand the main algorithms for analyzing the content and structure of written communication.
Packed with examples and exercises, Natural Language Processing with Python will help you:
* Extract information from unstructured text, to guess the topic or identify "named entities"
* Analyze linguistic structure in text, including parsing and semantic analysis
* Access popular linguistic databases, including WordNet and treebanks
* Integrate techniques drawn from fields as diverse as linguistics and artificial intelligence
Perfect for individual study, or as a classroom and workshop textbook, this book will help you gain practical skills in Natural Language Processing using the Python programming language and the Natural Language Toolkit (NLTK) open source library.
If you're interested in developing Web applications, analyzing multilingual news sources, documenting endangered languages, or if you are simply curious to have a programmer's perspective on how human language works, you will find Natural Language Processing with Python both fascinating and immensely useful.|,O'Reilly Media,USD 44.99
Python,James O. Knowlton,|Python: Create-Modify-Reuse is designed for all levels of Python developers interested in a practical, hands-on way of learning Python development. This book is designed to show you how to use Python (in combination with the raw processing power of your computer) to accomplish real-world tasks in a more efficient way. Don't look for an exhaustive description of the Python language––you won't find it. The book's main purpose is not to thoroughly cover the Python language, but rather to show how you can use Python to create robust, real-world applications. In this respect, the goal is similar to foreign-language books that identify themselves as “conversational,” focusing on the vocabulary and concepts that people will need the most. Likewise, I focus specifically on the Python knowledge needed to accomplish practical, specific tasks. Along the way, you will learn to create useful, efficient scripts that are easy to maintain and enhance. This book is for developers with some experience with Python who want to explore how to develop full-blown applications. It is also for developers with experience in other languages who want to learn Python by building robust applications. It is well-suited for developers who like to “learn by doing,” rather than exploring a language feature by feature. To get the most out of the book, you should understand basic programming principles. Because this book is project-based, you can approach it in numerous ways. You can, of course, read it from cover to cover. Chapters 2 through 8 each cover a different project, so the chapters are independent of each other. However, because each chapter project is covered individually, there may be some overlap of information. I also sometimes refer to explanations of particular topics covered in previous chapters. This will help to reinforce important concepts. The end of the book contains two appendixes. The first one is a listing of Python resources you can check out for more information. The second one will help you with installing additional components used in some of the examples. This book starts with a basic overview of the Python language, designed for those familiar with other languages but new to Python. It is followed by several chapters, each of which describes a complete project that can be used as-is or modified and extended to suit your particular purposes. You'll find applications that access databases, take advantage of web technologies, and facilitate network communications, to name a few. In addition, and more important than the technologies you will be introduced to, you will learn how to use Python to solve real challenges. Following these chapters are two chapters that cover accessing operating system resources and debugging and testing, respectively. Each project chapter contains complete instructions describing how to install and use the application, so you can actually see the program run as you learn how to construct and use it, including how the project was designed and prototyped. This book is intended to be both a reference guide and a learning aid, teaching you how to build solutions with Python and providing reference information on a wide variety of Python programming concepts. It is hoped that this book will help you have fun with Python and build useful applications, and—unlike my experience with building a deck—without sore thumbs. This book is framed around the code itself. This is because developers are typically looking for how to do something; and, as with many activities, you learn how to do something by watching how others do and trying it yourself. If you want to know how a  for  loop works, you'll find  for  loops in my code, but that's not the thrust of the book. Instead, this book shows you how to do things: how to build a content management system, how to build a test management system, how to set up a system for tracking customer follow-up, and so on. Along the way, you'll learn how to communicate with a SQL database, how to act as a web server or communicate with one, how to access operating system services, and more. There are three basic components to the book: Chapter 1 is a brief overview of the Python language. Chapters 2–8 cover seven different programming projects, which illustrate various technologies and techniques available to Python developers. Chapters 9–10 cover additional, advanced topics, which will help you as you build Python projects. The project chapters have a consistent structure: Overview: What does the application do? Using the program Design How it all fits together Modules involved Code and code explanation Module\/class 1 explanation Module\/class 2 explanation Minor code file explanation Testing, including suggested tests Modifying the project, including some suggested adaptations Summary Each project is designed with classes that can be reused and accessed for multiple purposes. This is one of the main benefits of object-oriented programming, so designing for reusability is a main focus of the book. The book contains the following chapters: 1. Python Basics This chapter is a basic primer on the Python language, and it functions as either a quick tutorial for experienced programmers new to Python or a refresher for programmers with Python experience. Part I: The Projects 2. Directory\/File Snapshot Program This project demonstrates how to interact with files, create and manipulate data structures, and provide user output. It also touches on code design issues to improve code maintainability. Often when installing or uninstalling software, or verifying changes to a file system, it can be valuable to take a “snapshot” of the files and directories, along with their size and last-modified time. The script introduced in this chapter does just that. This chapter also explores how to capture a directory listing into a Python list, and explains how to query this list for particular values. 3. DVD Inventory System This project takes advantage of Python’s capability to access and manipulate data in a SQL database. The application enables multiple users to log in to a website that provides access to a DVD inventory database. Permissions are set such that some users can add, modify, or delete entries, whereas other users have read-only access to the data. 4. Web Performance Tester This project shows how to communicate with a Python web server and retrieve information regarding how long it takes to receive requested items from the web server. Although writing Python programs to work on a single computer can be useful, the real power of Python can be seen when it is used to script communication between computers on a network. Most networks contain several web servers. A nice feature of Python is that it can act as a lightweight server for various Internet protocols, such as HTTP (web) and ftp. This application enables you to monitor performance of HTTP traffic on your network. 5. Customer Follow-Up System This project shows how to present a web form to the user and retrieve data from it, how to automatically format and send e-mail through an SMTP server, and how to generate an HTML-formatted report. The task for the second example is to automatically generate a customer comments e-mail message based on information the customer enters in a form. It uses the  mod_python  Apache module to take the information entered in the HTTP form and then utilizes a Python script on the web server to send that information to an SMTP server for mail delivery. 6. Test Management\/Reporting System This project makes use of the  unittest  module to run tests against an existing application, and creates a framework for reporting test results. Testing is a vital process for developing software. This application enables users to run tests for a given piece of software, to list the previous test runs by date, to show test run results for any previously run tests, and to output the results of any test run as HTML for viewing in a web browser. 7. Version Management System This project connects to a list of servers via telnet, checks the application version of a pre-set application list, and displays its results both as output and to a log file. Often, a system administrator needs to patch systems or ensure that systems have the latest application versions installed. This script is an easy way to accomplish that task. It makes use of Python’s capability to emulate a telnet client and log in to remote systems and perform functions on that remote system. 8. Content Management System This project explores Plone, a popular content management system based on Python and Zope (a Python-based application server). Because Python is a very mature language, numerous applications have been built on top of it. A great thing about working with Python-based applications is that you get the benefit of a full-blown application but you can still use Python to configure and customize it. Part II: Advanced Topics 9. Interacting with the Operating System When writing scripts “in the real world,” often it is critical to be able to access services available through (and particular to) the operating system you happen to be on. For example, suppose you wanted to read or modify the Window Registry? Or you wanted to get the Linux process ID of a particular process that is running? Is such a thing even possible? Definitely—and this chapter shows you how. 10. Debugging and Testing Because I am a software tester myself, testing is a subject that is certainly close to my heart. In this chapter, I discuss why testing is important, how to put the right amount of testing into your code, and how writing automated tests can help you to actually write code more quickly. You’ll look at PyUnit, the automated testing framework for Python, and learn how to use it to test the riskiest parts of a script. You’ll also explore the Python de...|,Wrox,USD 39.99
深入浅出Python（影印版）,Paul Barry,你是否想过通过一本书来学习Python？《深入浅出Python))通过一种独特的超越语法手册的方式来帮助你学习Python。你将能够快速掌握Python的基础知识，然后扩展到持久化、异常处理、Web开发、SQLite、数据处理和Google应用引擎中去。你也将学会如何为Android编写移动应用，这要感谢Pvthon带给你的强大能力。《深入浅出Python》融合了完备的学习经验，它将帮助你成为真正的Python编程员。,东南大学出版社,88.00元
python黑帽子,[美]Justin Seitz,本书是畅销书《Python 灰帽子—黑客与逆向工程师的 Python 编程之道》的姊妹篇，那本书一面市便占据计算机安全类书籍的头把交椅。本书由 Immunity 公司的高级安全研究员 Justin Seitz 精心撰写。作者根据自己在安全界，特别是渗透测试领域的几十年经验，向读者介绍了 Python 如何被用在黑客和渗透测试的各个领域，从基本的网络扫描到数据包捕获，从 Web 爬虫到编写 Burp 扩展工具，从编写木马到权限提升等。 作者在本书中的很多实例都非常具有创新和启发意义， 如 HTTP 数据中的图片检测、 基于 GitHub命令进行控制的模块化木马、浏览器的中间人攻击技术、利用 COM 组件自动化技术窃取数据、通过进程监视和代码插入实现权限提升、通过向虚拟机内存快照中插入 shellcode 实现木马驻留和权限提升等。通过对这些技术的学习，读者不仅能掌握各种 Python 库的应用和编程技术，还能拓宽视野，培养和锻炼自己的黑客思维。读者在阅读本书时也完全感觉不到其他一些技术书籍常见的枯燥和乏味,电子工业出版社,55
编写高质量代码：改善Python程序的91个建议,|张颖,赖勇浩|,|在通往“Python技术殿堂”的路上，本书将为你编写健壮、优雅、高质量的Python代码提供切实帮助！内容全部由Python编码的最佳实践组成，从基本原则、惯用法、语法、库、设计模式、内部机制、开发工具和性能优化8个方面深入探讨了编写高质量Python代码的技巧与禁忌，一共总结出91条宝贵的建议。每条建议对应Python程序员可能会遇到的一个问题。本书不仅以建议的方式从正反两方面给出了被实践证明为十分优秀的解决方案或非常糟糕的解决方案，而且分析了问题产生的根源，会使人有一种醍醐灌顶的感觉，豁然开朗。
《编写高质量代码：改善Python程序的91个建议》针对每个问题所选择的应用场景都非常典型，给出的建议也都与实践紧密结合。书中的每一条建议都可能在你的下一行代码、下一个应用或下一个项目中显露锋芒。建议你将本书搁置在手边，随时查阅，相信这么做一定能使你的学习和开发工作事半功倍。|,机械工业出版社,59.00元
流畅的Python,[巴西] Luciano Ramalho,|【技术大咖推荐】
“很荣幸担任这本优秀图书的技术审校。这本书能帮助很多中级Python程序员掌握这门语言，我也从中学到了相当多的知识！”——Alex Martelli，Python软件基金会成员
“对于想要扩充知识的中级和高级Python程序员来说，这本书是充满了实用编程技巧的宝藏。”——Daniel Greenfeld和Audrey Roy Greenfeld，Two Scoops of Django作者
【本书特色】
本书由奋战在Python开发一线近20年的Luciano Ramalho执笔，Victor Stinner、Alex Martelli等Python大咖担纲技术审稿人，从语言设计层面剖析编程细节，兼顾Python 3和Python 2，告诉你Python中不亲自动手实践就无法理解的语言陷阱成因和解决之道，教你写出风格地道的Python代码。
●	Python数据模型：理解为什么特殊方法是对象行为一致的关键。
●	数据结构：充分利用内置类型，理解Unicode文本和字节二象性。
●	把函数视作对象：把Python函数视作一等对象，并了解这一点对流行的设计模式的影响。
●	面向对象习惯用法：通过构建类学习引用、可变性、接口、运算符重载和多重继承。
●	控制流程：学习使用上下文管理器、生成器、协程，以及通过concurrent.futures和asyncio包实现的并发。
●	元编程：理解特性、描述符、类装饰器和元类的工作原理。
【主要内容】
本书致力于帮助Python开发人员挖掘这门语言及相关程序库的优秀特性，避免重复劳动，同时写出简洁、流畅、易读、易维护，并且具有地道Python风格的代码。本书尤其深入探讨了Python语言的高级用法，涵盖数据结构、Python风格的对象、并行与并发，以及元编程等不同的方面。
本书适合中高级Python软件开发人员阅读参考。
【译者简介】
安道
专注于现代计算机技术的自由翻译，译有《Flask Web 开发》《Python 网络编程攻略》《Ruby on Rails 教程》等书。
个人网站：http:\/\/about.ac\/。
吴珂
现为Airbnb公司软件工程师，所在团队主要负责开发和维护各类可伸缩、高性能服务，并在Airbnb内推广面向服务的系统架构。在分布式系统、云存储服务和跨平台SDK开发，以及大规模数据处理等方面有多年经验。|,人民邮电出版社,139元
Python计算与编程实践,|（美）Mark Guzdial,（美）Barbara Ericson|,|计算机程序设计课程往往是枯燥乏味的，而本书根据教育理论，开发了一种新的教学方法，介绍如何通过多媒体编程来学习计算机程序设计，将趣味性和实用性融于枯燥的编程课程的教学当中。本书方法独特新颖，实例通俗易懂，可帮助读者快速入门并深入掌握编程技能，是一本理论联系实际的程序设计教程。
本书使用的编程语言是Python，这是因为Python强大实用（比如网站开发）、易于入门，计算机科学专业和非专业人士都可以学习。本书以Python数字多媒体编程为主线，从图像、声音、文本和电影这些学生已经熟知的内容开始，讲解它们的处理方法，其中穿插介绍计算机科学与程序设计的基础知识。在讲解知识点的时候也独具匠心，先介绍容易理解的基本概念，如赋值、顺序操作、迭代、条件式、函数定义等，逐步涉及抽象内容，如算法复杂度、程序效率、计算机组成、层次式分解、递归、面向对象等。本书还提供了大量例题和习题，方便教学。|,机械工业出版社,69.00元
Learning Python,Mark Lutz,|Amazon.com Review
The authors of Learning Python show you enough essentials of the Python scripting language to enable you to begin solving problems right away, then reveal more powerful aspects of the language one at a time. This approach is sure to appeal to programmers and system administrators who have urgent problems and a preference for learning by semi-guided experimentation.
First off, Learning Python shows the relationships among Python scripts and their interpreter (in a mostly platform-neutral way). Then, the authors address the mechanics of the language itself, providing illustrations of how Python conceives of numbers, strings, and other objects as well as the operators you use to work with them. Dictionaries, lists, tuples, and other data structures specific to Python receive plenty of attention including complete examples.
Authors Mark Lutz and David Ascher build on that fundamental information in their discussions of functions and modules, which evolve into coverage of namespaces, classes, and the object-oriented aspects of Python programming. There's also information on creating graphical user interfaces (GUIs) for Python applications with Tkinter.
In addition to its careful expository prose, Learning Python includes exercises that both test your Python skills and help reveal more elusive truths about the language. --This text refers to an out of print or unavailable edition of this title.
Review
As a book for programmers who want to learn Python, it does a very good job. The coverage is informative and well order; making it easy to find what you're looking for. Overall, if you do some work with Python, you will benefit from owning this book. " - Sam Smith, news@UK, March "This book is a good example of Python culture, in the clarity of its text as much as in the quality of its code. Anyhone working their way through it will have a solid foundation upon which to explore Python's potential. Highly recommended." - Ivan Uemilianin, CVu, October 2004 --This text refers to the Paperback edition.|,O'Reilly Media,USD 54.99
Think Python,Allen B. Downey,|Think Python is an introduction to Python programming for students with no programming experience. It starts with the most basic concepts of programming, and is carefully designed to define all terms when they are first used and to develop each new concept in a logical progression. Larger pieces, like recursion and object-oriented programming are divided into a sequence of smaller steps and introduced over the course of several chapters.|,O'Reilly Media,GBP 29.99
|Learn Python The Hard Way, 1st Edition|,Zed Shaw,|Learn Python The Hard Way is a book I wrote to teach programming to people who do not know how to code. It assumes you are probably a power user of your computer, and then takes you from nothing to programming simple games. After reading my book you should be ready for many of the other programming books out there.|,Lulu.com,$29.99
Selenium 2自动化测试实战,虫师,|《Selenium 2自动化测试实战——基于Python语言》共分 14 章。第 1 章是自动化测试相关基础知识的介绍；第 2 章到第 10 章是《Selenium 2自动化测试实战——基于Python语言》的重点，循 序渐进地介绍了自动化测试所用到的技术；第 11 章通过一个具体的项目综合运用了前面章节所介绍 的技术与技巧；第 12 章到第 14 章选取了当前最热门的技术进行了介绍，旨在扩展测试人员的综合技 术能力。 《Selenium 2自动化测试实战——基于Python语言》的写作目的并不是为了简单地告诉读者如何使用一个自动化测试工具，而是希望读者在学习
《Selenium 2自动化测试实战——基于Python语言》的内容后能够提高综合的技术高度与宽度，从而摆脱简单的手工测试，向高级测试工程师的道路 迈进。|,电子工业出版社,CNY 59.00
NumPy攻略,[印尼] Ivan Idris,|本书带领读者了解熟悉当下最流行的科学计算库NumPy的方方面面。书中不仅介绍了NumPy的安装、使用和各种相关概念，还介绍了如何利用这一最新的开源软件库，以尽可能接近传统数学语言的方式，编写可读性好、实现效率高和运行速度快的代码。最后还探究了几个和NumPy相关的科学计算项目。此外，本书将为你掌握NumPy数组和通用函数打下坚实的基础，也会通过实例教你用Matplotlib绘图，并了解和SciPy相关的项目。
本书将帮助你：
• 学习高级索引技术和线性代数知识
• 了解数组形状及图像大小的调整
• 探察广播机制和直方图
• 分析NumPy代码并用可视化的方式表示分析结果
• 用Cython为代码提速
• 使用数组接口共享数据
• 使用通用函数和互操作功能
• 学习Matplotlib以及经常和NumPy同时使用的SciPy|,人民邮电出版社,49.00
Python编程（第三版·英文影印版）,Mark Lutz,|《Python编程 第三版》已经成为Python用户的行业标准，且更加完善。第三版进行的更新反映了当前的最佳实践以及在语言的最新版本Python 2.5中引入的大量改变。
无论是新手还是老手，你都会发现这本经过彻底更新的书确实名副其实，它教给你编写代码的正确途径。它以清晰而简练的方式解释了Python语言的语法以及编程技巧，并辅以大量例子阐明正确的使用方法和通用特性。通过阅读这本全面的指南，你将学习到如何将Python运用到实际问题中，例如：
·用户图形界面编程
·并行处理
·网络应用程序
·Internet脚本编程
·数据库管理
从深入讨论核心概念开始，再到完整的程序，《Python编程 第三版》逐一覆盖这些领域。书中确有大型的程序示例，但只在你已经掌握了足够的知识，能够理解技术和代码后才会出现。
在学习过程中，你也会学到如何在实际规模的程序中使用Python——诸如面向对象编程和代码重用概念皆是贯穿全书的副题。如果你对Python 程序设计感兴趣，就需要这本O'Reilly经典书籍长伴你的左右。实践中的建议、代码的片断和程序设计模式，这些财富都可以在日常生活中得到应用——使你的生活更轻松更高效。|,东南大学出版社,138.00元
Python Tutorial,|Guido Van Rossum,Fred L. Drake, Jr (editor)|,最权威的 Python 教程，由 Python 作者 Guido van Rossum 主笔，有少许学院味道。中文电子版由刘鑫、李梦夷翻译。英文原稿网址：http:\/\/docs.python.org\/tut\/简体中文版网址：http:\/\/wiki.woodpecker.org.cn\/moin\/March_Liu\/PyTutorial,Iuniverse Inc,USD 12.95
Python UNIX和Linux系统管理指南,|基弗特 (Gift, Noab),琼斯 (Jones, Jeremy M.)|,|《Python UNIX和Linux系统管理指南》介绍了Python语言如何为管理uNIx和Linux服务器提供各种更加有效的任务处理方式。书中各章都提出了具体的管理问题，如并发或数据备份，然后通过Python示例提供了解决方案。通过《Python UNIX和Linux系统管理指南》，读者可以学习如何用Python开发自己的一套命令行工具来解决诸多问题。
作者建立了一个免费下载的Ubuntu虚拟机，其中包含《Python UNIX和Linux系统管理指南》的源代码和运行实例，也包括SNMP、IPython、SQLAlchemy及其他工具。通过《Python UNIX和Linux系统管理指南》，你可以发现Python在如下几个方面的作用：
读取文本文件并提取信息。
使用多线程和fork选项。
使用网络设备从一个进程获取另一个进程的信息。
创建可点击的、易于交互的GUl工具。
通过交互式SNMP编程实现监控大型主机集群。
掌握IPython shell，作为Bash、Korn或Z—Shell的替换或补充。
将云计算整合到基础设施中，编写Google App引擎的应用程序。
通过定制脚本解决独特数据备份的难题。
使用Djan90、SQLAlchemy和Storm ORM与数据库进行交互。
通过《Python UNIX和Linux系统管理指南》及其补充的虚拟机，你可以了解如何打包并部署Python应用程序和库，以及编写代码在类似的多个UNIXfH Linux平台上运行。|,机械工业出版社,65.00元
Foundations of Python Network Programming,|John Goerzen,Tim Bower,Brandon Rhodes|,|This second edition of Foundations of Python Network Programming targets Python 2.5 through Python 2.7, the most popular production versions of the language. Python has made great strides since Apress released the first edition of this book back in the days of Python 2.3. The advances required new chapters to be written from the ground up, and others to be extensively revised. You will learn fundamentals like IP, TCP, DNS and SSL by using working Python programs; you will also be able to familiarize yourself with infrastructure components like memcached and message queues. You can also delve into Network server designs, and compare threaded approaches with asynchronous event-based solutions. But the biggest change is this edition's expanded treatment of the web. The HTTP protocol is covered in extensive detail, with each feature accompanied by sample Python code. You can use your HTTP protocol expertise by studying an entire chapter on screen scraping and you can then test lxml and BeautifulSoup against a real-world web site. The chapter on web application programming now covers both the WSGI standard for component interoperability, as well as modern web frameworks like Django. Finally, all of the old favorites from the first edition are back: E-mail protocols like SMTP, POP, and IMAP get full treatment, as does XML-RPC. You can still learn how to code Python network programs using the Telnet and FTP protocols, but you are likely to appreciate the power of more modern alternatives like the paramiko SSH2 library. If you are a Python programmer who needs to learn the network, this is the book that you want by your side. What you'll learn * Understand low level networking * Handle sending and receiving email including composing and decoding emails, SMTP, POP and IMAP * Program the lower levels of web application programming such as FastCGI and WSGI and HTTP itself * Learn how to use memcached and message qeues using Python * Access web services using Python * Master multitasking with threads, forking, and asynchronous communication Who this book is for This book will be of interest to python programmers who need to program networked applications using Python. From web application developers, to systems integrators, to system administrators--this book has everything you need to know. Table of Contents * Introduction to Client\/Server Networking * UDP * TCP * Socket Names and DNS * Network Data and Network Errors * TLS and SSL * Server Architecture * Caches, Message Queues, and Map-Reduce * HTTP * Screen Scraping * Web Applications * E-mail Composition and Decoding * SMTP * POP * IMAP * Telnet and SSH * FTP * RPC|,Apress,USD 54.99
How to Think Like a Computer Scientist: Learning with Python,|Allen B. Downey,Jeffrey Elkner,Chris Meyers|,|""How to Think Like a Computer Scientist"" is an introduction to programming using Python, one of the best languages for beginners. This is a Free Book -- you can download it from thinkpython.com. But if you would like to make a contribution to this project, you can do it by buying a hardcopy or paying to download the electronic version here. Thank you!|,Green Tea Press,USD 24.95
Python机器学习,[美] Michael Bowles,|在学习和研究机器学习的时候，面临令人眼花缭乱的算法，机器学习新手往往会不知
所措。本书从算法和Python 语言实现的角度，帮助读者认识机器学习。
书专注于两类核心的“算法族”，即惩罚线性回归和集成方法，并通过代码实例来
展示所讨论的算法的使用原则。全书共分为7 章，详细讨论了预测模型的两类核心算法、预测模型的构建、惩罚线性回归和集成方法的具体应用和实现。
本书主要针对想提高机器学习技能的Python 开发人员，帮助他们解决某一特定的项
目或是提升相关的技能。|,人民邮电出版社,69.00元
从Python开始学编程,Vamei,改编自Vamei博客的《Python快速教程》。本书以Python为样本，不仅介绍了编程的基本概念，还着重讲解编程语言的主流范式：面向过程、面向对象、面向函数。读者不仅可以轻松学会Python，以后再学习其他编程语言时也会更加容易。,电子工业出版社,CNY 49.00
Natural Language Processing with Python,|Steven Bird,Ewan Klein,Edward Loper|,|This book offers a highly accessible introduction to Natural Language Processing, the field that underpins a variety of language technologies, ranging from predictive text and email filtering to automatic summarization and translation. With Natural Language Processing with Python, you'll learn how to write Python programs to work with large collections of unstructured text. You'll access richly-annotated datasets using a comprehensive range of linguistic data structures. And you'll understand the main algorithms for analyzing the content and structure of written communication.
Packed with examples and exercises, Natural Language Processing with Python will help you:
* Extract information from unstructured text, to guess the topic or identify "named entities"
* Analyze linguistic structure in text, including parsing and semantic analysis
* Access popular linguistic databases, including WordNet and treebanks
* Integrate techniques drawn from fields as diverse as linguistics and artificial intelligence
Perfect for individual study, or as a classroom and workshop textbook, this book will help you gain practical skills in Natural Language Processing using the Python programming language and the Natural Language Toolkit (NLTK) open source library.
If you're interested in developing Web applications, analyzing multilingual news sources, documenting endangered languages, or if you are simply curious to have a programmer's perspective on how human language works, you will find Natural Language Processing with Python both fascinating and immensely useful.|,O'Reilly Media,USD 44.99
Python,James O. Knowlton,|Python: Create-Modify-Reuse is designed for all levels of Python developers interested in a practical, hands-on way of learning Python development. This book is designed to show you how to use Python (in combination with the raw processing power of your computer) to accomplish real-world tasks in a more efficient way. Don't look for an exhaustive description of the Python language––you won't find it. The book's main purpose is not to thoroughly cover the Python language, but rather to show how you can use Python to create robust, real-world applications. In this respect, the goal is similar to foreign-language books that identify themselves as “conversational,” focusing on the vocabulary and concepts that people will need the most. Likewise, I focus specifically on the Python knowledge needed to accomplish practical, specific tasks. Along the way, you will learn to create useful, efficient scripts that are easy to maintain and enhance. This book is for developers with some experience with Python who want to explore how to develop full-blown applications. It is also for developers with experience in other languages who want to learn Python by building robust applications. It is well-suited for developers who like to “learn by doing,” rather than exploring a language feature by feature. To get the most out of the book, you should understand basic programming principles. Because this book is project-based, you can approach it in numerous ways. You can, of course, read it from cover to cover. Chapters 2 through 8 each cover a different project, so the chapters are independent of each other. However, because each chapter project is covered individually, there may be some overlap of information. I also sometimes refer to explanations of particular topics covered in previous chapters. This will help to reinforce important concepts. The end of the book contains two appendixes. The first one is a listing of Python resources you can check out for more information. The second one will help you with installing additional components used in some of the examples. This book starts with a basic overview of the Python language, designed for those familiar with other languages but new to Python. It is followed by several chapters, each of which describes a complete project that can be used as-is or modified and extended to suit your particular purposes. You'll find applications that access databases, take advantage of web technologies, and facilitate network communications, to name a few. In addition, and more important than the technologies you will be introduced to, you will learn how to use Python to solve real challenges. Following these chapters are two chapters that cover accessing operating system resources and debugging and testing, respectively. Each project chapter contains complete instructions describing how to install and use the application, so you can actually see the program run as you learn how to construct and use it, including how the project was designed and prototyped. This book is intended to be both a reference guide and a learning aid, teaching you how to build solutions with Python and providing reference information on a wide variety of Python programming concepts. It is hoped that this book will help you have fun with Python and build useful applications, and—unlike my experience with building a deck—without sore thumbs. This book is framed around the code itself. This is because developers are typically looking for how to do something; and, as with many activities, you learn how to do something by watching how others do and trying it yourself. If you want to know how a  for  loop works, you'll find  for  loops in my code, but that's not the thrust of the book. Instead, this book shows you how to do things: how to build a content management system, how to build a test management system, how to set up a system for tracking customer follow-up, and so on. Along the way, you'll learn how to communicate with a SQL database, how to act as a web server or communicate with one, how to access operating system services, and more. There are three basic components to the book: Chapter 1 is a brief overview of the Python language. Chapters 2–8 cover seven different programming projects, which illustrate various technologies and techniques available to Python developers. Chapters 9–10 cover additional, advanced topics, which will help you as you build Python projects. The project chapters have a consistent structure: Overview: What does the application do? Using the program Design How it all fits together Modules involved Code and code explanation Module\/class 1 explanation Module\/class 2 explanation Minor code file explanation Testing, including suggested tests Modifying the project, including some suggested adaptations Summary Each project is designed with classes that can be reused and accessed for multiple purposes. This is one of the main benefits of object-oriented programming, so designing for reusability is a main focus of the book. The book contains the following chapters: 1. Python Basics This chapter is a basic primer on the Python language, and it functions as either a quick tutorial for experienced programmers new to Python or a refresher for programmers with Python experience. Part I: The Projects 2. Directory\/File Snapshot Program This project demonstrates how to interact with files, create and manipulate data structures, and provide user output. It also touches on code design issues to improve code maintainability. Often when installing or uninstalling software, or verifying changes to a file system, it can be valuable to take a “snapshot” of the files and directories, along with their size and last-modified time. The script introduced in this chapter does just that. This chapter also explores how to capture a directory listing into a Python list, and explains how to query this list for particular values. 3. DVD Inventory System This project takes advantage of Python’s capability to access and manipulate data in a SQL database. The application enables multiple users to log in to a website that provides access to a DVD inventory database. Permissions are set such that some users can add, modify, or delete entries, whereas other users have read-only access to the data. 4. Web Performance Tester This project shows how to communicate with a Python web server and retrieve information regarding how long it takes to receive requested items from the web server. Although writing Python programs to work on a single computer can be useful, the real power of Python can be seen when it is used to script communication between computers on a network. Most networks contain several web servers. A nice feature of Python is that it can act as a lightweight server for various Internet protocols, such as HTTP (web) and ftp. This application enables you to monitor performance of HTTP traffic on your network. 5. Customer Follow-Up System This project shows how to present a web form to the user and retrieve data from it, how to automatically format and send e-mail through an SMTP server, and how to generate an HTML-formatted report. The task for the second example is to automatically generate a customer comments e-mail message based on information the customer enters in a form. It uses the  mod_python  Apache module to take the information entered in the HTTP form and then utilizes a Python script on the web server to send that information to an SMTP server for mail delivery. 6. Test Management\/Reporting System This project makes use of the  unittest  module to run tests against an existing application, and creates a framework for reporting test results. Testing is a vital process for developing software. This application enables users to run tests for a given piece of software, to list the previous test runs by date, to show test run results for any previously run tests, and to output the results of any test run as HTML for viewing in a web browser. 7. Version Management System This project connects to a list of servers via telnet, checks the application version of a pre-set application list, and displays its results both as output and to a log file. Often, a system administrator needs to patch systems or ensure that systems have the latest application versions installed. This script is an easy way to accomplish that task. It makes use of Python’s capability to emulate a telnet client and log in to remote systems and perform functions on that remote system. 8. Content Management System This project explores Plone, a popular content management system based on Python and Zope (a Python-based application server). Because Python is a very mature language, numerous applications have been built on top of it. A great thing about working with Python-based applications is that you get the benefit of a full-blown application but you can still use Python to configure and customize it. Part II: Advanced Topics 9. Interacting with the Operating System When writing scripts “in the real world,” often it is critical to be able to access services available through (and particular to) the operating system you happen to be on. For example, suppose you wanted to read or modify the Window Registry? Or you wanted to get the Linux process ID of a particular process that is running? Is such a thing even possible? Definitely—and this chapter shows you how. 10. Debugging and Testing Because I am a software tester myself, testing is a subject that is certainly close to my heart. In this chapter, I discuss why testing is important, how to put the right amount of testing into your code, and how writing automated tests can help you to actually write code more quickly. You’ll look at PyUnit, the automated testing framework for Python, and learn how to use it to test the riskiest parts of a script. You’ll also explore the Python de...|,Wrox,USD 39.99
深入浅出Python（影印版）,Paul Barry,你是否想过通过一本书来学习Python？《深入浅出Python))通过一种独特的超越语法手册的方式来帮助你学习Python。你将能够快速掌握Python的基础知识，然后扩展到持久化、异常处理、Web开发、SQLite、数据处理和Google应用引擎中去。你也将学会如何为Android编写移动应用，这要感谢Pvthon带给你的强大能力。《深入浅出Python》融合了完备的学习经验，它将帮助你成为真正的Python编程员。,东南大学出版社,88.00元
python黑帽子,[美]Justin Seitz,本书是畅销书《Python 灰帽子—黑客与逆向工程师的 Python 编程之道》的姊妹篇，那本书一面市便占据计算机安全类书籍的头把交椅。本书由 Immunity 公司的高级安全研究员 Justin Seitz 精心撰写。作者根据自己在安全界，特别是渗透测试领域的几十年经验，向读者介绍了 Python 如何被用在黑客和渗透测试的各个领域，从基本的网络扫描到数据包捕获，从 Web 爬虫到编写 Burp 扩展工具，从编写木马到权限提升等。 作者在本书中的很多实例都非常具有创新和启发意义， 如 HTTP 数据中的图片检测、 基于 GitHub命令进行控制的模块化木马、浏览器的中间人攻击技术、利用 COM 组件自动化技术窃取数据、通过进程监视和代码插入实现权限提升、通过向虚拟机内存快照中插入 shellcode 实现木马驻留和权限提升等。通过对这些技术的学习，读者不仅能掌握各种 Python 库的应用和编程技术，还能拓宽视野，培养和锻炼自己的黑客思维。读者在阅读本书时也完全感觉不到其他一些技术书籍常见的枯燥和乏味,电子工业出版社,55
Python,Eprogramy,,CreateSpace Independent Publishing Platform,USD 9.99
流畅的Python,[巴西] Luciano Ramalho,|【技术大咖推荐】
“很荣幸担任这本优秀图书的技术审校。这本书能帮助很多中级Python程序员掌握这门语言，我也从中学到了相当多的知识！”——Alex Martelli，Python软件基金会成员
“对于想要扩充知识的中级和高级Python程序员来说，这本书是充满了实用编程技巧的宝藏。”——Daniel Greenfeld和Audrey Roy Greenfeld，Two Scoops of Django作者
【本书特色】
本书由奋战在Python开发一线近20年的Luciano Ramalho执笔，Victor Stinner、Alex Martelli等Python大咖担纲技术审稿人，从语言设计层面剖析编程细节，兼顾Python 3和Python 2，告诉你Python中不亲自动手实践就无法理解的语言陷阱成因和解决之道，教你写出风格地道的Python代码。
●	Python数据模型：理解为什么特殊方法是对象行为一致的关键。
●	数据结构：充分利用内置类型，理解Unicode文本和字节二象性。
●	把函数视作对象：把Python函数视作一等对象，并了解这一点对流行的设计模式的影响。
●	面向对象习惯用法：通过构建类学习引用、可变性、接口、运算符重载和多重继承。
●	控制流程：学习使用上下文管理器、生成器、协程，以及通过concurrent.futures和asyncio包实现的并发。
●	元编程：理解特性、描述符、类装饰器和元类的工作原理。
【主要内容】
本书致力于帮助Python开发人员挖掘这门语言及相关程序库的优秀特性，避免重复劳动，同时写出简洁、流畅、易读、易维护，并且具有地道Python风格的代码。本书尤其深入探讨了Python语言的高级用法，涵盖数据结构、Python风格的对象、并行与并发，以及元编程等不同的方面。
本书适合中高级Python软件开发人员阅读参考。
【译者简介】
安道
专注于现代计算机技术的自由翻译，译有《Flask Web 开发》《Python 网络编程攻略》《Ruby on Rails 教程》等书。
个人网站：http:\/\/about.ac\/。
吴珂
现为Airbnb公司软件工程师，所在团队主要负责开发和维护各类可伸缩、高性能服务，并在Airbnb内推广面向服务的系统架构。在分布式系统、云存储服务和跨平台SDK开发，以及大规模数据处理等方面有多年经验。|,人民邮电出版社,139元
Python计算与编程实践,|（美）Mark Guzdial,（美）Barbara Ericson|,|计算机程序设计课程往往是枯燥乏味的，而本书根据教育理论，开发了一种新的教学方法，介绍如何通过多媒体编程来学习计算机程序设计，将趣味性和实用性融于枯燥的编程课程的教学当中。本书方法独特新颖，实例通俗易懂，可帮助读者快速入门并深入掌握编程技能，是一本理论联系实际的程序设计教程。
本书使用的编程语言是Python，这是因为Python强大实用（比如网站开发）、易于入门，计算机科学专业和非专业人士都可以学习。本书以Python数字多媒体编程为主线，从图像、声音、文本和电影这些学生已经熟知的内容开始，讲解它们的处理方法，其中穿插介绍计算机科学与程序设计的基础知识。在讲解知识点的时候也独具匠心，先介绍容易理解的基本概念，如赋值、顺序操作、迭代、条件式、函数定义等，逐步涉及抽象内容，如算法复杂度、程序效率、计算机组成、层次式分解、递归、面向对象等。本书还提供了大量例题和习题，方便教学。|,机械工业出版社,69.00元
Learning Python,Mark Lutz,|Amazon.com Review
The authors of Learning Python show you enough essentials of the Python scripting language to enable you to begin solving problems right away, then reveal more powerful aspects of the language one at a time. This approach is sure to appeal to programmers and system administrators who have urgent problems and a preference for learning by semi-guided experimentation.
First off, Learning Python shows the relationships among Python scripts and their interpreter (in a mostly platform-neutral way). Then, the authors address the mechanics of the language itself, providing illustrations of how Python conceives of numbers, strings, and other objects as well as the operators you use to work with them. Dictionaries, lists, tuples, and other data structures specific to Python receive plenty of attention including complete examples.
Authors Mark Lutz and David Ascher build on that fundamental information in their discussions of functions and modules, which evolve into coverage of namespaces, classes, and the object-oriented aspects of Python programming. There's also information on creating graphical user interfaces (GUIs) for Python applications with Tkinter.
In addition to its careful expository prose, Learning Python includes exercises that both test your Python skills and help reveal more elusive truths about the language. --This text refers to an out of print or unavailable edition of this title.
Review
As a book for programmers who want to learn Python, it does a very good job. The coverage is informative and well order; making it easy to find what you're looking for. Overall, if you do some work with Python, you will benefit from owning this book. " - Sam Smith, news@UK, March "This book is a good example of Python culture, in the clarity of its text as much as in the quality of its code. Anyhone working their way through it will have a solid foundation upon which to explore Python's potential. Highly recommended." - Ivan Uemilianin, CVu, October 2004 --This text refers to the Paperback edition.|,O'Reilly Media,USD 54.99
Think Python,Allen B. Downey,|Think Python is an introduction to Python programming for students with no programming experience. It starts with the most basic concepts of programming, and is carefully designed to define all terms when they are first used and to develop each new concept in a logical progression. Larger pieces, like recursion and object-oriented programming are divided into a sequence of smaller steps and introduced over the course of several chapters.|,O'Reilly Media,GBP 29.99
|Learn Python The Hard Way, 1st Edition|,Zed Shaw,|Learn Python The Hard Way is a book I wrote to teach programming to people who do not know how to code. It assumes you are probably a power user of your computer, and then takes you from nothing to programming simple games. After reading my book you should be ready for many of the other programming books out there.|,Lulu.com,$29.99
Selenium 2自动化测试实战,虫师,|《Selenium 2自动化测试实战——基于Python语言》共分 14 章。第 1 章是自动化测试相关基础知识的介绍；第 2 章到第 10 章是《Selenium 2自动化测试实战——基于Python语言》的重点，循 序渐进地介绍了自动化测试所用到的技术；第 11 章通过一个具体的项目综合运用了前面章节所介绍 的技术与技巧；第 12 章到第 14 章选取了当前最热门的技术进行了介绍，旨在扩展测试人员的综合技 术能力。 《Selenium 2自动化测试实战——基于Python语言》的写作目的并不是为了简单地告诉读者如何使用一个自动化测试工具，而是希望读者在学习
《Selenium 2自动化测试实战——基于Python语言》的内容后能够提高综合的技术高度与宽度，从而摆脱简单的手工测试，向高级测试工程师的道路 迈进。|,电子工业出版社,CNY 59.00
NumPy攻略,[印尼] Ivan Idris,|本书带领读者了解熟悉当下最流行的科学计算库NumPy的方方面面。书中不仅介绍了NumPy的安装、使用和各种相关概念，还介绍了如何利用这一最新的开源软件库，以尽可能接近传统数学语言的方式，编写可读性好、实现效率高和运行速度快的代码。最后还探究了几个和NumPy相关的科学计算项目。此外，本书将为你掌握NumPy数组和通用函数打下坚实的基础，也会通过实例教你用Matplotlib绘图，并了解和SciPy相关的项目。
本书将帮助你：
• 学习高级索引技术和线性代数知识
• 了解数组形状及图像大小的调整
• 探察广播机制和直方图
• 分析NumPy代码并用可视化的方式表示分析结果
• 用Cython为代码提速
• 使用数组接口共享数据
• 使用通用函数和互操作功能
• 学习Matplotlib以及经常和NumPy同时使用的SciPy|,人民邮电出版社,49.00
Python编程（第三版·英文影印版）,Mark Lutz,|《Python编程 第三版》已经成为Python用户的行业标准，且更加完善。第三版进行的更新反映了当前的最佳实践以及在语言的最新版本Python 2.5中引入的大量改变。
无论是新手还是老手，你都会发现这本经过彻底更新的书确实名副其实，它教给你编写代码的正确途径。它以清晰而简练的方式解释了Python语言的语法以及编程技巧，并辅以大量例子阐明正确的使用方法和通用特性。通过阅读这本全面的指南，你将学习到如何将Python运用到实际问题中，例如：
·用户图形界面编程
·并行处理
·网络应用程序
·Internet脚本编程
·数据库管理
从深入讨论核心概念开始，再到完整的程序，《Python编程 第三版》逐一覆盖这些领域。书中确有大型的程序示例，但只在你已经掌握了足够的知识，能够理解技术和代码后才会出现。
在学习过程中，你也会学到如何在实际规模的程序中使用Python——诸如面向对象编程和代码重用概念皆是贯穿全书的副题。如果你对Python 程序设计感兴趣，就需要这本O'Reilly经典书籍长伴你的左右。实践中的建议、代码的片断和程序设计模式，这些财富都可以在日常生活中得到应用——使你的生活更轻松更高效。|,东南大学出版社,138.00元
Python Tutorial,|Guido Van Rossum,Fred L. Drake, Jr (editor)|,最权威的 Python 教程，由 Python 作者 Guido van Rossum 主笔，有少许学院味道。中文电子版由刘鑫、李梦夷翻译。英文原稿网址：http:\/\/docs.python.org\/tut\/简体中文版网址：http:\/\/wiki.woodpecker.org.cn\/moin\/March_Liu\/PyTutorial,Iuniverse Inc,USD 12.95
Python UNIX和Linux系统管理指南,|基弗特 (Gift, Noab),琼斯 (Jones, Jeremy M.)|,|《Python UNIX和Linux系统管理指南》介绍了Python语言如何为管理uNIx和Linux服务器提供各种更加有效的任务处理方式。书中各章都提出了具体的管理问题，如并发或数据备份，然后通过Python示例提供了解决方案。通过《Python UNIX和Linux系统管理指南》，读者可以学习如何用Python开发自己的一套命令行工具来解决诸多问题。
作者建立了一个免费下载的Ubuntu虚拟机，其中包含《Python UNIX和Linux系统管理指南》的源代码和运行实例，也包括SNMP、IPython、SQLAlchemy及其他工具。通过《Python UNIX和Linux系统管理指南》，你可以发现Python在如下几个方面的作用：
读取文本文件并提取信息。
使用多线程和fork选项。
使用网络设备从一个进程获取另一个进程的信息。
创建可点击的、易于交互的GUl工具。
通过交互式SNMP编程实现监控大型主机集群。
掌握IPython shell，作为Bash、Korn或Z—Shell的替换或补充。
将云计算整合到基础设施中，编写Google App引擎的应用程序。
通过定制脚本解决独特数据备份的难题。
使用Djan90、SQLAlchemy和Storm ORM与数据库进行交互。
通过《Python UNIX和Linux系统管理指南》及其补充的虚拟机，你可以了解如何打包并部署Python应用程序和库，以及编写代码在类似的多个UNIXfH Linux平台上运行。|,机械工业出版社,65.00元
Foundations of Python Network Programming,|John Goerzen,Tim Bower,Brandon Rhodes|,|This second edition of Foundations of Python Network Programming targets Python 2.5 through Python 2.7, the most popular production versions of the language. Python has made great strides since Apress released the first edition of this book back in the days of Python 2.3. The advances required new chapters to be written from the ground up, and others to be extensively revised. You will learn fundamentals like IP, TCP, DNS and SSL by using working Python programs; you will also be able to familiarize yourself with infrastructure components like memcached and message queues. You can also delve into Network server designs, and compare threaded approaches with asynchronous event-based solutions. But the biggest change is this edition's expanded treatment of the web. The HTTP protocol is covered in extensive detail, with each feature accompanied by sample Python code. You can use your HTTP protocol expertise by studying an entire chapter on screen scraping and you can then test lxml and BeautifulSoup against a real-world web site. The chapter on web application programming now covers both the WSGI standard for component interoperability, as well as modern web frameworks like Django. Finally, all of the old favorites from the first edition are back: E-mail protocols like SMTP, POP, and IMAP get full treatment, as does XML-RPC. You can still learn how to code Python network programs using the Telnet and FTP protocols, but you are likely to appreciate the power of more modern alternatives like the paramiko SSH2 library. If you are a Python programmer who needs to learn the network, this is the book that you want by your side. What you'll learn * Understand low level networking * Handle sending and receiving email including composing and decoding emails, SMTP, POP and IMAP * Program the lower levels of web application programming such as FastCGI and WSGI and HTTP itself * Learn how to use memcached and message qeues using Python * Access web services using Python * Master multitasking with threads, forking, and asynchronous communication Who this book is for This book will be of interest to python programmers who need to program networked applications using Python. From web application developers, to systems integrators, to system administrators--this book has everything you need to know. Table of Contents * Introduction to Client\/Server Networking * UDP * TCP * Socket Names and DNS * Network Data and Network Errors * TLS and SSL * Server Architecture * Caches, Message Queues, and Map-Reduce * HTTP * Screen Scraping * Web Applications * E-mail Composition and Decoding * SMTP * POP * IMAP * Telnet and SSH * FTP * RPC|,Apress,USD 54.99
How to Think Like a Computer Scientist: Learning with Python,|Allen B. Downey,Jeffrey Elkner,Chris Meyers|,|""How to Think Like a Computer Scientist"" is an introduction to programming using Python, one of the best languages for beginners. This is a Free Book -- you can download it from thinkpython.com. But if you would like to make a contribution to this project, you can do it by buying a hardcopy or paying to download the electronic version here. Thank you!|,Green Tea Press,USD 24.95
Python机器学习,[美] Michael Bowles,|在学习和研究机器学习的时候，面临令人眼花缭乱的算法，机器学习新手往往会不知
所措。本书从算法和Python 语言实现的角度，帮助读者认识机器学习。
书专注于两类核心的“算法族”，即惩罚线性回归和集成方法，并通过代码实例来
展示所讨论的算法的使用原则。全书共分为7 章，详细讨论了预测模型的两类核心算法、预测模型的构建、惩罚线性回归和集成方法的具体应用和实现。
本书主要针对想提高机器学习技能的Python 开发人员，帮助他们解决某一特定的项
目或是提升相关的技能。|,人民邮电出版社,69.00元
从Python开始学编程,Vamei,改编自Vamei博客的《Python快速教程》。本书以Python为样本，不仅介绍了编程的基本概念，还着重讲解编程语言的主流范式：面向过程、面向对象、面向函数。读者不仅可以轻松学会Python，以后再学习其他编程语言时也会更加容易。,电子工业出版社,CNY 49.00
Natural Language Processing with Python,|Steven Bird,Ewan Klein,Edward Loper|,|This book offers a highly accessible introduction to Natural Language Processing, the field that underpins a variety of language technologies, ranging from predictive text and email filtering to automatic summarization and translation. With Natural Language Processing with Python, you'll learn how to write Python programs to work with large collections of unstructured text. You'll access richly-annotated datasets using a comprehensive range of linguistic data structures. And you'll understand the main algorithms for analyzing the content and structure of written communication.
Packed with examples and exercises, Natural Language Processing with Python will help you:
* Extract information from unstructured text, to guess the topic or identify "named entities"
* Analyze linguistic structure in text, including parsing and semantic analysis
* Access popular linguistic databases, including WordNet and treebanks
* Integrate techniques drawn from fields as diverse as linguistics and artificial intelligence
Perfect for individual study, or as a classroom and workshop textbook, this book will help you gain practical skills in Natural Language Processing using the Python programming language and the Natural Language Toolkit (NLTK) open source library.
If you're interested in developing Web applications, analyzing multilingual news sources, documenting endangered languages, or if you are simply curious to have a programmer's perspective on how human language works, you will find Natural Language Processing with Python both fascinating and immensely useful.|,O'Reilly Media,USD 44.99
Python,James O. Knowlton,|Python: Create-Modify-Reuse is designed for all levels of Python developers interested in a practical, hands-on way of learning Python development. This book is designed to show you how to use Python (in combination with the raw processing power of your computer) to accomplish real-world tasks in a more efficient way. Don't look for an exhaustive description of the Python language––you won't find it. The book's main purpose is not to thoroughly cover the Python language, but rather to show how you can use Python to create robust, real-world applications. In this respect, the goal is similar to foreign-language books that identify themselves as “conversational,” focusing on the vocabulary and concepts that people will need the most. Likewise, I focus specifically on the Python knowledge needed to accomplish practical, specific tasks. Along the way, you will learn to create useful, efficient scripts that are easy to maintain and enhance. This book is for developers with some experience with Python who want to explore how to develop full-blown applications. It is also for developers with experience in other languages who want to learn Python by building robust applications. It is well-suited for developers who like to “learn by doing,” rather than exploring a language feature by feature. To get the most out of the book, you should understand basic programming principles. Because this book is project-based, you can approach it in numerous ways. You can, of course, read it from cover to cover. Chapters 2 through 8 each cover a different project, so the chapters are independent of each other. However, because each chapter project is covered individually, there may be some overlap of information. I also sometimes refer to explanations of particular topics covered in previous chapters. This will help to reinforce important concepts. The end of the book contains two appendixes. The first one is a listing of Python resources you can check out for more information. The second one will help you with installing additional components used in some of the examples. This book starts with a basic overview of the Python language, designed for those familiar with other languages but new to Python. It is followed by several chapters, each of which describes a complete project that can be used as-is or modified and extended to suit your particular purposes. You'll find applications that access databases, take advantage of web technologies, and facilitate network communications, to name a few. In addition, and more important than the technologies you will be introduced to, you will learn how to use Python to solve real challenges. Following these chapters are two chapters that cover accessing operating system resources and debugging and testing, respectively. Each project chapter contains complete instructions describing how to install and use the application, so you can actually see the program run as you learn how to construct and use it, including how the project was designed and prototyped. This book is intended to be both a reference guide and a learning aid, teaching you how to build solutions with Python and providing reference information on a wide variety of Python programming concepts. It is hoped that this book will help you have fun with Python and build useful applications, and—unlike my experience with building a deck—without sore thumbs. This book is framed around the code itself. This is because developers are typically looking for how to do something; and, as with many activities, you learn how to do something by watching how others do and trying it yourself. If you want to know how a  for  loop works, you'll find  for  loops in my code, but that's not the thrust of the book. Instead, this book shows you how to do things: how to build a content management system, how to build a test management system, how to set up a system for tracking customer follow-up, and so on. Along the way, you'll learn how to communicate with a SQL database, how to act as a web server or communicate with one, how to access operating system services, and more. There are three basic components to the book: Chapter 1 is a brief overview of the Python language. Chapters 2–8 cover seven different programming projects, which illustrate various technologies and techniques available to Python developers. Chapters 9–10 cover additional, advanced topics, which will help you as you build Python projects. The project chapters have a consistent structure: Overview: What does the application do? Using the program Design How it all fits together Modules involved Code and code explanation Module\/class 1 explanation Module\/class 2 explanation Minor code file explanation Testing, including suggested tests Modifying the project, including some suggested adaptations Summary Each project is designed with classes that can be reused and accessed for multiple purposes. This is one of the main benefits of object-oriented programming, so designing for reusability is a main focus of the book. The book contains the following chapters: 1. Python Basics This chapter is a basic primer on the Python language, and it functions as either a quick tutorial for experienced programmers new to Python or a refresher for programmers with Python experience. Part I: The Projects 2. Directory\/File Snapshot Program This project demonstrates how to interact with files, create and manipulate data structures, and provide user output. It also touches on code design issues to improve code maintainability. Often when installing or uninstalling software, or verifying changes to a file system, it can be valuable to take a “snapshot” of the files and directories, along with their size and last-modified time. The script introduced in this chapter does just that. This chapter also explores how to capture a directory listing into a Python list, and explains how to query this list for particular values. 3. DVD Inventory System This project takes advantage of Python’s capability to access and manipulate data in a SQL database. The application enables multiple users to log in to a website that provides access to a DVD inventory database. Permissions are set such that some users can add, modify, or delete entries, whereas other users have read-only access to the data. 4. Web Performance Tester This project shows how to communicate with a Python web server and retrieve information regarding how long it takes to receive requested items from the web server. Although writing Python programs to work on a single computer can be useful, the real power of Python can be seen when it is used to script communication between computers on a network. Most networks contain several web servers. A nice feature of Python is that it can act as a lightweight server for various Internet protocols, such as HTTP (web) and ftp. This application enables you to monitor performance of HTTP traffic on your network. 5. Customer Follow-Up System This project shows how to present a web form to the user and retrieve data from it, how to automatically format and send e-mail through an SMTP server, and how to generate an HTML-formatted report. The task for the second example is to automatically generate a customer comments e-mail message based on information the customer enters in a form. It uses the  mod_python  Apache module to take the information entered in the HTTP form and then utilizes a Python script on the web server to send that information to an SMTP server for mail delivery. 6. Test Management\/Reporting System This project makes use of the  unittest  module to run tests against an existing application, and creates a framework for reporting test results. Testing is a vital process for developing software. This application enables users to run tests for a given piece of software, to list the previous test runs by date, to show test run results for any previously run tests, and to output the results of any test run as HTML for viewing in a web browser. 7. Version Management System This project connects to a list of servers via telnet, checks the application version of a pre-set application list, and displays its results both as output and to a log file. Often, a system administrator needs to patch systems or ensure that systems have the latest application versions installed. This script is an easy way to accomplish that task. It makes use of Python’s capability to emulate a telnet client and log in to remote systems and perform functions on that remote system. 8. Content Management System This project explores Plone, a popular content management system based on Python and Zope (a Python-based application server). Because Python is a very mature language, numerous applications have been built on top of it. A great thing about working with Python-based applications is that you get the benefit of a full-blown application but you can still use Python to configure and customize it. Part II: Advanced Topics 9. Interacting with the Operating System When writing scripts “in the real world,” often it is critical to be able to access services available through (and particular to) the operating system you happen to be on. For example, suppose you wanted to read or modify the Window Registry? Or you wanted to get the Linux process ID of a particular process that is running? Is such a thing even possible? Definitely—and this chapter shows you how. 10. Debugging and Testing Because I am a software tester myself, testing is a subject that is certainly close to my heart. In this chapter, I discuss why testing is important, how to put the right amount of testing into your code, and how writing automated tests can help you to actually write code more quickly. You’ll look at PyUnit, the automated testing framework for Python, and learn how to use it to test the riskiest parts of a script. You’ll also explore the Python de...|,Wrox,USD 39.99
深入浅出Python（影印版）,Paul Barry,你是否想过通过一本书来学习Python？《深入浅出Python))通过一种独特的超越语法手册的方式来帮助你学习Python。你将能够快速掌握Python的基础知识，然后扩展到持久化、异常处理、Web开发、SQLite、数据处理和Google应用引擎中去。你也将学会如何为Android编写移动应用，这要感谢Pvthon带给你的强大能力。《深入浅出Python》融合了完备的学习经验，它将帮助你成为真正的Python编程员。,东南大学出版社,88.00元
python黑帽子,[美]Justin Seitz,本书是畅销书《Python 灰帽子—黑客与逆向工程师的 Python 编程之道》的姊妹篇，那本书一面市便占据计算机安全类书籍的头把交椅。本书由 Immunity 公司的高级安全研究员 Justin Seitz 精心撰写。作者根据自己在安全界，特别是渗透测试领域的几十年经验，向读者介绍了 Python 如何被用在黑客和渗透测试的各个领域，从基本的网络扫描到数据包捕获，从 Web 爬虫到编写 Burp 扩展工具，从编写木马到权限提升等。 作者在本书中的很多实例都非常具有创新和启发意义， 如 HTTP 数据中的图片检测、 基于 GitHub命令进行控制的模块化木马、浏览器的中间人攻击技术、利用 COM 组件自动化技术窃取数据、通过进程监视和代码插入实现权限提升、通过向虚拟机内存快照中插入 shellcode 实现木马驻留和权限提升等。通过对这些技术的学习，读者不仅能掌握各种 Python 库的应用和编程技术，还能拓宽视野，培养和锻炼自己的黑客思维。读者在阅读本书时也完全感觉不到其他一些技术书籍常见的枯燥和乏味,电子工业出版社,55
Python,Eprogramy,,CreateSpace Independent Publishing Platform,USD 9.99
Python编程实战,[美] Mark Summerfield,|《python编程实战：运用设计模式、并发和程序库创建高质量程序》由python开发者社区知名技术专家mark summerfield亲笔撰写，全球资深python专家doug hellmann作序鼎力推荐，是python领域最有影响力的著作之一。书中通过大量实用的范例代码和三个完整的案例研究，全面而系统地讲解了如何运用设计模式来规划代码结构，如何通过并发与cython等技术提升代码执行速度，以及如何利用各种python程序库来快速开发具体的应用程序和游戏。
《python编程实战：运用设计模式、并发和程序库创建高质量程序》共8章：第1～3章分别介绍了python的几种设计模式(创建型设计模式、结构型设计模式和行为型设计模式)；第4章和第5章详细讲解了python的高级并发技术以及cython的用法；第6章具体介绍了python的高级网络编程；第7章阐释了如何用tkinter开发图形用户界面；第8章讲解了如何用opengl绘制3d图形。|,机械工业出版社,69.00元
Python计算与编程实践,|（美）Mark Guzdial,（美）Barbara Ericson|,|计算机程序设计课程往往是枯燥乏味的，而本书根据教育理论，开发了一种新的教学方法，介绍如何通过多媒体编程来学习计算机程序设计，将趣味性和实用性融于枯燥的编程课程的教学当中。本书方法独特新颖，实例通俗易懂，可帮助读者快速入门并深入掌握编程技能，是一本理论联系实际的程序设计教程。
本书使用的编程语言是Python，这是因为Python强大实用（比如网站开发）、易于入门，计算机科学专业和非专业人士都可以学习。本书以Python数字多媒体编程为主线，从图像、声音、文本和电影这些学生已经熟知的内容开始，讲解它们的处理方法，其中穿插介绍计算机科学与程序设计的基础知识。在讲解知识点的时候也独具匠心，先介绍容易理解的基本概念，如赋值、顺序操作、迭代、条件式、函数定义等，逐步涉及抽象内容，如算法复杂度、程序效率、计算机组成、层次式分解、递归、面向对象等。本书还提供了大量例题和习题，方便教学。|,机械工业出版社,69.00元
Learning Python,Mark Lutz,|Amazon.com Review
The authors of Learning Python show you enough essentials of the Python scripting language to enable you to begin solving problems right away, then reveal more powerful aspects of the language one at a time. This approach is sure to appeal to programmers and system administrators who have urgent problems and a preference for learning by semi-guided experimentation.
First off, Learning Python shows the relationships among Python scripts and their interpreter (in a mostly platform-neutral way). Then, the authors address the mechanics of the language itself, providing illustrations of how Python conceives of numbers, strings, and other objects as well as the operators you use to work with them. Dictionaries, lists, tuples, and other data structures specific to Python receive plenty of attention including complete examples.
Authors Mark Lutz and David Ascher build on that fundamental information in their discussions of functions and modules, which evolve into coverage of namespaces, classes, and the object-oriented aspects of Python programming. There's also information on creating graphical user interfaces (GUIs) for Python applications with Tkinter.
In addition to its careful expository prose, Learning Python includes exercises that both test your Python skills and help reveal more elusive truths about the language. --This text refers to an out of print or unavailable edition of this title.
Review
As a book for programmers who want to learn Python, it does a very good job. The coverage is informative and well order; making it easy to find what you're looking for. Overall, if you do some work with Python, you will benefit from owning this book. " - Sam Smith, news@UK, March "This book is a good example of Python culture, in the clarity of its text as much as in the quality of its code. Anyhone working their way through it will have a solid foundation upon which to explore Python's potential. Highly recommended." - Ivan Uemilianin, CVu, October 2004 --This text refers to the Paperback edition.|,O'Reilly Media,USD 54.99
Think Python,Allen B. Downey,|Think Python is an introduction to Python programming for students with no programming experience. It starts with the most basic concepts of programming, and is carefully designed to define all terms when they are first used and to develop each new concept in a logical progression. Larger pieces, like recursion and object-oriented programming are divided into a sequence of smaller steps and introduced over the course of several chapters.|,O'Reilly Media,GBP 29.99
|Learn Python The Hard Way, 1st Edition|,Zed Shaw,|Learn Python The Hard Way is a book I wrote to teach programming to people who do not know how to code. It assumes you are probably a power user of your computer, and then takes you from nothing to programming simple games. After reading my book you should be ready for many of the other programming books out there.|,Lulu.com,$29.99
Selenium 2自动化测试实战,虫师,|《Selenium 2自动化测试实战——基于Python语言》共分 14 章。第 1 章是自动化测试相关基础知识的介绍；第 2 章到第 10 章是《Selenium 2自动化测试实战——基于Python语言》的重点，循 序渐进地介绍了自动化测试所用到的技术；第 11 章通过一个具体的项目综合运用了前面章节所介绍 的技术与技巧；第 12 章到第 14 章选取了当前最热门的技术进行了介绍，旨在扩展测试人员的综合技 术能力。 《Selenium 2自动化测试实战——基于Python语言》的写作目的并不是为了简单地告诉读者如何使用一个自动化测试工具，而是希望读者在学习
《Selenium 2自动化测试实战——基于Python语言》的内容后能够提高综合的技术高度与宽度，从而摆脱简单的手工测试，向高级测试工程师的道路 迈进。|,电子工业出版社,CNY 59.00
NumPy攻略,[印尼] Ivan Idris,|本书带领读者了解熟悉当下最流行的科学计算库NumPy的方方面面。书中不仅介绍了NumPy的安装、使用和各种相关概念，还介绍了如何利用这一最新的开源软件库，以尽可能接近传统数学语言的方式，编写可读性好、实现效率高和运行速度快的代码。最后还探究了几个和NumPy相关的科学计算项目。此外，本书将为你掌握NumPy数组和通用函数打下坚实的基础，也会通过实例教你用Matplotlib绘图，并了解和SciPy相关的项目。
本书将帮助你：
• 学习高级索引技术和线性代数知识
• 了解数组形状及图像大小的调整
• 探察广播机制和直方图
• 分析NumPy代码并用可视化的方式表示分析结果
• 用Cython为代码提速
• 使用数组接口共享数据
• 使用通用函数和互操作功能
• 学习Matplotlib以及经常和NumPy同时使用的SciPy|,人民邮电出版社,49.00
Python编程（第三版·英文影印版）,Mark Lutz,|《Python编程 第三版》已经成为Python用户的行业标准，且更加完善。第三版进行的更新反映了当前的最佳实践以及在语言的最新版本Python 2.5中引入的大量改变。
无论是新手还是老手，你都会发现这本经过彻底更新的书确实名副其实，它教给你编写代码的正确途径。它以清晰而简练的方式解释了Python语言的语法以及编程技巧，并辅以大量例子阐明正确的使用方法和通用特性。通过阅读这本全面的指南，你将学习到如何将Python运用到实际问题中，例如：
·用户图形界面编程
·并行处理
·网络应用程序
·Internet脚本编程
·数据库管理
从深入讨论核心概念开始，再到完整的程序，《Python编程 第三版》逐一覆盖这些领域。书中确有大型的程序示例，但只在你已经掌握了足够的知识，能够理解技术和代码后才会出现。
在学习过程中，你也会学到如何在实际规模的程序中使用Python——诸如面向对象编程和代码重用概念皆是贯穿全书的副题。如果你对Python 程序设计感兴趣，就需要这本O'Reilly经典书籍长伴你的左右。实践中的建议、代码的片断和程序设计模式，这些财富都可以在日常生活中得到应用——使你的生活更轻松更高效。|,东南大学出版社,138.00元
Python Tutorial,|Guido Van Rossum,Fred L. Drake, Jr (editor)|,最权威的 Python 教程，由 Python 作者 Guido van Rossum 主笔，有少许学院味道。中文电子版由刘鑫、李梦夷翻译。英文原稿网址：http:\/\/docs.python.org\/tut\/简体中文版网址：http:\/\/wiki.woodpecker.org.cn\/moin\/March_Liu\/PyTutorial,Iuniverse Inc,USD 12.95
Python UNIX和Linux系统管理指南,|基弗特 (Gift, Noab),琼斯 (Jones, Jeremy M.)|,|《Python UNIX和Linux系统管理指南》介绍了Python语言如何为管理uNIx和Linux服务器提供各种更加有效的任务处理方式。书中各章都提出了具体的管理问题，如并发或数据备份，然后通过Python示例提供了解决方案。通过《Python UNIX和Linux系统管理指南》，读者可以学习如何用Python开发自己的一套命令行工具来解决诸多问题。
作者建立了一个免费下载的Ubuntu虚拟机，其中包含《Python UNIX和Linux系统管理指南》的源代码和运行实例，也包括SNMP、IPython、SQLAlchemy及其他工具。通过《Python UNIX和Linux系统管理指南》，你可以发现Python在如下几个方面的作用：
读取文本文件并提取信息。
使用多线程和fork选项。
使用网络设备从一个进程获取另一个进程的信息。
创建可点击的、易于交互的GUl工具。
通过交互式SNMP编程实现监控大型主机集群。
掌握IPython shell，作为Bash、Korn或Z—Shell的替换或补充。
将云计算整合到基础设施中，编写Google App引擎的应用程序。
通过定制脚本解决独特数据备份的难题。
使用Djan90、SQLAlchemy和Storm ORM与数据库进行交互。
通过《Python UNIX和Linux系统管理指南》及其补充的虚拟机，你可以了解如何打包并部署Python应用程序和库，以及编写代码在类似的多个UNIXfH Linux平台上运行。|,机械工业出版社,65.00元
Foundations of Python Network Programming,|John Goerzen,Tim Bower,Brandon Rhodes|,|This second edition of Foundations of Python Network Programming targets Python 2.5 through Python 2.7, the most popular production versions of the language. Python has made great strides since Apress released the first edition of this book back in the days of Python 2.3. The advances required new chapters to be written from the ground up, and others to be extensively revised. You will learn fundamentals like IP, TCP, DNS and SSL by using working Python programs; you will also be able to familiarize yourself with infrastructure components like memcached and message queues. You can also delve into Network server designs, and compare threaded approaches with asynchronous event-based solutions. But the biggest change is this edition's expanded treatment of the web. The HTTP protocol is covered in extensive detail, with each feature accompanied by sample Python code. You can use your HTTP protocol expertise by studying an entire chapter on screen scraping and you can then test lxml and BeautifulSoup against a real-world web site. The chapter on web application programming now covers both the WSGI standard for component interoperability, as well as modern web frameworks like Django. Finally, all of the old favorites from the first edition are back: E-mail protocols like SMTP, POP, and IMAP get full treatment, as does XML-RPC. You can still learn how to code Python network programs using the Telnet and FTP protocols, but you are likely to appreciate the power of more modern alternatives like the paramiko SSH2 library. If you are a Python programmer who needs to learn the network, this is the book that you want by your side. What you'll learn * Understand low level networking * Handle sending and receiving email including composing and decoding emails, SMTP, POP and IMAP * Program the lower levels of web application programming such as FastCGI and WSGI and HTTP itself * Learn how to use memcached and message qeues using Python * Access web services using Python * Master multitasking with threads, forking, and asynchronous communication Who this book is for This book will be of interest to python programmers who need to program networked applications using Python. From web application developers, to systems integrators, to system administrators--this book has everything you need to know. Table of Contents * Introduction to Client\/Server Networking * UDP * TCP * Socket Names and DNS * Network Data and Network Errors * TLS and SSL * Server Architecture * Caches, Message Queues, and Map-Reduce * HTTP * Screen Scraping * Web Applications * E-mail Composition and Decoding * SMTP * POP * IMAP * Telnet and SSH * FTP * RPC|,Apress,USD 54.99
How to Think Like a Computer Scientist: Learning with Python,|Allen B. Downey,Jeffrey Elkner,Chris Meyers|,|""How to Think Like a Computer Scientist"" is an introduction to programming using Python, one of the best languages for beginners. This is a Free Book -- you can download it from thinkpython.com. But if you would like to make a contribution to this project, you can do it by buying a hardcopy or paying to download the electronic version here. Thank you!|,Green Tea Press,USD 24.95
Python机器学习,[美] Michael Bowles,|在学习和研究机器学习的时候，面临令人眼花缭乱的算法，机器学习新手往往会不知
所措。本书从算法和Python 语言实现的角度，帮助读者认识机器学习。
书专注于两类核心的“算法族”，即惩罚线性回归和集成方法，并通过代码实例来
展示所讨论的算法的使用原则。全书共分为7 章，详细讨论了预测模型的两类核心算法、预测模型的构建、惩罚线性回归和集成方法的具体应用和实现。
本书主要针对想提高机器学习技能的Python 开发人员，帮助他们解决某一特定的项
目或是提升相关的技能。|,人民邮电出版社,69.00元
从Python开始学编程,Vamei,改编自Vamei博客的《Python快速教程》。本书以Python为样本，不仅介绍了编程的基本概念，还着重讲解编程语言的主流范式：面向过程、面向对象、面向函数。读者不仅可以轻松学会Python，以后再学习其他编程语言时也会更加容易。,电子工业出版社,CNY 49.00
Natural Language Processing with Python,|Steven Bird,Ewan Klein,Edward Loper|,|This book offers a highly accessible introduction to Natural Language Processing, the field that underpins a variety of language technologies, ranging from predictive text and email filtering to automatic summarization and translation. With Natural Language Processing with Python, you'll learn how to write Python programs to work with large collections of unstructured text. You'll access richly-annotated datasets using a comprehensive range of linguistic data structures. And you'll understand the main algorithms for analyzing the content and structure of written communication.
Packed with examples and exercises, Natural Language Processing with Python will help you:
* Extract information from unstructured text, to guess the topic or identify "named entities"
* Analyze linguistic structure in text, including parsing and semantic analysis
* Access popular linguistic databases, including WordNet and treebanks
* Integrate techniques drawn from fields as diverse as linguistics and artificial intelligence
Perfect for individual study, or as a classroom and workshop textbook, this book will help you gain practical skills in Natural Language Processing using the Python programming language and the Natural Language Toolkit (NLTK) open source library.
If you're interested in developing Web applications, analyzing multilingual news sources, documenting endangered languages, or if you are simply curious to have a programmer's perspective on how human language works, you will find Natural Language Processing with Python both fascinating and immensely useful.|,O'Reilly Media,USD 44.99
Python,James O. Knowlton,|Python: Create-Modify-Reuse is designed for all levels of Python developers interested in a practical, hands-on way of learning Python development. This book is designed to show you how to use Python (in combination with the raw processing power of your computer) to accomplish real-world tasks in a more efficient way. Don't look for an exhaustive description of the Python language––you won't find it. The book's main purpose is not to thoroughly cover the Python language, but rather to show how you can use Python to create robust, real-world applications. In this respect, the goal is similar to foreign-language books that identify themselves as “conversational,” focusing on the vocabulary and concepts that people will need the most. Likewise, I focus specifically on the Python knowledge needed to accomplish practical, specific tasks. Along the way, you will learn to create useful, efficient scripts that are easy to maintain and enhance. This book is for developers with some experience with Python who want to explore how to develop full-blown applications. It is also for developers with experience in other languages who want to learn Python by building robust applications. It is well-suited for developers who like to “learn by doing,” rather than exploring a language feature by feature. To get the most out of the book, you should understand basic programming principles. Because this book is project-based, you can approach it in numerous ways. You can, of course, read it from cover to cover. Chapters 2 through 8 each cover a different project, so the chapters are independent of each other. However, because each chapter project is covered individually, there may be some overlap of information. I also sometimes refer to explanations of particular topics covered in previous chapters. This will help to reinforce important concepts. The end of the book contains two appendixes. The first one is a listing of Python resources you can check out for more information. The second one will help you with installing additional components used in some of the examples. This book starts with a basic overview of the Python language, designed for those familiar with other languages but new to Python. It is followed by several chapters, each of which describes a complete project that can be used as-is or modified and extended to suit your particular purposes. You'll find applications that access databases, take advantage of web technologies, and facilitate network communications, to name a few. In addition, and more important than the technologies you will be introduced to, you will learn how to use Python to solve real challenges. Following these chapters are two chapters that cover accessing operating system resources and debugging and testing, respectively. Each project chapter contains complete instructions describing how to install and use the application, so you can actually see the program run as you learn how to construct and use it, including how the project was designed and prototyped. This book is intended to be both a reference guide and a learning aid, teaching you how to build solutions with Python and providing reference information on a wide variety of Python programming concepts. It is hoped that this book will help you have fun with Python and build useful applications, and—unlike my experience with building a deck—without sore thumbs. This book is framed around the code itself. This is because developers are typically looking for how to do something; and, as with many activities, you learn how to do something by watching how others do and trying it yourself. If you want to know how a  for  loop works, you'll find  for  loops in my code, but that's not the thrust of the book. Instead, this book shows you how to do things: how to build a content management system, how to build a test management system, how to set up a system for tracking customer follow-up, and so on. Along the way, you'll learn how to communicate with a SQL database, how to act as a web server or communicate with one, how to access operating system services, and more. There are three basic components to the book: Chapter 1 is a brief overview of the Python language. Chapters 2–8 cover seven different programming projects, which illustrate various technologies and techniques available to Python developers. Chapters 9–10 cover additional, advanced topics, which will help you as you build Python projects. The project chapters have a consistent structure: Overview: What does the application do? Using the program Design How it all fits together Modules involved Code and code explanation Module\/class 1 explanation Module\/class 2 explanation Minor code file explanation Testing, including suggested tests Modifying the project, including some suggested adaptations Summary Each project is designed with classes that can be reused and accessed for multiple purposes. This is one of the main benefits of object-oriented programming, so designing for reusability is a main focus of the book. The book contains the following chapters: 1. Python Basics This chapter is a basic primer on the Python language, and it functions as either a quick tutorial for experienced programmers new to Python or a refresher for programmers with Python experience. Part I: The Projects 2. Directory\/File Snapshot Program This project demonstrates how to interact with files, create and manipulate data structures, and provide user output. It also touches on code design issues to improve code maintainability. Often when installing or uninstalling software, or verifying changes to a file system, it can be valuable to take a “snapshot” of the files and directories, along with their size and last-modified time. The script introduced in this chapter does just that. This chapter also explores how to capture a directory listing into a Python list, and explains how to query this list for particular values. 3. DVD Inventory System This project takes advantage of Python’s capability to access and manipulate data in a SQL database. The application enables multiple users to log in to a website that provides access to a DVD inventory database. Permissions are set such that some users can add, modify, or delete entries, whereas other users have read-only access to the data. 4. Web Performance Tester This project shows how to communicate with a Python web server and retrieve information regarding how long it takes to receive requested items from the web server. Although writing Python programs to work on a single computer can be useful, the real power of Python can be seen when it is used to script communication between computers on a network. Most networks contain several web servers. A nice feature of Python is that it can act as a lightweight server for various Internet protocols, such as HTTP (web) and ftp. This application enables you to monitor performance of HTTP traffic on your network. 5. Customer Follow-Up System This project shows how to present a web form to the user and retrieve data from it, how to automatically format and send e-mail through an SMTP server, and how to generate an HTML-formatted report. The task for the second example is to automatically generate a customer comments e-mail message based on information the customer enters in a form. It uses the  mod_python  Apache module to take the information entered in the HTTP form and then utilizes a Python script on the web server to send that information to an SMTP server for mail delivery. 6. Test Management\/Reporting System This project makes use of the  unittest  module to run tests against an existing application, and creates a framework for reporting test results. Testing is a vital process for developing software. This application enables users to run tests for a given piece of software, to list the previous test runs by date, to show test run results for any previously run tests, and to output the results of any test run as HTML for viewing in a web browser. 7. Version Management System This project connects to a list of servers via telnet, checks the application version of a pre-set application list, and displays its results both as output and to a log file. Often, a system administrator needs to patch systems or ensure that systems have the latest application versions installed. This script is an easy way to accomplish that task. It makes use of Python’s capability to emulate a telnet client and log in to remote systems and perform functions on that remote system. 8. Content Management System This project explores Plone, a popular content management system based on Python and Zope (a Python-based application server). Because Python is a very mature language, numerous applications have been built on top of it. A great thing about working with Python-based applications is that you get the benefit of a full-blown application but you can still use Python to configure and customize it. Part II: Advanced Topics 9. Interacting with the Operating System When writing scripts “in the real world,” often it is critical to be able to access services available through (and particular to) the operating system you happen to be on. For example, suppose you wanted to read or modify the Window Registry? Or you wanted to get the Linux process ID of a particular process that is running? Is such a thing even possible? Definitely—and this chapter shows you how. 10. Debugging and Testing Because I am a software tester myself, testing is a subject that is certainly close to my heart. In this chapter, I discuss why testing is important, how to put the right amount of testing into your code, and how writing automated tests can help you to actually write code more quickly. You’ll look at PyUnit, the automated testing framework for Python, and learn how to use it to test the riskiest parts of a script. You’ll also explore the Python de...|,Wrox,USD 39.99
深入浅出Python（影印版）,Paul Barry,你是否想过通过一本书来学习Python？《深入浅出Python))通过一种独特的超越语法手册的方式来帮助你学习Python。你将能够快速掌握Python的基础知识，然后扩展到持久化、异常处理、Web开发、SQLite、数据处理和Google应用引擎中去。你也将学会如何为Android编写移动应用，这要感谢Pvthon带给你的强大能力。《深入浅出Python》融合了完备的学习经验，它将帮助你成为真正的Python编程员。,东南大学出版社,88.00元
python黑帽子,[美]Justin Seitz,本书是畅销书《Python 灰帽子—黑客与逆向工程师的 Python 编程之道》的姊妹篇，那本书一面市便占据计算机安全类书籍的头把交椅。本书由 Immunity 公司的高级安全研究员 Justin Seitz 精心撰写。作者根据自己在安全界，特别是渗透测试领域的几十年经验，向读者介绍了 Python 如何被用在黑客和渗透测试的各个领域，从基本的网络扫描到数据包捕获，从 Web 爬虫到编写 Burp 扩展工具，从编写木马到权限提升等。 作者在本书中的很多实例都非常具有创新和启发意义， 如 HTTP 数据中的图片检测、 基于 GitHub命令进行控制的模块化木马、浏览器的中间人攻击技术、利用 COM 组件自动化技术窃取数据、通过进程监视和代码插入实现权限提升、通过向虚拟机内存快照中插入 shellcode 实现木马驻留和权限提升等。通过对这些技术的学习，读者不仅能掌握各种 Python 库的应用和编程技术，还能拓宽视野，培养和锻炼自己的黑客思维。读者在阅读本书时也完全感觉不到其他一些技术书籍常见的枯燥和乏味,电子工业出版社,55
Python,Eprogramy,,CreateSpace Independent Publishing Platform,USD 9.99
Python编程实战,[美] Mark Summerfield,|《python编程实战：运用设计模式、并发和程序库创建高质量程序》由python开发者社区知名技术专家mark summerfield亲笔撰写，全球资深python专家doug hellmann作序鼎力推荐，是python领域最有影响力的著作之一。书中通过大量实用的范例代码和三个完整的案例研究，全面而系统地讲解了如何运用设计模式来规划代码结构，如何通过并发与cython等技术提升代码执行速度，以及如何利用各种python程序库来快速开发具体的应用程序和游戏。
《python编程实战：运用设计模式、并发和程序库创建高质量程序》共8章：第1～3章分别介绍了python的几种设计模式(创建型设计模式、结构型设计模式和行为型设计模式)；第4章和第5章详细讲解了python的高级并发技术以及cython的用法；第6章具体介绍了python的高级网络编程；第7章阐释了如何用tkinter开发图形用户界面；第8章讲解了如何用opengl绘制3d图形。|,机械工业出版社,69.00元
Python基础教程（第2版•修订版）,赫特兰,|本书包括Python 程序设计的方方面面，首先从Python 的安装开始，随后介绍了Python 的基础知识和基本概念，包括列表、元组、字符串、字典以及各种语句。然后循序渐进地介绍了一些相对高级的主题，包括抽象、异常、魔法方法、属性、迭代器。此后探讨了如何将Python 与数据库、网络、C 语言等工具结合使用，从而发挥出Python 的强大功能，同时介绍了Python 程序测试、打包、发布等知识。最后，作者结合前面讲述的内容，按照实际项目开发的步骤向读者介绍了几个具有实际意义的Python 项目的开发过程。
本书内容涉及的范围较广，既能为初学者夯实基础，又能帮助程序员提升技能，适合各个层次的Python开发人员阅读参考。|,人民邮电出版社,CNY 79.00
Learning Python,Mark Lutz,|Amazon.com Review
The authors of Learning Python show you enough essentials of the Python scripting language to enable you to begin solving problems right away, then reveal more powerful aspects of the language one at a time. This approach is sure to appeal to programmers and system administrators who have urgent problems and a preference for learning by semi-guided experimentation.
First off, Learning Python shows the relationships among Python scripts and their interpreter (in a mostly platform-neutral way). Then, the authors address the mechanics of the language itself, providing illustrations of how Python conceives of numbers, strings, and other objects as well as the operators you use to work with them. Dictionaries, lists, tuples, and other data structures specific to Python receive plenty of attention including complete examples.
Authors Mark Lutz and David Ascher build on that fundamental information in their discussions of functions and modules, which evolve into coverage of namespaces, classes, and the object-oriented aspects of Python programming. There's also information on creating graphical user interfaces (GUIs) for Python applications with Tkinter.
In addition to its careful expository prose, Learning Python includes exercises that both test your Python skills and help reveal more elusive truths about the language. --This text refers to an out of print or unavailable edition of this title.
Review
As a book for programmers who want to learn Python, it does a very good job. The coverage is informative and well order; making it easy to find what you're looking for. Overall, if you do some work with Python, you will benefit from owning this book. " - Sam Smith, news@UK, March "This book is a good example of Python culture, in the clarity of its text as much as in the quality of its code. Anyhone working their way through it will have a solid foundation upon which to explore Python's potential. Highly recommended." - Ivan Uemilianin, CVu, October 2004 --This text refers to the Paperback edition.|,O'Reilly Media,USD 54.99
Think Python,Allen B. Downey,|Think Python is an introduction to Python programming for students with no programming experience. It starts with the most basic concepts of programming, and is carefully designed to define all terms when they are first used and to develop each new concept in a logical progression. Larger pieces, like recursion and object-oriented programming are divided into a sequence of smaller steps and introduced over the course of several chapters.|,O'Reilly Media,GBP 29.99
|Learn Python The Hard Way, 1st Edition|,Zed Shaw,|Learn Python The Hard Way is a book I wrote to teach programming to people who do not know how to code. It assumes you are probably a power user of your computer, and then takes you from nothing to programming simple games. After reading my book you should be ready for many of the other programming books out there.|,Lulu.com,$29.99
Selenium 2自动化测试实战,虫师,|《Selenium 2自动化测试实战——基于Python语言》共分 14 章。第 1 章是自动化测试相关基础知识的介绍；第 2 章到第 10 章是《Selenium 2自动化测试实战——基于Python语言》的重点，循 序渐进地介绍了自动化测试所用到的技术；第 11 章通过一个具体的项目综合运用了前面章节所介绍 的技术与技巧；第 12 章到第 14 章选取了当前最热门的技术进行了介绍，旨在扩展测试人员的综合技 术能力。 《Selenium 2自动化测试实战——基于Python语言》的写作目的并不是为了简单地告诉读者如何使用一个自动化测试工具，而是希望读者在学习
《Selenium 2自动化测试实战——基于Python语言》的内容后能够提高综合的技术高度与宽度，从而摆脱简单的手工测试，向高级测试工程师的道路 迈进。|,电子工业出版社,CNY 59.00
NumPy攻略,[印尼] Ivan Idris,|本书带领读者了解熟悉当下最流行的科学计算库NumPy的方方面面。书中不仅介绍了NumPy的安装、使用和各种相关概念，还介绍了如何利用这一最新的开源软件库，以尽可能接近传统数学语言的方式，编写可读性好、实现效率高和运行速度快的代码。最后还探究了几个和NumPy相关的科学计算项目。此外，本书将为你掌握NumPy数组和通用函数打下坚实的基础，也会通过实例教你用Matplotlib绘图，并了解和SciPy相关的项目。
本书将帮助你：
• 学习高级索引技术和线性代数知识
• 了解数组形状及图像大小的调整
• 探察广播机制和直方图
• 分析NumPy代码并用可视化的方式表示分析结果
• 用Cython为代码提速
• 使用数组接口共享数据
• 使用通用函数和互操作功能
• 学习Matplotlib以及经常和NumPy同时使用的SciPy|,人民邮电出版社,49.00
Python编程（第三版·英文影印版）,Mark Lutz,|《Python编程 第三版》已经成为Python用户的行业标准，且更加完善。第三版进行的更新反映了当前的最佳实践以及在语言的最新版本Python 2.5中引入的大量改变。
无论是新手还是老手，你都会发现这本经过彻底更新的书确实名副其实，它教给你编写代码的正确途径。它以清晰而简练的方式解释了Python语言的语法以及编程技巧，并辅以大量例子阐明正确的使用方法和通用特性。通过阅读这本全面的指南，你将学习到如何将Python运用到实际问题中，例如：
·用户图形界面编程
·并行处理
·网络应用程序
·Internet脚本编程
·数据库管理
从深入讨论核心概念开始，再到完整的程序，《Python编程 第三版》逐一覆盖这些领域。书中确有大型的程序示例，但只在你已经掌握了足够的知识，能够理解技术和代码后才会出现。
在学习过程中，你也会学到如何在实际规模的程序中使用Python——诸如面向对象编程和代码重用概念皆是贯穿全书的副题。如果你对Python 程序设计感兴趣，就需要这本O'Reilly经典书籍长伴你的左右。实践中的建议、代码的片断和程序设计模式，这些财富都可以在日常生活中得到应用——使你的生活更轻松更高效。|,东南大学出版社,138.00元
Python Tutorial,|Guido Van Rossum,Fred L. Drake, Jr (editor)|,最权威的 Python 教程，由 Python 作者 Guido van Rossum 主笔，有少许学院味道。中文电子版由刘鑫、李梦夷翻译。英文原稿网址：http:\/\/docs.python.org\/tut\/简体中文版网址：http:\/\/wiki.woodpecker.org.cn\/moin\/March_Liu\/PyTutorial,Iuniverse Inc,USD 12.95
Python UNIX和Linux系统管理指南,|基弗特 (Gift, Noab),琼斯 (Jones, Jeremy M.)|,|《Python UNIX和Linux系统管理指南》介绍了Python语言如何为管理uNIx和Linux服务器提供各种更加有效的任务处理方式。书中各章都提出了具体的管理问题，如并发或数据备份，然后通过Python示例提供了解决方案。通过《Python UNIX和Linux系统管理指南》，读者可以学习如何用Python开发自己的一套命令行工具来解决诸多问题。
作者建立了一个免费下载的Ubuntu虚拟机，其中包含《Python UNIX和Linux系统管理指南》的源代码和运行实例，也包括SNMP、IPython、SQLAlchemy及其他工具。通过《Python UNIX和Linux系统管理指南》，你可以发现Python在如下几个方面的作用：
读取文本文件并提取信息。
使用多线程和fork选项。
使用网络设备从一个进程获取另一个进程的信息。
创建可点击的、易于交互的GUl工具。
通过交互式SNMP编程实现监控大型主机集群。
掌握IPython shell，作为Bash、Korn或Z—Shell的替换或补充。
将云计算整合到基础设施中，编写Google App引擎的应用程序。
通过定制脚本解决独特数据备份的难题。
使用Djan90、SQLAlchemy和Storm ORM与数据库进行交互。
通过《Python UNIX和Linux系统管理指南》及其补充的虚拟机，你可以了解如何打包并部署Python应用程序和库，以及编写代码在类似的多个UNIXfH Linux平台上运行。|,机械工业出版社,65.00元
Foundations of Python Network Programming,|John Goerzen,Tim Bower,Brandon Rhodes|,|This second edition of Foundations of Python Network Programming targets Python 2.5 through Python 2.7, the most popular production versions of the language. Python has made great strides since Apress released the first edition of this book back in the days of Python 2.3. The advances required new chapters to be written from the ground up, and others to be extensively revised. You will learn fundamentals like IP, TCP, DNS and SSL by using working Python programs; you will also be able to familiarize yourself with infrastructure components like memcached and message queues. You can also delve into Network server designs, and compare threaded approaches with asynchronous event-based solutions. But the biggest change is this edition's expanded treatment of the web. The HTTP protocol is covered in extensive detail, with each feature accompanied by sample Python code. You can use your HTTP protocol expertise by studying an entire chapter on screen scraping and you can then test lxml and BeautifulSoup against a real-world web site. The chapter on web application programming now covers both the WSGI standard for component interoperability, as well as modern web frameworks like Django. Finally, all of the old favorites from the first edition are back: E-mail protocols like SMTP, POP, and IMAP get full treatment, as does XML-RPC. You can still learn how to code Python network programs using the Telnet and FTP protocols, but you are likely to appreciate the power of more modern alternatives like the paramiko SSH2 library. If you are a Python programmer who needs to learn the network, this is the book that you want by your side. What you'll learn * Understand low level networking * Handle sending and receiving email including composing and decoding emails, SMTP, POP and IMAP * Program the lower levels of web application programming such as FastCGI and WSGI and HTTP itself * Learn how to use memcached and message qeues using Python * Access web services using Python * Master multitasking with threads, forking, and asynchronous communication Who this book is for This book will be of interest to python programmers who need to program networked applications using Python. From web application developers, to systems integrators, to system administrators--this book has everything you need to know. Table of Contents * Introduction to Client\/Server Networking * UDP * TCP * Socket Names and DNS * Network Data and Network Errors * TLS and SSL * Server Architecture * Caches, Message Queues, and Map-Reduce * HTTP * Screen Scraping * Web Applications * E-mail Composition and Decoding * SMTP * POP * IMAP * Telnet and SSH * FTP * RPC|,Apress,USD 54.99
How to Think Like a Computer Scientist: Learning with Python,|Allen B. Downey,Jeffrey Elkner,Chris Meyers|,|""How to Think Like a Computer Scientist"" is an introduction to programming using Python, one of the best languages for beginners. This is a Free Book -- you can download it from thinkpython.com. But if you would like to make a contribution to this project, you can do it by buying a hardcopy or paying to download the electronic version here. Thank you!|,Green Tea Press,USD 24.95
Python机器学习,[美] Michael Bowles,|在学习和研究机器学习的时候，面临令人眼花缭乱的算法，机器学习新手往往会不知
所措。本书从算法和Python 语言实现的角度，帮助读者认识机器学习。
书专注于两类核心的“算法族”，即惩罚线性回归和集成方法，并通过代码实例来
展示所讨论的算法的使用原则。全书共分为7 章，详细讨论了预测模型的两类核心算法、预测模型的构建、惩罚线性回归和集成方法的具体应用和实现。
本书主要针对想提高机器学习技能的Python 开发人员，帮助他们解决某一特定的项
目或是提升相关的技能。|,人民邮电出版社,69.00元
从Python开始学编程,Vamei,改编自Vamei博客的《Python快速教程》。本书以Python为样本，不仅介绍了编程的基本概念，还着重讲解编程语言的主流范式：面向过程、面向对象、面向函数。读者不仅可以轻松学会Python，以后再学习其他编程语言时也会更加容易。,电子工业出版社,CNY 49.00
Natural Language Processing with Python,|Steven Bird,Ewan Klein,Edward Loper|,|This book offers a highly accessible introduction to Natural Language Processing, the field that underpins a variety of language technologies, ranging from predictive text and email filtering to automatic summarization and translation. With Natural Language Processing with Python, you'll learn how to write Python programs to work with large collections of unstructured text. You'll access richly-annotated datasets using a comprehensive range of linguistic data structures. And you'll understand the main algorithms for analyzing the content and structure of written communication.
Packed with examples and exercises, Natural Language Processing with Python will help you:
* Extract information from unstructured text, to guess the topic or identify "named entities"
* Analyze linguistic structure in text, including parsing and semantic analysis
* Access popular linguistic databases, including WordNet and treebanks
* Integrate techniques drawn from fields as diverse as linguistics and artificial intelligence
Perfect for individual study, or as a classroom and workshop textbook, this book will help you gain practical skills in Natural Language Processing using the Python programming language and the Natural Language Toolkit (NLTK) open source library.
If you're interested in developing Web applications, analyzing multilingual news sources, documenting endangered languages, or if you are simply curious to have a programmer's perspective on how human language works, you will find Natural Language Processing with Python both fascinating and immensely useful.|,O'Reilly Media,USD 44.99
Python,James O. Knowlton,|Python: Create-Modify-Reuse is designed for all levels of Python developers interested in a practical, hands-on way of learning Python development. This book is designed to show you how to use Python (in combination with the raw processing power of your computer) to accomplish real-world tasks in a more efficient way. Don't look for an exhaustive description of the Python language––you won't find it. The book's main purpose is not to thoroughly cover the Python language, but rather to show how you can use Python to create robust, real-world applications. In this respect, the goal is similar to foreign-language books that identify themselves as “conversational,” focusing on the vocabulary and concepts that people will need the most. Likewise, I focus specifically on the Python knowledge needed to accomplish practical, specific tasks. Along the way, you will learn to create useful, efficient scripts that are easy to maintain and enhance. This book is for developers with some experience with Python who want to explore how to develop full-blown applications. It is also for developers with experience in other languages who want to learn Python by building robust applications. It is well-suited for developers who like to “learn by doing,” rather than exploring a language feature by feature. To get the most out of the book, you should understand basic programming principles. Because this book is project-based, you can approach it in numerous ways. You can, of course, read it from cover to cover. Chapters 2 through 8 each cover a different project, so the chapters are independent of each other. However, because each chapter project is covered individually, there may be some overlap of information. I also sometimes refer to explanations of particular topics covered in previous chapters. This will help to reinforce important concepts. The end of the book contains two appendixes. The first one is a listing of Python resources you can check out for more information. The second one will help you with installing additional components used in some of the examples. This book starts with a basic overview of the Python language, designed for those familiar with other languages but new to Python. It is followed by several chapters, each of which describes a complete project that can be used as-is or modified and extended to suit your particular purposes. You'll find applications that access databases, take advantage of web technologies, and facilitate network communications, to name a few. In addition, and more important than the technologies you will be introduced to, you will learn how to use Python to solve real challenges. Following these chapters are two chapters that cover accessing operating system resources and debugging and testing, respectively. Each project chapter contains complete instructions describing how to install and use the application, so you can actually see the program run as you learn how to construct and use it, including how the project was designed and prototyped. This book is intended to be both a reference guide and a learning aid, teaching you how to build solutions with Python and providing reference information on a wide variety of Python programming concepts. It is hoped that this book will help you have fun with Python and build useful applications, and—unlike my experience with building a deck—without sore thumbs. This book is framed around the code itself. This is because developers are typically looking for how to do something; and, as with many activities, you learn how to do something by watching how others do and trying it yourself. If you want to know how a  for  loop works, you'll find  for  loops in my code, but that's not the thrust of the book. Instead, this book shows you how to do things: how to build a content management system, how to build a test management system, how to set up a system for tracking customer follow-up, and so on. Along the way, you'll learn how to communicate with a SQL database, how to act as a web server or communicate with one, how to access operating system services, and more. There are three basic components to the book: Chapter 1 is a brief overview of the Python language. Chapters 2–8 cover seven different programming projects, which illustrate various technologies and techniques available to Python developers. Chapters 9–10 cover additional, advanced topics, which will help you as you build Python projects. The project chapters have a consistent structure: Overview: What does the application do? Using the program Design How it all fits together Modules involved Code and code explanation Module\/class 1 explanation Module\/class 2 explanation Minor code file explanation Testing, including suggested tests Modifying the project, including some suggested adaptations Summary Each project is designed with classes that can be reused and accessed for multiple purposes. This is one of the main benefits of object-oriented programming, so designing for reusability is a main focus of the book. The book contains the following chapters: 1. Python Basics This chapter is a basic primer on the Python language, and it functions as either a quick tutorial for experienced programmers new to Python or a refresher for programmers with Python experience. Part I: The Projects 2. Directory\/File Snapshot Program This project demonstrates how to interact with files, create and manipulate data structures, and provide user output. It also touches on code design issues to improve code maintainability. Often when installing or uninstalling software, or verifying changes to a file system, it can be valuable to take a “snapshot” of the files and directories, along with their size and last-modified time. The script introduced in this chapter does just that. This chapter also explores how to capture a directory listing into a Python list, and explains how to query this list for particular values. 3. DVD Inventory System This project takes advantage of Python’s capability to access and manipulate data in a SQL database. The application enables multiple users to log in to a website that provides access to a DVD inventory database. Permissions are set such that some users can add, modify, or delete entries, whereas other users have read-only access to the data. 4. Web Performance Tester This project shows how to communicate with a Python web server and retrieve information regarding how long it takes to receive requested items from the web server. Although writing Python programs to work on a single computer can be useful, the real power of Python can be seen when it is used to script communication between computers on a network. Most networks contain several web servers. A nice feature of Python is that it can act as a lightweight server for various Internet protocols, such as HTTP (web) and ftp. This application enables you to monitor performance of HTTP traffic on your network. 5. Customer Follow-Up System This project shows how to present a web form to the user and retrieve data from it, how to automatically format and send e-mail through an SMTP server, and how to generate an HTML-formatted report. The task for the second example is to automatically generate a customer comments e-mail message based on information the customer enters in a form. It uses the  mod_python  Apache module to take the information entered in the HTTP form and then utilizes a Python script on the web server to send that information to an SMTP server for mail delivery. 6. Test Management\/Reporting System This project makes use of the  unittest  module to run tests against an existing application, and creates a framework for reporting test results. Testing is a vital process for developing software. This application enables users to run tests for a given piece of software, to list the previous test runs by date, to show test run results for any previously run tests, and to output the results of any test run as HTML for viewing in a web browser. 7. Version Management System This project connects to a list of servers via telnet, checks the application version of a pre-set application list, and displays its results both as output and to a log file. Often, a system administrator needs to patch systems or ensure that systems have the latest application versions installed. This script is an easy way to accomplish that task. It makes use of Python’s capability to emulate a telnet client and log in to remote systems and perform functions on that remote system. 8. Content Management System This project explores Plone, a popular content management system based on Python and Zope (a Python-based application server). Because Python is a very mature language, numerous applications have been built on top of it. A great thing about working with Python-based applications is that you get the benefit of a full-blown application but you can still use Python to configure and customize it. Part II: Advanced Topics 9. Interacting with the Operating System When writing scripts “in the real world,” often it is critical to be able to access services available through (and particular to) the operating system you happen to be on. For example, suppose you wanted to read or modify the Window Registry? Or you wanted to get the Linux process ID of a particular process that is running? Is such a thing even possible? Definitely—and this chapter shows you how. 10. Debugging and Testing Because I am a software tester myself, testing is a subject that is certainly close to my heart. In this chapter, I discuss why testing is important, how to put the right amount of testing into your code, and how writing automated tests can help you to actually write code more quickly. You’ll look at PyUnit, the automated testing framework for Python, and learn how to use it to test the riskiest parts of a script. You’ll also explore the Python de...|,Wrox,USD 39.99
深入浅出Python（影印版）,Paul Barry,你是否想过通过一本书来学习Python？《深入浅出Python))通过一种独特的超越语法手册的方式来帮助你学习Python。你将能够快速掌握Python的基础知识，然后扩展到持久化、异常处理、Web开发、SQLite、数据处理和Google应用引擎中去。你也将学会如何为Android编写移动应用，这要感谢Pvthon带给你的强大能力。《深入浅出Python》融合了完备的学习经验，它将帮助你成为真正的Python编程员。,东南大学出版社,88.00元
python黑帽子,[美]Justin Seitz,本书是畅销书《Python 灰帽子—黑客与逆向工程师的 Python 编程之道》的姊妹篇，那本书一面市便占据计算机安全类书籍的头把交椅。本书由 Immunity 公司的高级安全研究员 Justin Seitz 精心撰写。作者根据自己在安全界，特别是渗透测试领域的几十年经验，向读者介绍了 Python 如何被用在黑客和渗透测试的各个领域，从基本的网络扫描到数据包捕获，从 Web 爬虫到编写 Burp 扩展工具，从编写木马到权限提升等。 作者在本书中的很多实例都非常具有创新和启发意义， 如 HTTP 数据中的图片检测、 基于 GitHub命令进行控制的模块化木马、浏览器的中间人攻击技术、利用 COM 组件自动化技术窃取数据、通过进程监视和代码插入实现权限提升、通过向虚拟机内存快照中插入 shellcode 实现木马驻留和权限提升等。通过对这些技术的学习，读者不仅能掌握各种 Python 库的应用和编程技术，还能拓宽视野，培养和锻炼自己的黑客思维。读者在阅读本书时也完全感觉不到其他一些技术书籍常见的枯燥和乏味,电子工业出版社,55
Python,Eprogramy,,CreateSpace Independent Publishing Platform,USD 9.99
Python编程实战,[美] Mark Summerfield,|《python编程实战：运用设计模式、并发和程序库创建高质量程序》由python开发者社区知名技术专家mark summerfield亲笔撰写，全球资深python专家doug hellmann作序鼎力推荐，是python领域最有影响力的著作之一。书中通过大量实用的范例代码和三个完整的案例研究，全面而系统地讲解了如何运用设计模式来规划代码结构，如何通过并发与cython等技术提升代码执行速度，以及如何利用各种python程序库来快速开发具体的应用程序和游戏。
《python编程实战：运用设计模式、并发和程序库创建高质量程序》共8章：第1～3章分别介绍了python的几种设计模式(创建型设计模式、结构型设计模式和行为型设计模式)；第4章和第5章详细讲解了python的高级并发技术以及cython的用法；第6章具体介绍了python的高级网络编程；第7章阐释了如何用tkinter开发图形用户界面；第8章讲解了如何用opengl绘制3d图形。|,机械工业出版社,69.00元
Python基础教程（第2版•修订版）,赫特兰,|本书包括Python 程序设计的方方面面，首先从Python 的安装开始，随后介绍了Python 的基础知识和基本概念，包括列表、元组、字符串、字典以及各种语句。然后循序渐进地介绍了一些相对高级的主题，包括抽象、异常、魔法方法、属性、迭代器。此后探讨了如何将Python 与数据库、网络、C 语言等工具结合使用，从而发挥出Python 的强大功能，同时介绍了Python 程序测试、打包、发布等知识。最后，作者结合前面讲述的内容，按照实际项目开发的步骤向读者介绍了几个具有实际意义的Python 项目的开发过程。
本书内容涉及的范围较广，既能为初学者夯实基础，又能帮助程序员提升技能，适合各个层次的Python开发人员阅读参考。|,人民邮电出版社,CNY 79.00
Python编程实践,|Jennifer Campbell,Paul Gries,Jason Montojo,Greg Wilson|,|Python是当今世界流行的编程语言之一。本书共15章，通过一些短小精悍的交互式Python脚本帮助学生进行练习，并在这个过程中掌握诸如数据结构、排序和搜索算法、面向对象编程、数据库访问、图形用户界面等基本概念以及良好的程序设计风格。本书既是一本注重科学的计算机科学专业教材，也是一本目标明确的Python参考书。
本书语言风格言简意赅，图表丰富，简单实用，是一本优秀的Python入门级读物，适合Python初学者使用。|,机械工业出版社华章公司,49.00元
Think Python,Allen B. Downey,|Think Python is an introduction to Python programming for students with no programming experience. It starts with the most basic concepts of programming, and is carefully designed to define all terms when they are first used and to develop each new concept in a logical progression. Larger pieces, like recursion and object-oriented programming are divided into a sequence of smaller steps and introduced over the course of several chapters.|,O'Reilly Media,GBP 29.99
|Learn Python The Hard Way, 1st Edition|,Zed Shaw,|Learn Python The Hard Way is a book I wrote to teach programming to people who do not know how to code. It assumes you are probably a power user of your computer, and then takes you from nothing to programming simple games. After reading my book you should be ready for many of the other programming books out there.|,Lulu.com,$29.99
Selenium 2自动化测试实战,虫师,|《Selenium 2自动化测试实战——基于Python语言》共分 14 章。第 1 章是自动化测试相关基础知识的介绍；第 2 章到第 10 章是《Selenium 2自动化测试实战——基于Python语言》的重点，循 序渐进地介绍了自动化测试所用到的技术；第 11 章通过一个具体的项目综合运用了前面章节所介绍 的技术与技巧；第 12 章到第 14 章选取了当前最热门的技术进行了介绍，旨在扩展测试人员的综合技 术能力。 《Selenium 2自动化测试实战——基于Python语言》的写作目的并不是为了简单地告诉读者如何使用一个自动化测试工具，而是希望读者在学习
《Selenium 2自动化测试实战——基于Python语言》的内容后能够提高综合的技术高度与宽度，从而摆脱简单的手工测试，向高级测试工程师的道路 迈进。|,电子工业出版社,CNY 59.00
NumPy攻略,[印尼] Ivan Idris,|本书带领读者了解熟悉当下最流行的科学计算库NumPy的方方面面。书中不仅介绍了NumPy的安装、使用和各种相关概念，还介绍了如何利用这一最新的开源软件库，以尽可能接近传统数学语言的方式，编写可读性好、实现效率高和运行速度快的代码。最后还探究了几个和NumPy相关的科学计算项目。此外，本书将为你掌握NumPy数组和通用函数打下坚实的基础，也会通过实例教你用Matplotlib绘图，并了解和SciPy相关的项目。
本书将帮助你：
• 学习高级索引技术和线性代数知识
• 了解数组形状及图像大小的调整
• 探察广播机制和直方图
• 分析NumPy代码并用可视化的方式表示分析结果
• 用Cython为代码提速
• 使用数组接口共享数据
• 使用通用函数和互操作功能
• 学习Matplotlib以及经常和NumPy同时使用的SciPy|,人民邮电出版社,49.00
Python编程（第三版·英文影印版）,Mark Lutz,|《Python编程 第三版》已经成为Python用户的行业标准，且更加完善。第三版进行的更新反映了当前的最佳实践以及在语言的最新版本Python 2.5中引入的大量改变。
无论是新手还是老手，你都会发现这本经过彻底更新的书确实名副其实，它教给你编写代码的正确途径。它以清晰而简练的方式解释了Python语言的语法以及编程技巧，并辅以大量例子阐明正确的使用方法和通用特性。通过阅读这本全面的指南，你将学习到如何将Python运用到实际问题中，例如：
·用户图形界面编程
·并行处理
·网络应用程序
·Internet脚本编程
·数据库管理
从深入讨论核心概念开始，再到完整的程序，《Python编程 第三版》逐一覆盖这些领域。书中确有大型的程序示例，但只在你已经掌握了足够的知识，能够理解技术和代码后才会出现。
在学习过程中，你也会学到如何在实际规模的程序中使用Python——诸如面向对象编程和代码重用概念皆是贯穿全书的副题。如果你对Python 程序设计感兴趣，就需要这本O'Reilly经典书籍长伴你的左右。实践中的建议、代码的片断和程序设计模式，这些财富都可以在日常生活中得到应用——使你的生活更轻松更高效。|,东南大学出版社,138.00元
Python Tutorial,|Guido Van Rossum,Fred L. Drake, Jr (editor)|,最权威的 Python 教程，由 Python 作者 Guido van Rossum 主笔，有少许学院味道。中文电子版由刘鑫、李梦夷翻译。英文原稿网址：http:\/\/docs.python.org\/tut\/简体中文版网址：http:\/\/wiki.woodpecker.org.cn\/moin\/March_Liu\/PyTutorial,Iuniverse Inc,USD 12.95
Python UNIX和Linux系统管理指南,|基弗特 (Gift, Noab),琼斯 (Jones, Jeremy M.)|,|《Python UNIX和Linux系统管理指南》介绍了Python语言如何为管理uNIx和Linux服务器提供各种更加有效的任务处理方式。书中各章都提出了具体的管理问题，如并发或数据备份，然后通过Python示例提供了解决方案。通过《Python UNIX和Linux系统管理指南》，读者可以学习如何用Python开发自己的一套命令行工具来解决诸多问题。
作者建立了一个免费下载的Ubuntu虚拟机，其中包含《Python UNIX和Linux系统管理指南》的源代码和运行实例，也包括SNMP、IPython、SQLAlchemy及其他工具。通过《Python UNIX和Linux系统管理指南》，你可以发现Python在如下几个方面的作用：
读取文本文件并提取信息。
使用多线程和fork选项。
使用网络设备从一个进程获取另一个进程的信息。
创建可点击的、易于交互的GUl工具。
通过交互式SNMP编程实现监控大型主机集群。
掌握IPython shell，作为Bash、Korn或Z—Shell的替换或补充。
将云计算整合到基础设施中，编写Google App引擎的应用程序。
通过定制脚本解决独特数据备份的难题。
使用Djan90、SQLAlchemy和Storm ORM与数据库进行交互。
通过《Python UNIX和Linux系统管理指南》及其补充的虚拟机，你可以了解如何打包并部署Python应用程序和库，以及编写代码在类似的多个UNIXfH Linux平台上运行。|,机械工业出版社,65.00元
Foundations of Python Network Programming,|John Goerzen,Tim Bower,Brandon Rhodes|,|This second edition of Foundations of Python Network Programming targets Python 2.5 through Python 2.7, the most popular production versions of the language. Python has made great strides since Apress released the first edition of this book back in the days of Python 2.3. The advances required new chapters to be written from the ground up, and others to be extensively revised. You will learn fundamentals like IP, TCP, DNS and SSL by using working Python programs; you will also be able to familiarize yourself with infrastructure components like memcached and message queues. You can also delve into Network server designs, and compare threaded approaches with asynchronous event-based solutions. But the biggest change is this edition's expanded treatment of the web. The HTTP protocol is covered in extensive detail, with each feature accompanied by sample Python code. You can use your HTTP protocol expertise by studying an entire chapter on screen scraping and you can then test lxml and BeautifulSoup against a real-world web site. The chapter on web application programming now covers both the WSGI standard for component interoperability, as well as modern web frameworks like Django. Finally, all of the old favorites from the first edition are back: E-mail protocols like SMTP, POP, and IMAP get full treatment, as does XML-RPC. You can still learn how to code Python network programs using the Telnet and FTP protocols, but you are likely to appreciate the power of more modern alternatives like the paramiko SSH2 library. If you are a Python programmer who needs to learn the network, this is the book that you want by your side. What you'll learn * Understand low level networking * Handle sending and receiving email including composing and decoding emails, SMTP, POP and IMAP * Program the lower levels of web application programming such as FastCGI and WSGI and HTTP itself * Learn how to use memcached and message qeues using Python * Access web services using Python * Master multitasking with threads, forking, and asynchronous communication Who this book is for This book will be of interest to python programmers who need to program networked applications using Python. From web application developers, to systems integrators, to system administrators--this book has everything you need to know. Table of Contents * Introduction to Client\/Server Networking * UDP * TCP * Socket Names and DNS * Network Data and Network Errors * TLS and SSL * Server Architecture * Caches, Message Queues, and Map-Reduce * HTTP * Screen Scraping * Web Applications * E-mail Composition and Decoding * SMTP * POP * IMAP * Telnet and SSH * FTP * RPC|,Apress,USD 54.99
How to Think Like a Computer Scientist: Learning with Python,|Allen B. Downey,Jeffrey Elkner,Chris Meyers|,|""How to Think Like a Computer Scientist"" is an introduction to programming using Python, one of the best languages for beginners. This is a Free Book -- you can download it from thinkpython.com. But if you would like to make a contribution to this project, you can do it by buying a hardcopy or paying to download the electronic version here. Thank you!|,Green Tea Press,USD 24.95
Python机器学习,[美] Michael Bowles,|在学习和研究机器学习的时候，面临令人眼花缭乱的算法，机器学习新手往往会不知
所措。本书从算法和Python 语言实现的角度，帮助读者认识机器学习。
书专注于两类核心的“算法族”，即惩罚线性回归和集成方法，并通过代码实例来
展示所讨论的算法的使用原则。全书共分为7 章，详细讨论了预测模型的两类核心算法、预测模型的构建、惩罚线性回归和集成方法的具体应用和实现。
本书主要针对想提高机器学习技能的Python 开发人员，帮助他们解决某一特定的项
目或是提升相关的技能。|,人民邮电出版社,69.00元
从Python开始学编程,Vamei,改编自Vamei博客的《Python快速教程》。本书以Python为样本，不仅介绍了编程的基本概念，还着重讲解编程语言的主流范式：面向过程、面向对象、面向函数。读者不仅可以轻松学会Python，以后再学习其他编程语言时也会更加容易。,电子工业出版社,CNY 49.00
Natural Language Processing with Python,|Steven Bird,Ewan Klein,Edward Loper|,|This book offers a highly accessible introduction to Natural Language Processing, the field that underpins a variety of language technologies, ranging from predictive text and email filtering to automatic summarization and translation. With Natural Language Processing with Python, you'll learn how to write Python programs to work with large collections of unstructured text. You'll access richly-annotated datasets using a comprehensive range of linguistic data structures. And you'll understand the main algorithms for analyzing the content and structure of written communication.
Packed with examples and exercises, Natural Language Processing with Python will help you:
* Extract information from unstructured text, to guess the topic or identify "named entities"
* Analyze linguistic structure in text, including parsing and semantic analysis
* Access popular linguistic databases, including WordNet and treebanks
* Integrate techniques drawn from fields as diverse as linguistics and artificial intelligence
Perfect for individual study, or as a classroom and workshop textbook, this book will help you gain practical skills in Natural Language Processing using the Python programming language and the Natural Language Toolkit (NLTK) open source library.
If you're interested in developing Web applications, analyzing multilingual news sources, documenting endangered languages, or if you are simply curious to have a programmer's perspective on how human language works, you will find Natural Language Processing with Python both fascinating and immensely useful.|,O'Reilly Media,USD 44.99
Python,James O. Knowlton,|Python: Create-Modify-Reuse is designed for all levels of Python developers interested in a practical, hands-on way of learning Python development. This book is designed to show you how to use Python (in combination with the raw processing power of your computer) to accomplish real-world tasks in a more efficient way. Don't look for an exhaustive description of the Python language––you won't find it. The book's main purpose is not to thoroughly cover the Python language, but rather to show how you can use Python to create robust, real-world applications. In this respect, the goal is similar to foreign-language books that identify themselves as “conversational,” focusing on the vocabulary and concepts that people will need the most. Likewise, I focus specifically on the Python knowledge needed to accomplish practical, specific tasks. Along the way, you will learn to create useful, efficient scripts that are easy to maintain and enhance. This book is for developers with some experience with Python who want to explore how to develop full-blown applications. It is also for developers with experience in other languages who want to learn Python by building robust applications. It is well-suited for developers who like to “learn by doing,” rather than exploring a language feature by feature. To get the most out of the book, you should understand basic programming principles. Because this book is project-based, you can approach it in numerous ways. You can, of course, read it from cover to cover. Chapters 2 through 8 each cover a different project, so the chapters are independent of each other. However, because each chapter project is covered individually, there may be some overlap of information. I also sometimes refer to explanations of particular topics covered in previous chapters. This will help to reinforce important concepts. The end of the book contains two appendixes. The first one is a listing of Python resources you can check out for more information. The second one will help you with installing additional components used in some of the examples. This book starts with a basic overview of the Python language, designed for those familiar with other languages but new to Python. It is followed by several chapters, each of which describes a complete project that can be used as-is or modified and extended to suit your particular purposes. You'll find applications that access databases, take advantage of web technologies, and facilitate network communications, to name a few. In addition, and more important than the technologies you will be introduced to, you will learn how to use Python to solve real challenges. Following these chapters are two chapters that cover accessing operating system resources and debugging and testing, respectively. Each project chapter contains complete instructions describing how to install and use the application, so you can actually see the program run as you learn how to construct and use it, including how the project was designed and prototyped. This book is intended to be both a reference guide and a learning aid, teaching you how to build solutions with Python and providing reference information on a wide variety of Python programming concepts. It is hoped that this book will help you have fun with Python and build useful applications, and—unlike my experience with building a deck—without sore thumbs. This book is framed around the code itself. This is because developers are typically looking for how to do something; and, as with many activities, you learn how to do something by watching how others do and trying it yourself. If you want to know how a  for  loop works, you'll find  for  loops in my code, but that's not the thrust of the book. Instead, this book shows you how to do things: how to build a content management system, how to build a test management system, how to set up a system for tracking customer follow-up, and so on. Along the way, you'll learn how to communicate with a SQL database, how to act as a web server or communicate with one, how to access operating system services, and more. There are three basic components to the book: Chapter 1 is a brief overview of the Python language. Chapters 2–8 cover seven different programming projects, which illustrate various technologies and techniques available to Python developers. Chapters 9–10 cover additional, advanced topics, which will help you as you build Python projects. The project chapters have a consistent structure: Overview: What does the application do? Using the program Design How it all fits together Modules involved Code and code explanation Module\/class 1 explanation Module\/class 2 explanation Minor code file explanation Testing, including suggested tests Modifying the project, including some suggested adaptations Summary Each project is designed with classes that can be reused and accessed for multiple purposes. This is one of the main benefits of object-oriented programming, so designing for reusability is a main focus of the book. The book contains the following chapters: 1. Python Basics This chapter is a basic primer on the Python language, and it functions as either a quick tutorial for experienced programmers new to Python or a refresher for programmers with Python experience. Part I: The Projects 2. Directory\/File Snapshot Program This project demonstrates how to interact with files, create and manipulate data structures, and provide user output. It also touches on code design issues to improve code maintainability. Often when installing or uninstalling software, or verifying changes to a file system, it can be valuable to take a “snapshot” of the files and directories, along with their size and last-modified time. The script introduced in this chapter does just that. This chapter also explores how to capture a directory listing into a Python list, and explains how to query this list for particular values. 3. DVD Inventory System This project takes advantage of Python’s capability to access and manipulate data in a SQL database. The application enables multiple users to log in to a website that provides access to a DVD inventory database. Permissions are set such that some users can add, modify, or delete entries, whereas other users have read-only access to the data. 4. Web Performance Tester This project shows how to communicate with a Python web server and retrieve information regarding how long it takes to receive requested items from the web server. Although writing Python programs to work on a single computer can be useful, the real power of Python can be seen when it is used to script communication between computers on a network. Most networks contain several web servers. A nice feature of Python is that it can act as a lightweight server for various Internet protocols, such as HTTP (web) and ftp. This application enables you to monitor performance of HTTP traffic on your network. 5. Customer Follow-Up System This project shows how to present a web form to the user and retrieve data from it, how to automatically format and send e-mail through an SMTP server, and how to generate an HTML-formatted report. The task for the second example is to automatically generate a customer comments e-mail message based on information the customer enters in a form. It uses the  mod_python  Apache module to take the information entered in the HTTP form and then utilizes a Python script on the web server to send that information to an SMTP server for mail delivery. 6. Test Management\/Reporting System This project makes use of the  unittest  module to run tests against an existing application, and creates a framework for reporting test results. Testing is a vital process for developing software. This application enables users to run tests for a given piece of software, to list the previous test runs by date, to show test run results for any previously run tests, and to output the results of any test run as HTML for viewing in a web browser. 7. Version Management System This project connects to a list of servers via telnet, checks the application version of a pre-set application list, and displays its results both as output and to a log file. Often, a system administrator needs to patch systems or ensure that systems have the latest application versions installed. This script is an easy way to accomplish that task. It makes use of Python’s capability to emulate a telnet client and log in to remote systems and perform functions on that remote system. 8. Content Management System This project explores Plone, a popular content management system based on Python and Zope (a Python-based application server). Because Python is a very mature language, numerous applications have been built on top of it. A great thing about working with Python-based applications is that you get the benefit of a full-blown application but you can still use Python to configure and customize it. Part II: Advanced Topics 9. Interacting with the Operating System When writing scripts “in the real world,” often it is critical to be able to access services available through (and particular to) the operating system you happen to be on. For example, suppose you wanted to read or modify the Window Registry? Or you wanted to get the Linux process ID of a particular process that is running? Is such a thing even possible? Definitely—and this chapter shows you how. 10. Debugging and Testing Because I am a software tester myself, testing is a subject that is certainly close to my heart. In this chapter, I discuss why testing is important, how to put the right amount of testing into your code, and how writing automated tests can help you to actually write code more quickly. You’ll look at PyUnit, the automated testing framework for Python, and learn how to use it to test the riskiest parts of a script. You’ll also explore the Python de...|,Wrox,USD 39.99
深入浅出Python（影印版）,Paul Barry,你是否想过通过一本书来学习Python？《深入浅出Python))通过一种独特的超越语法手册的方式来帮助你学习Python。你将能够快速掌握Python的基础知识，然后扩展到持久化、异常处理、Web开发、SQLite、数据处理和Google应用引擎中去。你也将学会如何为Android编写移动应用，这要感谢Pvthon带给你的强大能力。《深入浅出Python》融合了完备的学习经验，它将帮助你成为真正的Python编程员。,东南大学出版社,88.00元
python黑帽子,[美]Justin Seitz,本书是畅销书《Python 灰帽子—黑客与逆向工程师的 Python 编程之道》的姊妹篇，那本书一面市便占据计算机安全类书籍的头把交椅。本书由 Immunity 公司的高级安全研究员 Justin Seitz 精心撰写。作者根据自己在安全界，特别是渗透测试领域的几十年经验，向读者介绍了 Python 如何被用在黑客和渗透测试的各个领域，从基本的网络扫描到数据包捕获，从 Web 爬虫到编写 Burp 扩展工具，从编写木马到权限提升等。 作者在本书中的很多实例都非常具有创新和启发意义， 如 HTTP 数据中的图片检测、 基于 GitHub命令进行控制的模块化木马、浏览器的中间人攻击技术、利用 COM 组件自动化技术窃取数据、通过进程监视和代码插入实现权限提升、通过向虚拟机内存快照中插入 shellcode 实现木马驻留和权限提升等。通过对这些技术的学习，读者不仅能掌握各种 Python 库的应用和编程技术，还能拓宽视野，培养和锻炼自己的黑客思维。读者在阅读本书时也完全感觉不到其他一些技术书籍常见的枯燥和乏味,电子工业出版社,55
Python,Eprogramy,,CreateSpace Independent Publishing Platform,USD 9.99
Python编程实战,[美] Mark Summerfield,|《python编程实战：运用设计模式、并发和程序库创建高质量程序》由python开发者社区知名技术专家mark summerfield亲笔撰写，全球资深python专家doug hellmann作序鼎力推荐，是python领域最有影响力的著作之一。书中通过大量实用的范例代码和三个完整的案例研究，全面而系统地讲解了如何运用设计模式来规划代码结构，如何通过并发与cython等技术提升代码执行速度，以及如何利用各种python程序库来快速开发具体的应用程序和游戏。
《python编程实战：运用设计模式、并发和程序库创建高质量程序》共8章：第1～3章分别介绍了python的几种设计模式(创建型设计模式、结构型设计模式和行为型设计模式)；第4章和第5章详细讲解了python的高级并发技术以及cython的用法；第6章具体介绍了python的高级网络编程；第7章阐释了如何用tkinter开发图形用户界面；第8章讲解了如何用opengl绘制3d图形。|,机械工业出版社,69.00元
Python基础教程（第2版•修订版）,赫特兰,|本书包括Python 程序设计的方方面面，首先从Python 的安装开始，随后介绍了Python 的基础知识和基本概念，包括列表、元组、字符串、字典以及各种语句。然后循序渐进地介绍了一些相对高级的主题，包括抽象、异常、魔法方法、属性、迭代器。此后探讨了如何将Python 与数据库、网络、C 语言等工具结合使用，从而发挥出Python 的强大功能，同时介绍了Python 程序测试、打包、发布等知识。最后，作者结合前面讲述的内容，按照实际项目开发的步骤向读者介绍了几个具有实际意义的Python 项目的开发过程。
本书内容涉及的范围较广，既能为初学者夯实基础，又能帮助程序员提升技能，适合各个层次的Python开发人员阅读参考。|,人民邮电出版社,CNY 79.00
Python编程实践,|Jennifer Campbell,Paul Gries,Jason Montojo,Greg Wilson|,|Python是当今世界流行的编程语言之一。本书共15章，通过一些短小精悍的交互式Python脚本帮助学生进行练习，并在这个过程中掌握诸如数据结构、排序和搜索算法、面向对象编程、数据库访问、图形用户界面等基本概念以及良好的程序设计风格。本书既是一本注重科学的计算机科学专业教材，也是一本目标明确的Python参考书。
本书语言风格言简意赅，图表丰富，简单实用，是一本优秀的Python入门级读物，适合Python初学者使用。|,机械工业出版社华章公司,49.00元
Python Web开发实战,董伟明,|这本书涵盖了Web开发的方方面面，可以分为如下部分：
1. 使用最新的Flask 0.11进行Web开发，学习Jinja2、Flask-Script、Flask-Migrate、Flask-Security、Flask-Assets等8种常用扩展，帮助读者理解Flask 的 优秀设计（上下文、BluePrint等），最后利用Mako、Flask_mako、SQLAlchemy、Pillow等技术实现一个豆瓣一个真实的服务。
2. 阐述笔者对REST的理解，并提出一些设计API的注意事项，最后通过jQuery和fetch实现使用Ajax的例子，让读者了解如何让前后端通信。
3. 对Python应用服务器，Web服务器、缓存系统、键值对数据库等技术的选型和使用方法，最后演示大型网站架构及其重要组件的用意。
4. 使用Fabric、SaltStack、Ansible、Supervisor、Graphite等做系统管理，并演示一个通过最新的Sentry 8演示如何收集应用错误信息。
5. 测试和持续集成，最后使用最新的Buildbot 0.9实现一个Github项目的持续集成。
6. 深入RabbitMQ和Celery的原理和使用方法，最后分享笔者使用的进阶实践。
7. 服务化及豆瓣服务化实践。
8. 详细讲解豆瓣工程师都在用的DPark，包含安装、环境配置、使用和框架化分析uv&pv，接着将展示几个笔者实际工作中的数据报表需求，并讲解如何用Pandas做数据可视化。
9. 深入IPython和Jupyter Notebook这两个工具，并分享在豆瓣对应的实践。
10. 从获取Linux服务器的相关情况、性能测试、分析Python程序性能瓶颈三个方面展示对应的工具及使用方法。
11. 以抓取微信公众号文章为主线，分别使用多线程、多进程、Gevent、Future和asyncio这5种编程方式完成不同阶段的爬取任务，也深入地分析在它们之间如何选择。
12. Python进阶和Web项目经验。
封底推荐语
伟明把他个人多年 Web 开发的经验，以及豆瓣十年来数百名优秀工程师在 Web 开发上最佳实践的积累，凝聚在了《Python Web 开发实战》这本书里，多维度、全面地介绍了 Python Web 开发涉及的各种技术。我向所有有兴趣使用 Python 做 Web 开发的开发者们，强烈推荐此书。
——洪强宁，爱因互动CTO，前豆瓣首席架构师，前宜信大数据创新中心首席架构师
感谢伟明把豆瓣的一些工程实践进行了整理和总结，这是本书最宝贵的一点，库谁都会用，但在什么场景使用，在生产环境中这个库的表现到底如何，是这本书的一个精华，期望将来还可以看到越来越多这样的图书，祝此书大卖。
——清风，SAY CEO，前豆瓣技术总监。
伟明将自身在 Web 领域所有方面的经验提炼后整理成书，本质上是将几十个关联产品的官方文档，结合具体工程经验进行了梳理，给出了领域问题最佳方案的关键思考点和自己的答案，而更加可贵的是，给出了这些思考点的来源，以及形成过程，即给出了解决各种 Web 领域问题的思维模式。
——Zoom.Quiet（大妈），优视眼动科技 CTO，Python 中文社区创始人之一和管理员
阅读本书，我最大的感受就是：全和新。本书的内容涉及了Web框架、Ajax的前后端交互、测试、数据库、数据分析、服务化、部署、系统管理、常用工具等内容，有点百科全书的意味。另外，书中讲的许多东西都是现在正在流行的技术或工具，像Flask、Celery、Jupyter、Supervisor、SaltStack、Pandas等。
——李迎辉，Python开源资深行者，Python-CN邮件列表创建人，UliPad和Uliweb作者
本书由Python开发开始，循序渐进，把网站工程的全貌展现在读者的眼前，是了解Web工程从开发到上线完整流程的绝佳参考书籍。
——邢犇（CNBorn）, 前豆瓣东西技术负责人
很多刚进入Python世界的人，伟明的这本书提供了一个非常好的“知识地图”，书中涉及了Python Web开发的方方面面。
——胡阳（the5fire），手机搜狐网，任资深开发工程师
这本书从开发环境的搭建，Web 框架的使用，到最后的持续集成和 Python 的进阶用法，无一不是他多年的实际工程经验总结，十分宝贵。
——姚钢强（acmerfight），知乎工程师
这本书非常全面地介绍了使用 Python 进行 Web 开发的方方面面，既有 Web 框架、缓存、消息队列、并发处理的场景介绍和技术选型，又有开发流程、质量保证的丰富实战经验。
——蔡斌（VeryCB），DeepDevelop工程师，前豆瓣条目组技术负责人
整本书都是作者对实际Web项目中大量实战经验的总结，绝非纸上谈兵。相信通过阅读该书可以帮助开发者规避掉大量项目中的“坑”，构建出更高性能、更稳定的Web项目。
——Spawnris, 腾讯工程师|,电子工业出版社,105
|Learn Python The Hard Way, 1st Edition|,Zed Shaw,|Learn Python The Hard Way is a book I wrote to teach programming to people who do not know how to code. It assumes you are probably a power user of your computer, and then takes you from nothing to programming simple games. After reading my book you should be ready for many of the other programming books out there.|,Lulu.com,$29.99
Selenium 2自动化测试实战,虫师,|《Selenium 2自动化测试实战——基于Python语言》共分 14 章。第 1 章是自动化测试相关基础知识的介绍；第 2 章到第 10 章是《Selenium 2自动化测试实战——基于Python语言》的重点，循 序渐进地介绍了自动化测试所用到的技术；第 11 章通过一个具体的项目综合运用了前面章节所介绍 的技术与技巧；第 12 章到第 14 章选取了当前最热门的技术进行了介绍，旨在扩展测试人员的综合技 术能力。 《Selenium 2自动化测试实战——基于Python语言》的写作目的并不是为了简单地告诉读者如何使用一个自动化测试工具，而是希望读者在学习
《Selenium 2自动化测试实战——基于Python语言》的内容后能够提高综合的技术高度与宽度，从而摆脱简单的手工测试，向高级测试工程师的道路 迈进。|,电子工业出版社,CNY 59.00
NumPy攻略,[印尼] Ivan Idris,|本书带领读者了解熟悉当下最流行的科学计算库NumPy的方方面面。书中不仅介绍了NumPy的安装、使用和各种相关概念，还介绍了如何利用这一最新的开源软件库，以尽可能接近传统数学语言的方式，编写可读性好、实现效率高和运行速度快的代码。最后还探究了几个和NumPy相关的科学计算项目。此外，本书将为你掌握NumPy数组和通用函数打下坚实的基础，也会通过实例教你用Matplotlib绘图，并了解和SciPy相关的项目。
本书将帮助你：
• 学习高级索引技术和线性代数知识
• 了解数组形状及图像大小的调整
• 探察广播机制和直方图
• 分析NumPy代码并用可视化的方式表示分析结果
• 用Cython为代码提速
• 使用数组接口共享数据
• 使用通用函数和互操作功能
• 学习Matplotlib以及经常和NumPy同时使用的SciPy|,人民邮电出版社,49.00
Python编程（第三版·英文影印版）,Mark Lutz,|《Python编程 第三版》已经成为Python用户的行业标准，且更加完善。第三版进行的更新反映了当前的最佳实践以及在语言的最新版本Python 2.5中引入的大量改变。
无论是新手还是老手，你都会发现这本经过彻底更新的书确实名副其实，它教给你编写代码的正确途径。它以清晰而简练的方式解释了Python语言的语法以及编程技巧，并辅以大量例子阐明正确的使用方法和通用特性。通过阅读这本全面的指南，你将学习到如何将Python运用到实际问题中，例如：
·用户图形界面编程
·并行处理
·网络应用程序
·Internet脚本编程
·数据库管理
从深入讨论核心概念开始，再到完整的程序，《Python编程 第三版》逐一覆盖这些领域。书中确有大型的程序示例，但只在你已经掌握了足够的知识，能够理解技术和代码后才会出现。
在学习过程中，你也会学到如何在实际规模的程序中使用Python——诸如面向对象编程和代码重用概念皆是贯穿全书的副题。如果你对Python 程序设计感兴趣，就需要这本O'Reilly经典书籍长伴你的左右。实践中的建议、代码的片断和程序设计模式，这些财富都可以在日常生活中得到应用——使你的生活更轻松更高效。|,东南大学出版社,138.00元
Python Tutorial,|Guido Van Rossum,Fred L. Drake, Jr (editor)|,最权威的 Python 教程，由 Python 作者 Guido van Rossum 主笔，有少许学院味道。中文电子版由刘鑫、李梦夷翻译。英文原稿网址：http:\/\/docs.python.org\/tut\/简体中文版网址：http:\/\/wiki.woodpecker.org.cn\/moin\/March_Liu\/PyTutorial,Iuniverse Inc,USD 12.95
Python UNIX和Linux系统管理指南,|基弗特 (Gift, Noab),琼斯 (Jones, Jeremy M.)|,|《Python UNIX和Linux系统管理指南》介绍了Python语言如何为管理uNIx和Linux服务器提供各种更加有效的任务处理方式。书中各章都提出了具体的管理问题，如并发或数据备份，然后通过Python示例提供了解决方案。通过《Python UNIX和Linux系统管理指南》，读者可以学习如何用Python开发自己的一套命令行工具来解决诸多问题。
作者建立了一个免费下载的Ubuntu虚拟机，其中包含《Python UNIX和Linux系统管理指南》的源代码和运行实例，也包括SNMP、IPython、SQLAlchemy及其他工具。通过《Python UNIX和Linux系统管理指南》，你可以发现Python在如下几个方面的作用：
读取文本文件并提取信息。
使用多线程和fork选项。
使用网络设备从一个进程获取另一个进程的信息。
创建可点击的、易于交互的GUl工具。
通过交互式SNMP编程实现监控大型主机集群。
掌握IPython shell，作为Bash、Korn或Z—Shell的替换或补充。
将云计算整合到基础设施中，编写Google App引擎的应用程序。
通过定制脚本解决独特数据备份的难题。
使用Djan90、SQLAlchemy和Storm ORM与数据库进行交互。
通过《Python UNIX和Linux系统管理指南》及其补充的虚拟机，你可以了解如何打包并部署Python应用程序和库，以及编写代码在类似的多个UNIXfH Linux平台上运行。|,机械工业出版社,65.00元
Foundations of Python Network Programming,|John Goerzen,Tim Bower,Brandon Rhodes|,|This second edition of Foundations of Python Network Programming targets Python 2.5 through Python 2.7, the most popular production versions of the language. Python has made great strides since Apress released the first edition of this book back in the days of Python 2.3. The advances required new chapters to be written from the ground up, and others to be extensively revised. You will learn fundamentals like IP, TCP, DNS and SSL by using working Python programs; you will also be able to familiarize yourself with infrastructure components like memcached and message queues. You can also delve into Network server designs, and compare threaded approaches with asynchronous event-based solutions. But the biggest change is this edition's expanded treatment of the web. The HTTP protocol is covered in extensive detail, with each feature accompanied by sample Python code. You can use your HTTP protocol expertise by studying an entire chapter on screen scraping and you can then test lxml and BeautifulSoup against a real-world web site. The chapter on web application programming now covers both the WSGI standard for component interoperability, as well as modern web frameworks like Django. Finally, all of the old favorites from the first edition are back: E-mail protocols like SMTP, POP, and IMAP get full treatment, as does XML-RPC. You can still learn how to code Python network programs using the Telnet and FTP protocols, but you are likely to appreciate the power of more modern alternatives like the paramiko SSH2 library. If you are a Python programmer who needs to learn the network, this is the book that you want by your side. What you'll learn * Understand low level networking * Handle sending and receiving email including composing and decoding emails, SMTP, POP and IMAP * Program the lower levels of web application programming such as FastCGI and WSGI and HTTP itself * Learn how to use memcached and message qeues using Python * Access web services using Python * Master multitasking with threads, forking, and asynchronous communication Who this book is for This book will be of interest to python programmers who need to program networked applications using Python. From web application developers, to systems integrators, to system administrators--this book has everything you need to know. Table of Contents * Introduction to Client\/Server Networking * UDP * TCP * Socket Names and DNS * Network Data and Network Errors * TLS and SSL * Server Architecture * Caches, Message Queues, and Map-Reduce * HTTP * Screen Scraping * Web Applications * E-mail Composition and Decoding * SMTP * POP * IMAP * Telnet and SSH * FTP * RPC|,Apress,USD 54.99
How to Think Like a Computer Scientist: Learning with Python,|Allen B. Downey,Jeffrey Elkner,Chris Meyers|,|""How to Think Like a Computer Scientist"" is an introduction to programming using Python, one of the best languages for beginners. This is a Free Book -- you can download it from thinkpython.com. But if you would like to make a contribution to this project, you can do it by buying a hardcopy or paying to download the electronic version here. Thank you!|,Green Tea Press,USD 24.95
Python机器学习,[美] Michael Bowles,|在学习和研究机器学习的时候，面临令人眼花缭乱的算法，机器学习新手往往会不知
所措。本书从算法和Python 语言实现的角度，帮助读者认识机器学习。
书专注于两类核心的“算法族”，即惩罚线性回归和集成方法，并通过代码实例来
展示所讨论的算法的使用原则。全书共分为7 章，详细讨论了预测模型的两类核心算法、预测模型的构建、惩罚线性回归和集成方法的具体应用和实现。
本书主要针对想提高机器学习技能的Python 开发人员，帮助他们解决某一特定的项
目或是提升相关的技能。|,人民邮电出版社,69.00元
从Python开始学编程,Vamei,改编自Vamei博客的《Python快速教程》。本书以Python为样本，不仅介绍了编程的基本概念，还着重讲解编程语言的主流范式：面向过程、面向对象、面向函数。读者不仅可以轻松学会Python，以后再学习其他编程语言时也会更加容易。,电子工业出版社,CNY 49.00
Natural Language Processing with Python,|Steven Bird,Ewan Klein,Edward Loper|,|This book offers a highly accessible introduction to Natural Language Processing, the field that underpins a variety of language technologies, ranging from predictive text and email filtering to automatic summarization and translation. With Natural Language Processing with Python, you'll learn how to write Python programs to work with large collections of unstructured text. You'll access richly-annotated datasets using a comprehensive range of linguistic data structures. And you'll understand the main algorithms for analyzing the content and structure of written communication.
Packed with examples and exercises, Natural Language Processing with Python will help you:
* Extract information from unstructured text, to guess the topic or identify "named entities"
* Analyze linguistic structure in text, including parsing and semantic analysis
* Access popular linguistic databases, including WordNet and treebanks
* Integrate techniques drawn from fields as diverse as linguistics and artificial intelligence
Perfect for individual study, or as a classroom and workshop textbook, this book will help you gain practical skills in Natural Language Processing using the Python programming language and the Natural Language Toolkit (NLTK) open source library.
If you're interested in developing Web applications, analyzing multilingual news sources, documenting endangered languages, or if you are simply curious to have a programmer's perspective on how human language works, you will find Natural Language Processing with Python both fascinating and immensely useful.|,O'Reilly Media,USD 44.99
Python,James O. Knowlton,|Python: Create-Modify-Reuse is designed for all levels of Python developers interested in a practical, hands-on way of learning Python development. This book is designed to show you how to use Python (in combination with the raw processing power of your computer) to accomplish real-world tasks in a more efficient way. Don't look for an exhaustive description of the Python language––you won't find it. The book's main purpose is not to thoroughly cover the Python language, but rather to show how you can use Python to create robust, real-world applications. In this respect, the goal is similar to foreign-language books that identify themselves as “conversational,” focusing on the vocabulary and concepts that people will need the most. Likewise, I focus specifically on the Python knowledge needed to accomplish practical, specific tasks. Along the way, you will learn to create useful, efficient scripts that are easy to maintain and enhance. This book is for developers with some experience with Python who want to explore how to develop full-blown applications. It is also for developers with experience in other languages who want to learn Python by building robust applications. It is well-suited for developers who like to “learn by doing,” rather than exploring a language feature by feature. To get the most out of the book, you should understand basic programming principles. Because this book is project-based, you can approach it in numerous ways. You can, of course, read it from cover to cover. Chapters 2 through 8 each cover a different project, so the chapters are independent of each other. However, because each chapter project is covered individually, there may be some overlap of information. I also sometimes refer to explanations of particular topics covered in previous chapters. This will help to reinforce important concepts. The end of the book contains two appendixes. The first one is a listing of Python resources you can check out for more information. The second one will help you with installing additional components used in some of the examples. This book starts with a basic overview of the Python language, designed for those familiar with other languages but new to Python. It is followed by several chapters, each of which describes a complete project that can be used as-is or modified and extended to suit your particular purposes. You'll find applications that access databases, take advantage of web technologies, and facilitate network communications, to name a few. In addition, and more important than the technologies you will be introduced to, you will learn how to use Python to solve real challenges. Following these chapters are two chapters that cover accessing operating system resources and debugging and testing, respectively. Each project chapter contains complete instructions describing how to install and use the application, so you can actually see the program run as you learn how to construct and use it, including how the project was designed and prototyped. This book is intended to be both a reference guide and a learning aid, teaching you how to build solutions with Python and providing reference information on a wide variety of Python programming concepts. It is hoped that this book will help you have fun with Python and build useful applications, and—unlike my experience with building a deck—without sore thumbs. This book is framed around the code itself. This is because developers are typically looking for how to do something; and, as with many activities, you learn how to do something by watching how others do and trying it yourself. If you want to know how a  for  loop works, you'll find  for  loops in my code, but that's not the thrust of the book. Instead, this book shows you how to do things: how to build a content management system, how to build a test management system, how to set up a system for tracking customer follow-up, and so on. Along the way, you'll learn how to communicate with a SQL database, how to act as a web server or communicate with one, how to access operating system services, and more. There are three basic components to the book: Chapter 1 is a brief overview of the Python language. Chapters 2–8 cover seven different programming projects, which illustrate various technologies and techniques available to Python developers. Chapters 9–10 cover additional, advanced topics, which will help you as you build Python projects. The project chapters have a consistent structure: Overview: What does the application do? Using the program Design How it all fits together Modules involved Code and code explanation Module\/class 1 explanation Module\/class 2 explanation Minor code file explanation Testing, including suggested tests Modifying the project, including some suggested adaptations Summary Each project is designed with classes that can be reused and accessed for multiple purposes. This is one of the main benefits of object-oriented programming, so designing for reusability is a main focus of the book. The book contains the following chapters: 1. Python Basics This chapter is a basic primer on the Python language, and it functions as either a quick tutorial for experienced programmers new to Python or a refresher for programmers with Python experience. Part I: The Projects 2. Directory\/File Snapshot Program This project demonstrates how to interact with files, create and manipulate data structures, and provide user output. It also touches on code design issues to improve code maintainability. Often when installing or uninstalling software, or verifying changes to a file system, it can be valuable to take a “snapshot” of the files and directories, along with their size and last-modified time. The script introduced in this chapter does just that. This chapter also explores how to capture a directory listing into a Python list, and explains how to query this list for particular values. 3. DVD Inventory System This project takes advantage of Python’s capability to access and manipulate data in a SQL database. The application enables multiple users to log in to a website that provides access to a DVD inventory database. Permissions are set such that some users can add, modify, or delete entries, whereas other users have read-only access to the data. 4. Web Performance Tester This project shows how to communicate with a Python web server and retrieve information regarding how long it takes to receive requested items from the web server. Although writing Python programs to work on a single computer can be useful, the real power of Python can be seen when it is used to script communication between computers on a network. Most networks contain several web servers. A nice feature of Python is that it can act as a lightweight server for various Internet protocols, such as HTTP (web) and ftp. This application enables you to monitor performance of HTTP traffic on your network. 5. Customer Follow-Up System This project shows how to present a web form to the user and retrieve data from it, how to automatically format and send e-mail through an SMTP server, and how to generate an HTML-formatted report. The task for the second example is to automatically generate a customer comments e-mail message based on information the customer enters in a form. It uses the  mod_python  Apache module to take the information entered in the HTTP form and then utilizes a Python script on the web server to send that information to an SMTP server for mail delivery. 6. Test Management\/Reporting System This project makes use of the  unittest  module to run tests against an existing application, and creates a framework for reporting test results. Testing is a vital process for developing software. This application enables users to run tests for a given piece of software, to list the previous test runs by date, to show test run results for any previously run tests, and to output the results of any test run as HTML for viewing in a web browser. 7. Version Management System This project connects to a list of servers via telnet, checks the application version of a pre-set application list, and displays its results both as output and to a log file. Often, a system administrator needs to patch systems or ensure that systems have the latest application versions installed. This script is an easy way to accomplish that task. It makes use of Python’s capability to emulate a telnet client and log in to remote systems and perform functions on that remote system. 8. Content Management System This project explores Plone, a popular content management system based on Python and Zope (a Python-based application server). Because Python is a very mature language, numerous applications have been built on top of it. A great thing about working with Python-based applications is that you get the benefit of a full-blown application but you can still use Python to configure and customize it. Part II: Advanced Topics 9. Interacting with the Operating System When writing scripts “in the real world,” often it is critical to be able to access services available through (and particular to) the operating system you happen to be on. For example, suppose you wanted to read or modify the Window Registry? Or you wanted to get the Linux process ID of a particular process that is running? Is such a thing even possible? Definitely—and this chapter shows you how. 10. Debugging and Testing Because I am a software tester myself, testing is a subject that is certainly close to my heart. In this chapter, I discuss why testing is important, how to put the right amount of testing into your code, and how writing automated tests can help you to actually write code more quickly. You’ll look at PyUnit, the automated testing framework for Python, and learn how to use it to test the riskiest parts of a script. You’ll also explore the Python de...|,Wrox,USD 39.99
深入浅出Python（影印版）,Paul Barry,你是否想过通过一本书来学习Python？《深入浅出Python))通过一种独特的超越语法手册的方式来帮助你学习Python。你将能够快速掌握Python的基础知识，然后扩展到持久化、异常处理、Web开发、SQLite、数据处理和Google应用引擎中去。你也将学会如何为Android编写移动应用，这要感谢Pvthon带给你的强大能力。《深入浅出Python》融合了完备的学习经验，它将帮助你成为真正的Python编程员。,东南大学出版社,88.00元
python黑帽子,[美]Justin Seitz,本书是畅销书《Python 灰帽子—黑客与逆向工程师的 Python 编程之道》的姊妹篇，那本书一面市便占据计算机安全类书籍的头把交椅。本书由 Immunity 公司的高级安全研究员 Justin Seitz 精心撰写。作者根据自己在安全界，特别是渗透测试领域的几十年经验，向读者介绍了 Python 如何被用在黑客和渗透测试的各个领域，从基本的网络扫描到数据包捕获，从 Web 爬虫到编写 Burp 扩展工具，从编写木马到权限提升等。 作者在本书中的很多实例都非常具有创新和启发意义， 如 HTTP 数据中的图片检测、 基于 GitHub命令进行控制的模块化木马、浏览器的中间人攻击技术、利用 COM 组件自动化技术窃取数据、通过进程监视和代码插入实现权限提升、通过向虚拟机内存快照中插入 shellcode 实现木马驻留和权限提升等。通过对这些技术的学习，读者不仅能掌握各种 Python 库的应用和编程技术，还能拓宽视野，培养和锻炼自己的黑客思维。读者在阅读本书时也完全感觉不到其他一些技术书籍常见的枯燥和乏味,电子工业出版社,55
Python,Eprogramy,,CreateSpace Independent Publishing Platform,USD 9.99
Python编程实战,[美] Mark Summerfield,|《python编程实战：运用设计模式、并发和程序库创建高质量程序》由python开发者社区知名技术专家mark summerfield亲笔撰写，全球资深python专家doug hellmann作序鼎力推荐，是python领域最有影响力的著作之一。书中通过大量实用的范例代码和三个完整的案例研究，全面而系统地讲解了如何运用设计模式来规划代码结构，如何通过并发与cython等技术提升代码执行速度，以及如何利用各种python程序库来快速开发具体的应用程序和游戏。
《python编程实战：运用设计模式、并发和程序库创建高质量程序》共8章：第1～3章分别介绍了python的几种设计模式(创建型设计模式、结构型设计模式和行为型设计模式)；第4章和第5章详细讲解了python的高级并发技术以及cython的用法；第6章具体介绍了python的高级网络编程；第7章阐释了如何用tkinter开发图形用户界面；第8章讲解了如何用opengl绘制3d图形。|,机械工业出版社,69.00元
Python基础教程（第2版•修订版）,赫特兰,|本书包括Python 程序设计的方方面面，首先从Python 的安装开始，随后介绍了Python 的基础知识和基本概念，包括列表、元组、字符串、字典以及各种语句。然后循序渐进地介绍了一些相对高级的主题，包括抽象、异常、魔法方法、属性、迭代器。此后探讨了如何将Python 与数据库、网络、C 语言等工具结合使用，从而发挥出Python 的强大功能，同时介绍了Python 程序测试、打包、发布等知识。最后，作者结合前面讲述的内容，按照实际项目开发的步骤向读者介绍了几个具有实际意义的Python 项目的开发过程。
本书内容涉及的范围较广，既能为初学者夯实基础，又能帮助程序员提升技能，适合各个层次的Python开发人员阅读参考。|,人民邮电出版社,CNY 79.00
Python编程实践,|Jennifer Campbell,Paul Gries,Jason Montojo,Greg Wilson|,|Python是当今世界流行的编程语言之一。本书共15章，通过一些短小精悍的交互式Python脚本帮助学生进行练习，并在这个过程中掌握诸如数据结构、排序和搜索算法、面向对象编程、数据库访问、图形用户界面等基本概念以及良好的程序设计风格。本书既是一本注重科学的计算机科学专业教材，也是一本目标明确的Python参考书。
本书语言风格言简意赅，图表丰富，简单实用，是一本优秀的Python入门级读物，适合Python初学者使用。|,机械工业出版社华章公司,49.00元
Python Web开发实战,董伟明,|这本书涵盖了Web开发的方方面面，可以分为如下部分：
1. 使用最新的Flask 0.11进行Web开发，学习Jinja2、Flask-Script、Flask-Migrate、Flask-Security、Flask-Assets等8种常用扩展，帮助读者理解Flask 的 优秀设计（上下文、BluePrint等），最后利用Mako、Flask_mako、SQLAlchemy、Pillow等技术实现一个豆瓣一个真实的服务。
2. 阐述笔者对REST的理解，并提出一些设计API的注意事项，最后通过jQuery和fetch实现使用Ajax的例子，让读者了解如何让前后端通信。
3. 对Python应用服务器，Web服务器、缓存系统、键值对数据库等技术的选型和使用方法，最后演示大型网站架构及其重要组件的用意。
4. 使用Fabric、SaltStack、Ansible、Supervisor、Graphite等做系统管理，并演示一个通过最新的Sentry 8演示如何收集应用错误信息。
5. 测试和持续集成，最后使用最新的Buildbot 0.9实现一个Github项目的持续集成。
6. 深入RabbitMQ和Celery的原理和使用方法，最后分享笔者使用的进阶实践。
7. 服务化及豆瓣服务化实践。
8. 详细讲解豆瓣工程师都在用的DPark，包含安装、环境配置、使用和框架化分析uv&pv，接着将展示几个笔者实际工作中的数据报表需求，并讲解如何用Pandas做数据可视化。
9. 深入IPython和Jupyter Notebook这两个工具，并分享在豆瓣对应的实践。
10. 从获取Linux服务器的相关情况、性能测试、分析Python程序性能瓶颈三个方面展示对应的工具及使用方法。
11. 以抓取微信公众号文章为主线，分别使用多线程、多进程、Gevent、Future和asyncio这5种编程方式完成不同阶段的爬取任务，也深入地分析在它们之间如何选择。
12. Python进阶和Web项目经验。
封底推荐语
伟明把他个人多年 Web 开发的经验，以及豆瓣十年来数百名优秀工程师在 Web 开发上最佳实践的积累，凝聚在了《Python Web 开发实战》这本书里，多维度、全面地介绍了 Python Web 开发涉及的各种技术。我向所有有兴趣使用 Python 做 Web 开发的开发者们，强烈推荐此书。
——洪强宁，爱因互动CTO，前豆瓣首席架构师，前宜信大数据创新中心首席架构师
感谢伟明把豆瓣的一些工程实践进行了整理和总结，这是本书最宝贵的一点，库谁都会用，但在什么场景使用，在生产环境中这个库的表现到底如何，是这本书的一个精华，期望将来还可以看到越来越多这样的图书，祝此书大卖。
——清风，SAY CEO，前豆瓣技术总监。
伟明将自身在 Web 领域所有方面的经验提炼后整理成书，本质上是将几十个关联产品的官方文档，结合具体工程经验进行了梳理，给出了领域问题最佳方案的关键思考点和自己的答案，而更加可贵的是，给出了这些思考点的来源，以及形成过程，即给出了解决各种 Web 领域问题的思维模式。
——Zoom.Quiet（大妈），优视眼动科技 CTO，Python 中文社区创始人之一和管理员
阅读本书，我最大的感受就是：全和新。本书的内容涉及了Web框架、Ajax的前后端交互、测试、数据库、数据分析、服务化、部署、系统管理、常用工具等内容，有点百科全书的意味。另外，书中讲的许多东西都是现在正在流行的技术或工具，像Flask、Celery、Jupyter、Supervisor、SaltStack、Pandas等。
——李迎辉，Python开源资深行者，Python-CN邮件列表创建人，UliPad和Uliweb作者
本书由Python开发开始，循序渐进，把网站工程的全貌展现在读者的眼前，是了解Web工程从开发到上线完整流程的绝佳参考书籍。
——邢犇（CNBorn）, 前豆瓣东西技术负责人
很多刚进入Python世界的人，伟明的这本书提供了一个非常好的“知识地图”，书中涉及了Python Web开发的方方面面。
——胡阳（the5fire），手机搜狐网，任资深开发工程师
这本书从开发环境的搭建，Web 框架的使用，到最后的持续集成和 Python 的进阶用法，无一不是他多年的实际工程经验总结，十分宝贵。
——姚钢强（acmerfight），知乎工程师
这本书非常全面地介绍了使用 Python 进行 Web 开发的方方面面，既有 Web 框架、缓存、消息队列、并发处理的场景介绍和技术选型，又有开发流程、质量保证的丰富实战经验。
——蔡斌（VeryCB），DeepDevelop工程师，前豆瓣条目组技术负责人
整本书都是作者对实际Web项目中大量实战经验的总结，绝非纸上谈兵。相信通过阅读该书可以帮助开发者规避掉大量项目中的“坑”，构建出更高性能、更稳定的Web项目。
——Spawnris, 腾讯工程师|,电子工业出版社,105
Python Cookbook 中文版，第 3 版,|David M. Beazley,Brian K. Jones|,|《Python Cookbook（第3版）中文版》介绍了Python应用在各个领域中的一些使用技巧和方法，其主题涵盖了数据结构和算法，字符串和文本，数字、日期和时间，迭代器和生成器，文件和I\/O，数据编码与处理，函数，类与对象，元编程，模块和包，网络和Web编程，并发，实用脚本和系统管理，测试、调试以及异常，C语言扩展等。
本书覆盖了Python应用中的很多常见问题，并提出了通用的解决方案。书中包含了大量实用的编程技巧和示例代码，并在Python 3.3环境下进行了测试，可以很方便地应用到实际项目中去。此外，《Python Cookbook（第3版）中文版》还详细讲解了解决方案是如何工作的，以及为什么能够工作。
《Python Cookbook（第3版）中文版》非常适合具有一定编程基础的Python程序员阅读参考。|,人民邮电出版社,108.00元
Selenium 2自动化测试实战,虫师,|《Selenium 2自动化测试实战——基于Python语言》共分 14 章。第 1 章是自动化测试相关基础知识的介绍；第 2 章到第 10 章是《Selenium 2自动化测试实战——基于Python语言》的重点，循 序渐进地介绍了自动化测试所用到的技术；第 11 章通过一个具体的项目综合运用了前面章节所介绍 的技术与技巧；第 12 章到第 14 章选取了当前最热门的技术进行了介绍，旨在扩展测试人员的综合技 术能力。 《Selenium 2自动化测试实战——基于Python语言》的写作目的并不是为了简单地告诉读者如何使用一个自动化测试工具，而是希望读者在学习
《Selenium 2自动化测试实战——基于Python语言》的内容后能够提高综合的技术高度与宽度，从而摆脱简单的手工测试，向高级测试工程师的道路 迈进。|,电子工业出版社,CNY 59.00
NumPy攻略,[印尼] Ivan Idris,|本书带领读者了解熟悉当下最流行的科学计算库NumPy的方方面面。书中不仅介绍了NumPy的安装、使用和各种相关概念，还介绍了如何利用这一最新的开源软件库，以尽可能接近传统数学语言的方式，编写可读性好、实现效率高和运行速度快的代码。最后还探究了几个和NumPy相关的科学计算项目。此外，本书将为你掌握NumPy数组和通用函数打下坚实的基础，也会通过实例教你用Matplotlib绘图，并了解和SciPy相关的项目。
本书将帮助你：
• 学习高级索引技术和线性代数知识
• 了解数组形状及图像大小的调整
• 探察广播机制和直方图
• 分析NumPy代码并用可视化的方式表示分析结果
• 用Cython为代码提速
• 使用数组接口共享数据
• 使用通用函数和互操作功能
• 学习Matplotlib以及经常和NumPy同时使用的SciPy|,人民邮电出版社,49.00
Python编程（第三版·英文影印版）,Mark Lutz,|《Python编程 第三版》已经成为Python用户的行业标准，且更加完善。第三版进行的更新反映了当前的最佳实践以及在语言的最新版本Python 2.5中引入的大量改变。
无论是新手还是老手，你都会发现这本经过彻底更新的书确实名副其实，它教给你编写代码的正确途径。它以清晰而简练的方式解释了Python语言的语法以及编程技巧，并辅以大量例子阐明正确的使用方法和通用特性。通过阅读这本全面的指南，你将学习到如何将Python运用到实际问题中，例如：
·用户图形界面编程
·并行处理
·网络应用程序
·Internet脚本编程
·数据库管理
从深入讨论核心概念开始，再到完整的程序，《Python编程 第三版》逐一覆盖这些领域。书中确有大型的程序示例，但只在你已经掌握了足够的知识，能够理解技术和代码后才会出现。
在学习过程中，你也会学到如何在实际规模的程序中使用Python——诸如面向对象编程和代码重用概念皆是贯穿全书的副题。如果你对Python 程序设计感兴趣，就需要这本O'Reilly经典书籍长伴你的左右。实践中的建议、代码的片断和程序设计模式，这些财富都可以在日常生活中得到应用——使你的生活更轻松更高效。|,东南大学出版社,138.00元
Python Tutorial,|Guido Van Rossum,Fred L. Drake, Jr (editor)|,最权威的 Python 教程，由 Python 作者 Guido van Rossum 主笔，有少许学院味道。中文电子版由刘鑫、李梦夷翻译。英文原稿网址：http:\/\/docs.python.org\/tut\/简体中文版网址：http:\/\/wiki.woodpecker.org.cn\/moin\/March_Liu\/PyTutorial,Iuniverse Inc,USD 12.95
Python UNIX和Linux系统管理指南,|基弗特 (Gift, Noab),琼斯 (Jones, Jeremy M.)|,|《Python UNIX和Linux系统管理指南》介绍了Python语言如何为管理uNIx和Linux服务器提供各种更加有效的任务处理方式。书中各章都提出了具体的管理问题，如并发或数据备份，然后通过Python示例提供了解决方案。通过《Python UNIX和Linux系统管理指南》，读者可以学习如何用Python开发自己的一套命令行工具来解决诸多问题。
作者建立了一个免费下载的Ubuntu虚拟机，其中包含《Python UNIX和Linux系统管理指南》的源代码和运行实例，也包括SNMP、IPython、SQLAlchemy及其他工具。通过《Python UNIX和Linux系统管理指南》，你可以发现Python在如下几个方面的作用：
读取文本文件并提取信息。
使用多线程和fork选项。
使用网络设备从一个进程获取另一个进程的信息。
创建可点击的、易于交互的GUl工具。
通过交互式SNMP编程实现监控大型主机集群。
掌握IPython shell，作为Bash、Korn或Z—Shell的替换或补充。
将云计算整合到基础设施中，编写Google App引擎的应用程序。
通过定制脚本解决独特数据备份的难题。
使用Djan90、SQLAlchemy和Storm ORM与数据库进行交互。
通过《Python UNIX和Linux系统管理指南》及其补充的虚拟机，你可以了解如何打包并部署Python应用程序和库，以及编写代码在类似的多个UNIXfH Linux平台上运行。|,机械工业出版社,65.00元
Foundations of Python Network Programming,|John Goerzen,Tim Bower,Brandon Rhodes|,|This second edition of Foundations of Python Network Programming targets Python 2.5 through Python 2.7, the most popular production versions of the language. Python has made great strides since Apress released the first edition of this book back in the days of Python 2.3. The advances required new chapters to be written from the ground up, and others to be extensively revised. You will learn fundamentals like IP, TCP, DNS and SSL by using working Python programs; you will also be able to familiarize yourself with infrastructure components like memcached and message queues. You can also delve into Network server designs, and compare threaded approaches with asynchronous event-based solutions. But the biggest change is this edition's expanded treatment of the web. The HTTP protocol is covered in extensive detail, with each feature accompanied by sample Python code. You can use your HTTP protocol expertise by studying an entire chapter on screen scraping and you can then test lxml and BeautifulSoup against a real-world web site. The chapter on web application programming now covers both the WSGI standard for component interoperability, as well as modern web frameworks like Django. Finally, all of the old favorites from the first edition are back: E-mail protocols like SMTP, POP, and IMAP get full treatment, as does XML-RPC. You can still learn how to code Python network programs using the Telnet and FTP protocols, but you are likely to appreciate the power of more modern alternatives like the paramiko SSH2 library. If you are a Python programmer who needs to learn the network, this is the book that you want by your side. What you'll learn * Understand low level networking * Handle sending and receiving email including composing and decoding emails, SMTP, POP and IMAP * Program the lower levels of web application programming such as FastCGI and WSGI and HTTP itself * Learn how to use memcached and message qeues using Python * Access web services using Python * Master multitasking with threads, forking, and asynchronous communication Who this book is for This book will be of interest to python programmers who need to program networked applications using Python. From web application developers, to systems integrators, to system administrators--this book has everything you need to know. Table of Contents * Introduction to Client\/Server Networking * UDP * TCP * Socket Names and DNS * Network Data and Network Errors * TLS and SSL * Server Architecture * Caches, Message Queues, and Map-Reduce * HTTP * Screen Scraping * Web Applications * E-mail Composition and Decoding * SMTP * POP * IMAP * Telnet and SSH * FTP * RPC|,Apress,USD 54.99
How to Think Like a Computer Scientist: Learning with Python,|Allen B. Downey,Jeffrey Elkner,Chris Meyers|,|""How to Think Like a Computer Scientist"" is an introduction to programming using Python, one of the best languages for beginners. This is a Free Book -- you can download it from thinkpython.com. But if you would like to make a contribution to this project, you can do it by buying a hardcopy or paying to download the electronic version here. Thank you!|,Green Tea Press,USD 24.95
Python机器学习,[美] Michael Bowles,|在学习和研究机器学习的时候，面临令人眼花缭乱的算法，机器学习新手往往会不知
所措。本书从算法和Python 语言实现的角度，帮助读者认识机器学习。
书专注于两类核心的“算法族”，即惩罚线性回归和集成方法，并通过代码实例来
展示所讨论的算法的使用原则。全书共分为7 章，详细讨论了预测模型的两类核心算法、预测模型的构建、惩罚线性回归和集成方法的具体应用和实现。
本书主要针对想提高机器学习技能的Python 开发人员，帮助他们解决某一特定的项
目或是提升相关的技能。|,人民邮电出版社,69.00元
从Python开始学编程,Vamei,改编自Vamei博客的《Python快速教程》。本书以Python为样本，不仅介绍了编程的基本概念，还着重讲解编程语言的主流范式：面向过程、面向对象、面向函数。读者不仅可以轻松学会Python，以后再学习其他编程语言时也会更加容易。,电子工业出版社,CNY 49.00
Natural Language Processing with Python,|Steven Bird,Ewan Klein,Edward Loper|,|This book offers a highly accessible introduction to Natural Language Processing, the field that underpins a variety of language technologies, ranging from predictive text and email filtering to automatic summarization and translation. With Natural Language Processing with Python, you'll learn how to write Python programs to work with large collections of unstructured text. You'll access richly-annotated datasets using a comprehensive range of linguistic data structures. And you'll understand the main algorithms for analyzing the content and structure of written communication.
Packed with examples and exercises, Natural Language Processing with Python will help you:
* Extract information from unstructured text, to guess the topic or identify "named entities"
* Analyze linguistic structure in text, including parsing and semantic analysis
* Access popular linguistic databases, including WordNet and treebanks
* Integrate techniques drawn from fields as diverse as linguistics and artificial intelligence
Perfect for individual study, or as a classroom and workshop textbook, this book will help you gain practical skills in Natural Language Processing using the Python programming language and the Natural Language Toolkit (NLTK) open source library.
If you're interested in developing Web applications, analyzing multilingual news sources, documenting endangered languages, or if you are simply curious to have a programmer's perspective on how human language works, you will find Natural Language Processing with Python both fascinating and immensely useful.|,O'Reilly Media,USD 44.99
Python,James O. Knowlton,|Python: Create-Modify-Reuse is designed for all levels of Python developers interested in a practical, hands-on way of learning Python development. This book is designed to show you how to use Python (in combination with the raw processing power of your computer) to accomplish real-world tasks in a more efficient way. Don't look for an exhaustive description of the Python language––you won't find it. The book's main purpose is not to thoroughly cover the Python language, but rather to show how you can use Python to create robust, real-world applications. In this respect, the goal is similar to foreign-language books that identify themselves as “conversational,” focusing on the vocabulary and concepts that people will need the most. Likewise, I focus specifically on the Python knowledge needed to accomplish practical, specific tasks. Along the way, you will learn to create useful, efficient scripts that are easy to maintain and enhance. This book is for developers with some experience with Python who want to explore how to develop full-blown applications. It is also for developers with experience in other languages who want to learn Python by building robust applications. It is well-suited for developers who like to “learn by doing,” rather than exploring a language feature by feature. To get the most out of the book, you should understand basic programming principles. Because this book is project-based, you can approach it in numerous ways. You can, of course, read it from cover to cover. Chapters 2 through 8 each cover a different project, so the chapters are independent of each other. However, because each chapter project is covered individually, there may be some overlap of information. I also sometimes refer to explanations of particular topics covered in previous chapters. This will help to reinforce important concepts. The end of the book contains two appendixes. The first one is a listing of Python resources you can check out for more information. The second one will help you with installing additional components used in some of the examples. This book starts with a basic overview of the Python language, designed for those familiar with other languages but new to Python. It is followed by several chapters, each of which describes a complete project that can be used as-is or modified and extended to suit your particular purposes. You'll find applications that access databases, take advantage of web technologies, and facilitate network communications, to name a few. In addition, and more important than the technologies you will be introduced to, you will learn how to use Python to solve real challenges. Following these chapters are two chapters that cover accessing operating system resources and debugging and testing, respectively. Each project chapter contains complete instructions describing how to install and use the application, so you can actually see the program run as you learn how to construct and use it, including how the project was designed and prototyped. This book is intended to be both a reference guide and a learning aid, teaching you how to build solutions with Python and providing reference information on a wide variety of Python programming concepts. It is hoped that this book will help you have fun with Python and build useful applications, and—unlike my experience with building a deck—without sore thumbs. This book is framed around the code itself. This is because developers are typically looking for how to do something; and, as with many activities, you learn how to do something by watching how others do and trying it yourself. If you want to know how a  for  loop works, you'll find  for  loops in my code, but that's not the thrust of the book. Instead, this book shows you how to do things: how to build a content management system, how to build a test management system, how to set up a system for tracking customer follow-up, and so on. Along the way, you'll learn how to communicate with a SQL database, how to act as a web server or communicate with one, how to access operating system services, and more. There are three basic components to the book: Chapter 1 is a brief overview of the Python language. Chapters 2–8 cover seven different programming projects, which illustrate various technologies and techniques available to Python developers. Chapters 9–10 cover additional, advanced topics, which will help you as you build Python projects. The project chapters have a consistent structure: Overview: What does the application do? Using the program Design How it all fits together Modules involved Code and code explanation Module\/class 1 explanation Module\/class 2 explanation Minor code file explanation Testing, including suggested tests Modifying the project, including some suggested adaptations Summary Each project is designed with classes that can be reused and accessed for multiple purposes. This is one of the main benefits of object-oriented programming, so designing for reusability is a main focus of the book. The book contains the following chapters: 1. Python Basics This chapter is a basic primer on the Python language, and it functions as either a quick tutorial for experienced programmers new to Python or a refresher for programmers with Python experience. Part I: The Projects 2. Directory\/File Snapshot Program This project demonstrates how to interact with files, create and manipulate data structures, and provide user output. It also touches on code design issues to improve code maintainability. Often when installing or uninstalling software, or verifying changes to a file system, it can be valuable to take a “snapshot” of the files and directories, along with their size and last-modified time. The script introduced in this chapter does just that. This chapter also explores how to capture a directory listing into a Python list, and explains how to query this list for particular values. 3. DVD Inventory System This project takes advantage of Python’s capability to access and manipulate data in a SQL database. The application enables multiple users to log in to a website that provides access to a DVD inventory database. Permissions are set such that some users can add, modify, or delete entries, whereas other users have read-only access to the data. 4. Web Performance Tester This project shows how to communicate with a Python web server and retrieve information regarding how long it takes to receive requested items from the web server. Although writing Python programs to work on a single computer can be useful, the real power of Python can be seen when it is used to script communication between computers on a network. Most networks contain several web servers. A nice feature of Python is that it can act as a lightweight server for various Internet protocols, such as HTTP (web) and ftp. This application enables you to monitor performance of HTTP traffic on your network. 5. Customer Follow-Up System This project shows how to present a web form to the user and retrieve data from it, how to automatically format and send e-mail through an SMTP server, and how to generate an HTML-formatted report. The task for the second example is to automatically generate a customer comments e-mail message based on information the customer enters in a form. It uses the  mod_python  Apache module to take the information entered in the HTTP form and then utilizes a Python script on the web server to send that information to an SMTP server for mail delivery. 6. Test Management\/Reporting System This project makes use of the  unittest  module to run tests against an existing application, and creates a framework for reporting test results. Testing is a vital process for developing software. This application enables users to run tests for a given piece of software, to list the previous test runs by date, to show test run results for any previously run tests, and to output the results of any test run as HTML for viewing in a web browser. 7. Version Management System This project connects to a list of servers via telnet, checks the application version of a pre-set application list, and displays its results both as output and to a log file. Often, a system administrator needs to patch systems or ensure that systems have the latest application versions installed. This script is an easy way to accomplish that task. It makes use of Python’s capability to emulate a telnet client and log in to remote systems and perform functions on that remote system. 8. Content Management System This project explores Plone, a popular content management system based on Python and Zope (a Python-based application server). Because Python is a very mature language, numerous applications have been built on top of it. A great thing about working with Python-based applications is that you get the benefit of a full-blown application but you can still use Python to configure and customize it. Part II: Advanced Topics 9. Interacting with the Operating System When writing scripts “in the real world,” often it is critical to be able to access services available through (and particular to) the operating system you happen to be on. For example, suppose you wanted to read or modify the Window Registry? Or you wanted to get the Linux process ID of a particular process that is running? Is such a thing even possible? Definitely—and this chapter shows you how. 10. Debugging and Testing Because I am a software tester myself, testing is a subject that is certainly close to my heart. In this chapter, I discuss why testing is important, how to put the right amount of testing into your code, and how writing automated tests can help you to actually write code more quickly. You’ll look at PyUnit, the automated testing framework for Python, and learn how to use it to test the riskiest parts of a script. You’ll also explore the Python de...|,Wrox,USD 39.99
深入浅出Python（影印版）,Paul Barry,你是否想过通过一本书来学习Python？《深入浅出Python))通过一种独特的超越语法手册的方式来帮助你学习Python。你将能够快速掌握Python的基础知识，然后扩展到持久化、异常处理、Web开发、SQLite、数据处理和Google应用引擎中去。你也将学会如何为Android编写移动应用，这要感谢Pvthon带给你的强大能力。《深入浅出Python》融合了完备的学习经验，它将帮助你成为真正的Python编程员。,东南大学出版社,88.00元
python黑帽子,[美]Justin Seitz,本书是畅销书《Python 灰帽子—黑客与逆向工程师的 Python 编程之道》的姊妹篇，那本书一面市便占据计算机安全类书籍的头把交椅。本书由 Immunity 公司的高级安全研究员 Justin Seitz 精心撰写。作者根据自己在安全界，特别是渗透测试领域的几十年经验，向读者介绍了 Python 如何被用在黑客和渗透测试的各个领域，从基本的网络扫描到数据包捕获，从 Web 爬虫到编写 Burp 扩展工具，从编写木马到权限提升等。 作者在本书中的很多实例都非常具有创新和启发意义， 如 HTTP 数据中的图片检测、 基于 GitHub命令进行控制的模块化木马、浏览器的中间人攻击技术、利用 COM 组件自动化技术窃取数据、通过进程监视和代码插入实现权限提升、通过向虚拟机内存快照中插入 shellcode 实现木马驻留和权限提升等。通过对这些技术的学习，读者不仅能掌握各种 Python 库的应用和编程技术，还能拓宽视野，培养和锻炼自己的黑客思维。读者在阅读本书时也完全感觉不到其他一些技术书籍常见的枯燥和乏味,电子工业出版社,55
Python,Eprogramy,,CreateSpace Independent Publishing Platform,USD 9.99
Python编程实战,[美] Mark Summerfield,|《python编程实战：运用设计模式、并发和程序库创建高质量程序》由python开发者社区知名技术专家mark summerfield亲笔撰写，全球资深python专家doug hellmann作序鼎力推荐，是python领域最有影响力的著作之一。书中通过大量实用的范例代码和三个完整的案例研究，全面而系统地讲解了如何运用设计模式来规划代码结构，如何通过并发与cython等技术提升代码执行速度，以及如何利用各种python程序库来快速开发具体的应用程序和游戏。
《python编程实战：运用设计模式、并发和程序库创建高质量程序》共8章：第1～3章分别介绍了python的几种设计模式(创建型设计模式、结构型设计模式和行为型设计模式)；第4章和第5章详细讲解了python的高级并发技术以及cython的用法；第6章具体介绍了python的高级网络编程；第7章阐释了如何用tkinter开发图形用户界面；第8章讲解了如何用opengl绘制3d图形。|,机械工业出版社,69.00元
Python基础教程（第2版•修订版）,赫特兰,|本书包括Python 程序设计的方方面面，首先从Python 的安装开始，随后介绍了Python 的基础知识和基本概念，包括列表、元组、字符串、字典以及各种语句。然后循序渐进地介绍了一些相对高级的主题，包括抽象、异常、魔法方法、属性、迭代器。此后探讨了如何将Python 与数据库、网络、C 语言等工具结合使用，从而发挥出Python 的强大功能，同时介绍了Python 程序测试、打包、发布等知识。最后，作者结合前面讲述的内容，按照实际项目开发的步骤向读者介绍了几个具有实际意义的Python 项目的开发过程。
本书内容涉及的范围较广，既能为初学者夯实基础，又能帮助程序员提升技能，适合各个层次的Python开发人员阅读参考。|,人民邮电出版社,CNY 79.00
Python编程实践,|Jennifer Campbell,Paul Gries,Jason Montojo,Greg Wilson|,|Python是当今世界流行的编程语言之一。本书共15章，通过一些短小精悍的交互式Python脚本帮助学生进行练习，并在这个过程中掌握诸如数据结构、排序和搜索算法、面向对象编程、数据库访问、图形用户界面等基本概念以及良好的程序设计风格。本书既是一本注重科学的计算机科学专业教材，也是一本目标明确的Python参考书。
本书语言风格言简意赅，图表丰富，简单实用，是一本优秀的Python入门级读物，适合Python初学者使用。|,机械工业出版社华章公司,49.00元
Python Web开发实战,董伟明,|这本书涵盖了Web开发的方方面面，可以分为如下部分：
1. 使用最新的Flask 0.11进行Web开发，学习Jinja2、Flask-Script、Flask-Migrate、Flask-Security、Flask-Assets等8种常用扩展，帮助读者理解Flask 的 优秀设计（上下文、BluePrint等），最后利用Mako、Flask_mako、SQLAlchemy、Pillow等技术实现一个豆瓣一个真实的服务。
2. 阐述笔者对REST的理解，并提出一些设计API的注意事项，最后通过jQuery和fetch实现使用Ajax的例子，让读者了解如何让前后端通信。
3. 对Python应用服务器，Web服务器、缓存系统、键值对数据库等技术的选型和使用方法，最后演示大型网站架构及其重要组件的用意。
4. 使用Fabric、SaltStack、Ansible、Supervisor、Graphite等做系统管理，并演示一个通过最新的Sentry 8演示如何收集应用错误信息。
5. 测试和持续集成，最后使用最新的Buildbot 0.9实现一个Github项目的持续集成。
6. 深入RabbitMQ和Celery的原理和使用方法，最后分享笔者使用的进阶实践。
7. 服务化及豆瓣服务化实践。
8. 详细讲解豆瓣工程师都在用的DPark，包含安装、环境配置、使用和框架化分析uv&pv，接着将展示几个笔者实际工作中的数据报表需求，并讲解如何用Pandas做数据可视化。
9. 深入IPython和Jupyter Notebook这两个工具，并分享在豆瓣对应的实践。
10. 从获取Linux服务器的相关情况、性能测试、分析Python程序性能瓶颈三个方面展示对应的工具及使用方法。
11. 以抓取微信公众号文章为主线，分别使用多线程、多进程、Gevent、Future和asyncio这5种编程方式完成不同阶段的爬取任务，也深入地分析在它们之间如何选择。
12. Python进阶和Web项目经验。
封底推荐语
伟明把他个人多年 Web 开发的经验，以及豆瓣十年来数百名优秀工程师在 Web 开发上最佳实践的积累，凝聚在了《Python Web 开发实战》这本书里，多维度、全面地介绍了 Python Web 开发涉及的各种技术。我向所有有兴趣使用 Python 做 Web 开发的开发者们，强烈推荐此书。
——洪强宁，爱因互动CTO，前豆瓣首席架构师，前宜信大数据创新中心首席架构师
感谢伟明把豆瓣的一些工程实践进行了整理和总结，这是本书最宝贵的一点，库谁都会用，但在什么场景使用，在生产环境中这个库的表现到底如何，是这本书的一个精华，期望将来还可以看到越来越多这样的图书，祝此书大卖。
——清风，SAY CEO，前豆瓣技术总监。
伟明将自身在 Web 领域所有方面的经验提炼后整理成书，本质上是将几十个关联产品的官方文档，结合具体工程经验进行了梳理，给出了领域问题最佳方案的关键思考点和自己的答案，而更加可贵的是，给出了这些思考点的来源，以及形成过程，即给出了解决各种 Web 领域问题的思维模式。
——Zoom.Quiet（大妈），优视眼动科技 CTO，Python 中文社区创始人之一和管理员
阅读本书，我最大的感受就是：全和新。本书的内容涉及了Web框架、Ajax的前后端交互、测试、数据库、数据分析、服务化、部署、系统管理、常用工具等内容，有点百科全书的意味。另外，书中讲的许多东西都是现在正在流行的技术或工具，像Flask、Celery、Jupyter、Supervisor、SaltStack、Pandas等。
——李迎辉，Python开源资深行者，Python-CN邮件列表创建人，UliPad和Uliweb作者
本书由Python开发开始，循序渐进，把网站工程的全貌展现在读者的眼前，是了解Web工程从开发到上线完整流程的绝佳参考书籍。
——邢犇（CNBorn）, 前豆瓣东西技术负责人
很多刚进入Python世界的人，伟明的这本书提供了一个非常好的“知识地图”，书中涉及了Python Web开发的方方面面。
——胡阳（the5fire），手机搜狐网，任资深开发工程师
这本书从开发环境的搭建，Web 框架的使用，到最后的持续集成和 Python 的进阶用法，无一不是他多年的实际工程经验总结，十分宝贵。
——姚钢强（acmerfight），知乎工程师
这本书非常全面地介绍了使用 Python 进行 Web 开发的方方面面，既有 Web 框架、缓存、消息队列、并发处理的场景介绍和技术选型，又有开发流程、质量保证的丰富实战经验。
——蔡斌（VeryCB），DeepDevelop工程师，前豆瓣条目组技术负责人
整本书都是作者对实际Web项目中大量实战经验的总结，绝非纸上谈兵。相信通过阅读该书可以帮助开发者规避掉大量项目中的“坑”，构建出更高性能、更稳定的Web项目。
——Spawnris, 腾讯工程师|,电子工业出版社,105
Python Cookbook 中文版，第 3 版,|David M. Beazley,Brian K. Jones|,|《Python Cookbook（第3版）中文版》介绍了Python应用在各个领域中的一些使用技巧和方法，其主题涵盖了数据结构和算法，字符串和文本，数字、日期和时间，迭代器和生成器，文件和I\/O，数据编码与处理，函数，类与对象，元编程，模块和包，网络和Web编程，并发，实用脚本和系统管理，测试、调试以及异常，C语言扩展等。
本书覆盖了Python应用中的很多常见问题，并提出了通用的解决方案。书中包含了大量实用的编程技巧和示例代码，并在Python 3.3环境下进行了测试，可以很方便地应用到实际项目中去。此外，《Python Cookbook（第3版）中文版》还详细讲解了解决方案是如何工作的，以及为什么能够工作。
《Python Cookbook（第3版）中文版》非常适合具有一定编程基础的Python程序员阅读参考。|,人民邮电出版社,108.00元
Hacking Secret Ciphers with Python,Al Sweigart,,CreateSpace Independent Publishing Platform,USD 25.01
NumPy攻略,[印尼] Ivan Idris,|本书带领读者了解熟悉当下最流行的科学计算库NumPy的方方面面。书中不仅介绍了NumPy的安装、使用和各种相关概念，还介绍了如何利用这一最新的开源软件库，以尽可能接近传统数学语言的方式，编写可读性好、实现效率高和运行速度快的代码。最后还探究了几个和NumPy相关的科学计算项目。此外，本书将为你掌握NumPy数组和通用函数打下坚实的基础，也会通过实例教你用Matplotlib绘图，并了解和SciPy相关的项目。
本书将帮助你：
• 学习高级索引技术和线性代数知识
• 了解数组形状及图像大小的调整
• 探察广播机制和直方图
• 分析NumPy代码并用可视化的方式表示分析结果
• 用Cython为代码提速
• 使用数组接口共享数据
• 使用通用函数和互操作功能
• 学习Matplotlib以及经常和NumPy同时使用的SciPy|,人民邮电出版社,49.00
Python编程（第三版·英文影印版）,Mark Lutz,|《Python编程 第三版》已经成为Python用户的行业标准，且更加完善。第三版进行的更新反映了当前的最佳实践以及在语言的最新版本Python 2.5中引入的大量改变。
无论是新手还是老手，你都会发现这本经过彻底更新的书确实名副其实，它教给你编写代码的正确途径。它以清晰而简练的方式解释了Python语言的语法以及编程技巧，并辅以大量例子阐明正确的使用方法和通用特性。通过阅读这本全面的指南，你将学习到如何将Python运用到实际问题中，例如：
·用户图形界面编程
·并行处理
·网络应用程序
·Internet脚本编程
·数据库管理
从深入讨论核心概念开始，再到完整的程序，《Python编程 第三版》逐一覆盖这些领域。书中确有大型的程序示例，但只在你已经掌握了足够的知识，能够理解技术和代码后才会出现。
在学习过程中，你也会学到如何在实际规模的程序中使用Python——诸如面向对象编程和代码重用概念皆是贯穿全书的副题。如果你对Python 程序设计感兴趣，就需要这本O'Reilly经典书籍长伴你的左右。实践中的建议、代码的片断和程序设计模式，这些财富都可以在日常生活中得到应用——使你的生活更轻松更高效。|,东南大学出版社,138.00元
Python Tutorial,|Guido Van Rossum,Fred L. Drake, Jr (editor)|,最权威的 Python 教程，由 Python 作者 Guido van Rossum 主笔，有少许学院味道。中文电子版由刘鑫、李梦夷翻译。英文原稿网址：http:\/\/docs.python.org\/tut\/简体中文版网址：http:\/\/wiki.woodpecker.org.cn\/moin\/March_Liu\/PyTutorial,Iuniverse Inc,USD 12.95
Python UNIX和Linux系统管理指南,|基弗特 (Gift, Noab),琼斯 (Jones, Jeremy M.)|,|《Python UNIX和Linux系统管理指南》介绍了Python语言如何为管理uNIx和Linux服务器提供各种更加有效的任务处理方式。书中各章都提出了具体的管理问题，如并发或数据备份，然后通过Python示例提供了解决方案。通过《Python UNIX和Linux系统管理指南》，读者可以学习如何用Python开发自己的一套命令行工具来解决诸多问题。
作者建立了一个免费下载的Ubuntu虚拟机，其中包含《Python UNIX和Linux系统管理指南》的源代码和运行实例，也包括SNMP、IPython、SQLAlchemy及其他工具。通过《Python UNIX和Linux系统管理指南》，你可以发现Python在如下几个方面的作用：
读取文本文件并提取信息。
使用多线程和fork选项。
使用网络设备从一个进程获取另一个进程的信息。
创建可点击的、易于交互的GUl工具。
通过交互式SNMP编程实现监控大型主机集群。
掌握IPython shell，作为Bash、Korn或Z—Shell的替换或补充。
将云计算整合到基础设施中，编写Google App引擎的应用程序。
通过定制脚本解决独特数据备份的难题。
使用Djan90、SQLAlchemy和Storm ORM与数据库进行交互。
通过《Python UNIX和Linux系统管理指南》及其补充的虚拟机，你可以了解如何打包并部署Python应用程序和库，以及编写代码在类似的多个UNIXfH Linux平台上运行。|,机械工业出版社,65.00元
Foundations of Python Network Programming,|John Goerzen,Tim Bower,Brandon Rhodes|,|This second edition of Foundations of Python Network Programming targets Python 2.5 through Python 2.7, the most popular production versions of the language. Python has made great strides since Apress released the first edition of this book back in the days of Python 2.3. The advances required new chapters to be written from the ground up, and others to be extensively revised. You will learn fundamentals like IP, TCP, DNS and SSL by using working Python programs; you will also be able to familiarize yourself with infrastructure components like memcached and message queues. You can also delve into Network server designs, and compare threaded approaches with asynchronous event-based solutions. But the biggest change is this edition's expanded treatment of the web. The HTTP protocol is covered in extensive detail, with each feature accompanied by sample Python code. You can use your HTTP protocol expertise by studying an entire chapter on screen scraping and you can then test lxml and BeautifulSoup against a real-world web site. The chapter on web application programming now covers both the WSGI standard for component interoperability, as well as modern web frameworks like Django. Finally, all of the old favorites from the first edition are back: E-mail protocols like SMTP, POP, and IMAP get full treatment, as does XML-RPC. You can still learn how to code Python network programs using the Telnet and FTP protocols, but you are likely to appreciate the power of more modern alternatives like the paramiko SSH2 library. If you are a Python programmer who needs to learn the network, this is the book that you want by your side. What you'll learn * Understand low level networking * Handle sending and receiving email including composing and decoding emails, SMTP, POP and IMAP * Program the lower levels of web application programming such as FastCGI and WSGI and HTTP itself * Learn how to use memcached and message qeues using Python * Access web services using Python * Master multitasking with threads, forking, and asynchronous communication Who this book is for This book will be of interest to python programmers who need to program networked applications using Python. From web application developers, to systems integrators, to system administrators--this book has everything you need to know. Table of Contents * Introduction to Client\/Server Networking * UDP * TCP * Socket Names and DNS * Network Data and Network Errors * TLS and SSL * Server Architecture * Caches, Message Queues, and Map-Reduce * HTTP * Screen Scraping * Web Applications * E-mail Composition and Decoding * SMTP * POP * IMAP * Telnet and SSH * FTP * RPC|,Apress,USD 54.99
How to Think Like a Computer Scientist: Learning with Python,|Allen B. Downey,Jeffrey Elkner,Chris Meyers|,|""How to Think Like a Computer Scientist"" is an introduction to programming using Python, one of the best languages for beginners. This is a Free Book -- you can download it from thinkpython.com. But if you would like to make a contribution to this project, you can do it by buying a hardcopy or paying to download the electronic version here. Thank you!|,Green Tea Press,USD 24.95
Python机器学习,[美] Michael Bowles,|在学习和研究机器学习的时候，面临令人眼花缭乱的算法，机器学习新手往往会不知
所措。本书从算法和Python 语言实现的角度，帮助读者认识机器学习。
书专注于两类核心的“算法族”，即惩罚线性回归和集成方法，并通过代码实例来
展示所讨论的算法的使用原则。全书共分为7 章，详细讨论了预测模型的两类核心算法、预测模型的构建、惩罚线性回归和集成方法的具体应用和实现。
本书主要针对想提高机器学习技能的Python 开发人员，帮助他们解决某一特定的项
目或是提升相关的技能。|,人民邮电出版社,69.00元
从Python开始学编程,Vamei,改编自Vamei博客的《Python快速教程》。本书以Python为样本，不仅介绍了编程的基本概念，还着重讲解编程语言的主流范式：面向过程、面向对象、面向函数。读者不仅可以轻松学会Python，以后再学习其他编程语言时也会更加容易。,电子工业出版社,CNY 49.00
Natural Language Processing with Python,|Steven Bird,Ewan Klein,Edward Loper|,|This book offers a highly accessible introduction to Natural Language Processing, the field that underpins a variety of language technologies, ranging from predictive text and email filtering to automatic summarization and translation. With Natural Language Processing with Python, you'll learn how to write Python programs to work with large collections of unstructured text. You'll access richly-annotated datasets using a comprehensive range of linguistic data structures. And you'll understand the main algorithms for analyzing the content and structure of written communication.
Packed with examples and exercises, Natural Language Processing with Python will help you:
* Extract information from unstructured text, to guess the topic or identify "named entities"
* Analyze linguistic structure in text, including parsing and semantic analysis
* Access popular linguistic databases, including WordNet and treebanks
* Integrate techniques drawn from fields as diverse as linguistics and artificial intelligence
Perfect for individual study, or as a classroom and workshop textbook, this book will help you gain practical skills in Natural Language Processing using the Python programming language and the Natural Language Toolkit (NLTK) open source library.
If you're interested in developing Web applications, analyzing multilingual news sources, documenting endangered languages, or if you are simply curious to have a programmer's perspective on how human language works, you will find Natural Language Processing with Python both fascinating and immensely useful.|,O'Reilly Media,USD 44.99
Python,James O. Knowlton,|Python: Create-Modify-Reuse is designed for all levels of Python developers interested in a practical, hands-on way of learning Python development. This book is designed to show you how to use Python (in combination with the raw processing power of your computer) to accomplish real-world tasks in a more efficient way. Don't look for an exhaustive description of the Python language––you won't find it. The book's main purpose is not to thoroughly cover the Python language, but rather to show how you can use Python to create robust, real-world applications. In this respect, the goal is similar to foreign-language books that identify themselves as “conversational,” focusing on the vocabulary and concepts that people will need the most. Likewise, I focus specifically on the Python knowledge needed to accomplish practical, specific tasks. Along the way, you will learn to create useful, efficient scripts that are easy to maintain and enhance. This book is for developers with some experience with Python who want to explore how to develop full-blown applications. It is also for developers with experience in other languages who want to learn Python by building robust applications. It is well-suited for developers who like to “learn by doing,” rather than exploring a language feature by feature. To get the most out of the book, you should understand basic programming principles. Because this book is project-based, you can approach it in numerous ways. You can, of course, read it from cover to cover. Chapters 2 through 8 each cover a different project, so the chapters are independent of each other. However, because each chapter project is covered individually, there may be some overlap of information. I also sometimes refer to explanations of particular topics covered in previous chapters. This will help to reinforce important concepts. The end of the book contains two appendixes. The first one is a listing of Python resources you can check out for more information. The second one will help you with installing additional components used in some of the examples. This book starts with a basic overview of the Python language, designed for those familiar with other languages but new to Python. It is followed by several chapters, each of which describes a complete project that can be used as-is or modified and extended to suit your particular purposes. You'll find applications that access databases, take advantage of web technologies, and facilitate network communications, to name a few. In addition, and more important than the technologies you will be introduced to, you will learn how to use Python to solve real challenges. Following these chapters are two chapters that cover accessing operating system resources and debugging and testing, respectively. Each project chapter contains complete instructions describing how to install and use the application, so you can actually see the program run as you learn how to construct and use it, including how the project was designed and prototyped. This book is intended to be both a reference guide and a learning aid, teaching you how to build solutions with Python and providing reference information on a wide variety of Python programming concepts. It is hoped that this book will help you have fun with Python and build useful applications, and—unlike my experience with building a deck—without sore thumbs. This book is framed around the code itself. This is because developers are typically looking for how to do something; and, as with many activities, you learn how to do something by watching how others do and trying it yourself. If you want to know how a  for  loop works, you'll find  for  loops in my code, but that's not the thrust of the book. Instead, this book shows you how to do things: how to build a content management system, how to build a test management system, how to set up a system for tracking customer follow-up, and so on. Along the way, you'll learn how to communicate with a SQL database, how to act as a web server or communicate with one, how to access operating system services, and more. There are three basic components to the book: Chapter 1 is a brief overview of the Python language. Chapters 2–8 cover seven different programming projects, which illustrate various technologies and techniques available to Python developers. Chapters 9–10 cover additional, advanced topics, which will help you as you build Python projects. The project chapters have a consistent structure: Overview: What does the application do? Using the program Design How it all fits together Modules involved Code and code explanation Module\/class 1 explanation Module\/class 2 explanation Minor code file explanation Testing, including suggested tests Modifying the project, including some suggested adaptations Summary Each project is designed with classes that can be reused and accessed for multiple purposes. This is one of the main benefits of object-oriented programming, so designing for reusability is a main focus of the book. The book contains the following chapters: 1. Python Basics This chapter is a basic primer on the Python language, and it functions as either a quick tutorial for experienced programmers new to Python or a refresher for programmers with Python experience. Part I: The Projects 2. Directory\/File Snapshot Program This project demonstrates how to interact with files, create and manipulate data structures, and provide user output. It also touches on code design issues to improve code maintainability. Often when installing or uninstalling software, or verifying changes to a file system, it can be valuable to take a “snapshot” of the files and directories, along with their size and last-modified time. The script introduced in this chapter does just that. This chapter also explores how to capture a directory listing into a Python list, and explains how to query this list for particular values. 3. DVD Inventory System This project takes advantage of Python’s capability to access and manipulate data in a SQL database. The application enables multiple users to log in to a website that provides access to a DVD inventory database. Permissions are set such that some users can add, modify, or delete entries, whereas other users have read-only access to the data. 4. Web Performance Tester This project shows how to communicate with a Python web server and retrieve information regarding how long it takes to receive requested items from the web server. Although writing Python programs to work on a single computer can be useful, the real power of Python can be seen when it is used to script communication between computers on a network. Most networks contain several web servers. A nice feature of Python is that it can act as a lightweight server for various Internet protocols, such as HTTP (web) and ftp. This application enables you to monitor performance of HTTP traffic on your network. 5. Customer Follow-Up System This project shows how to present a web form to the user and retrieve data from it, how to automatically format and send e-mail through an SMTP server, and how to generate an HTML-formatted report. The task for the second example is to automatically generate a customer comments e-mail message based on information the customer enters in a form. It uses the  mod_python  Apache module to take the information entered in the HTTP form and then utilizes a Python script on the web server to send that information to an SMTP server for mail delivery. 6. Test Management\/Reporting System This project makes use of the  unittest  module to run tests against an existing application, and creates a framework for reporting test results. Testing is a vital process for developing software. This application enables users to run tests for a given piece of software, to list the previous test runs by date, to show test run results for any previously run tests, and to output the results of any test run as HTML for viewing in a web browser. 7. Version Management System This project connects to a list of servers via telnet, checks the application version of a pre-set application list, and displays its results both as output and to a log file. Often, a system administrator needs to patch systems or ensure that systems have the latest application versions installed. This script is an easy way to accomplish that task. It makes use of Python’s capability to emulate a telnet client and log in to remote systems and perform functions on that remote system. 8. Content Management System This project explores Plone, a popular content management system based on Python and Zope (a Python-based application server). Because Python is a very mature language, numerous applications have been built on top of it. A great thing about working with Python-based applications is that you get the benefit of a full-blown application but you can still use Python to configure and customize it. Part II: Advanced Topics 9. Interacting with the Operating System When writing scripts “in the real world,” often it is critical to be able to access services available through (and particular to) the operating system you happen to be on. For example, suppose you wanted to read or modify the Window Registry? Or you wanted to get the Linux process ID of a particular process that is running? Is such a thing even possible? Definitely—and this chapter shows you how. 10. Debugging and Testing Because I am a software tester myself, testing is a subject that is certainly close to my heart. In this chapter, I discuss why testing is important, how to put the right amount of testing into your code, and how writing automated tests can help you to actually write code more quickly. You’ll look at PyUnit, the automated testing framework for Python, and learn how to use it to test the riskiest parts of a script. You’ll also explore the Python de...|,Wrox,USD 39.99
深入浅出Python（影印版）,Paul Barry,你是否想过通过一本书来学习Python？《深入浅出Python))通过一种独特的超越语法手册的方式来帮助你学习Python。你将能够快速掌握Python的基础知识，然后扩展到持久化、异常处理、Web开发、SQLite、数据处理和Google应用引擎中去。你也将学会如何为Android编写移动应用，这要感谢Pvthon带给你的强大能力。《深入浅出Python》融合了完备的学习经验，它将帮助你成为真正的Python编程员。,东南大学出版社,88.00元
python黑帽子,[美]Justin Seitz,本书是畅销书《Python 灰帽子—黑客与逆向工程师的 Python 编程之道》的姊妹篇，那本书一面市便占据计算机安全类书籍的头把交椅。本书由 Immunity 公司的高级安全研究员 Justin Seitz 精心撰写。作者根据自己在安全界，特别是渗透测试领域的几十年经验，向读者介绍了 Python 如何被用在黑客和渗透测试的各个领域，从基本的网络扫描到数据包捕获，从 Web 爬虫到编写 Burp 扩展工具，从编写木马到权限提升等。 作者在本书中的很多实例都非常具有创新和启发意义， 如 HTTP 数据中的图片检测、 基于 GitHub命令进行控制的模块化木马、浏览器的中间人攻击技术、利用 COM 组件自动化技术窃取数据、通过进程监视和代码插入实现权限提升、通过向虚拟机内存快照中插入 shellcode 实现木马驻留和权限提升等。通过对这些技术的学习，读者不仅能掌握各种 Python 库的应用和编程技术，还能拓宽视野，培养和锻炼自己的黑客思维。读者在阅读本书时也完全感觉不到其他一些技术书籍常见的枯燥和乏味,电子工业出版社,55
Python,Eprogramy,,CreateSpace Independent Publishing Platform,USD 9.99
Python编程实战,[美] Mark Summerfield,|《python编程实战：运用设计模式、并发和程序库创建高质量程序》由python开发者社区知名技术专家mark summerfield亲笔撰写，全球资深python专家doug hellmann作序鼎力推荐，是python领域最有影响力的著作之一。书中通过大量实用的范例代码和三个完整的案例研究，全面而系统地讲解了如何运用设计模式来规划代码结构，如何通过并发与cython等技术提升代码执行速度，以及如何利用各种python程序库来快速开发具体的应用程序和游戏。
《python编程实战：运用设计模式、并发和程序库创建高质量程序》共8章：第1～3章分别介绍了python的几种设计模式(创建型设计模式、结构型设计模式和行为型设计模式)；第4章和第5章详细讲解了python的高级并发技术以及cython的用法；第6章具体介绍了python的高级网络编程；第7章阐释了如何用tkinter开发图形用户界面；第8章讲解了如何用opengl绘制3d图形。|,机械工业出版社,69.00元
Python基础教程（第2版•修订版）,赫特兰,|本书包括Python 程序设计的方方面面，首先从Python 的安装开始，随后介绍了Python 的基础知识和基本概念，包括列表、元组、字符串、字典以及各种语句。然后循序渐进地介绍了一些相对高级的主题，包括抽象、异常、魔法方法、属性、迭代器。此后探讨了如何将Python 与数据库、网络、C 语言等工具结合使用，从而发挥出Python 的强大功能，同时介绍了Python 程序测试、打包、发布等知识。最后，作者结合前面讲述的内容，按照实际项目开发的步骤向读者介绍了几个具有实际意义的Python 项目的开发过程。
本书内容涉及的范围较广，既能为初学者夯实基础，又能帮助程序员提升技能，适合各个层次的Python开发人员阅读参考。|,人民邮电出版社,CNY 79.00
Python编程实践,|Jennifer Campbell,Paul Gries,Jason Montojo,Greg Wilson|,|Python是当今世界流行的编程语言之一。本书共15章，通过一些短小精悍的交互式Python脚本帮助学生进行练习，并在这个过程中掌握诸如数据结构、排序和搜索算法、面向对象编程、数据库访问、图形用户界面等基本概念以及良好的程序设计风格。本书既是一本注重科学的计算机科学专业教材，也是一本目标明确的Python参考书。
本书语言风格言简意赅，图表丰富，简单实用，是一本优秀的Python入门级读物，适合Python初学者使用。|,机械工业出版社华章公司,49.00元
Python Web开发实战,董伟明,|这本书涵盖了Web开发的方方面面，可以分为如下部分：
1. 使用最新的Flask 0.11进行Web开发，学习Jinja2、Flask-Script、Flask-Migrate、Flask-Security、Flask-Assets等8种常用扩展，帮助读者理解Flask 的 优秀设计（上下文、BluePrint等），最后利用Mako、Flask_mako、SQLAlchemy、Pillow等技术实现一个豆瓣一个真实的服务。
2. 阐述笔者对REST的理解，并提出一些设计API的注意事项，最后通过jQuery和fetch实现使用Ajax的例子，让读者了解如何让前后端通信。
3. 对Python应用服务器，Web服务器、缓存系统、键值对数据库等技术的选型和使用方法，最后演示大型网站架构及其重要组件的用意。
4. 使用Fabric、SaltStack、Ansible、Supervisor、Graphite等做系统管理，并演示一个通过最新的Sentry 8演示如何收集应用错误信息。
5. 测试和持续集成，最后使用最新的Buildbot 0.9实现一个Github项目的持续集成。
6. 深入RabbitMQ和Celery的原理和使用方法，最后分享笔者使用的进阶实践。
7. 服务化及豆瓣服务化实践。
8. 详细讲解豆瓣工程师都在用的DPark，包含安装、环境配置、使用和框架化分析uv&pv，接着将展示几个笔者实际工作中的数据报表需求，并讲解如何用Pandas做数据可视化。
9. 深入IPython和Jupyter Notebook这两个工具，并分享在豆瓣对应的实践。
10. 从获取Linux服务器的相关情况、性能测试、分析Python程序性能瓶颈三个方面展示对应的工具及使用方法。
11. 以抓取微信公众号文章为主线，分别使用多线程、多进程、Gevent、Future和asyncio这5种编程方式完成不同阶段的爬取任务，也深入地分析在它们之间如何选择。
12. Python进阶和Web项目经验。
封底推荐语
伟明把他个人多年 Web 开发的经验，以及豆瓣十年来数百名优秀工程师在 Web 开发上最佳实践的积累，凝聚在了《Python Web 开发实战》这本书里，多维度、全面地介绍了 Python Web 开发涉及的各种技术。我向所有有兴趣使用 Python 做 Web 开发的开发者们，强烈推荐此书。
——洪强宁，爱因互动CTO，前豆瓣首席架构师，前宜信大数据创新中心首席架构师
感谢伟明把豆瓣的一些工程实践进行了整理和总结，这是本书最宝贵的一点，库谁都会用，但在什么场景使用，在生产环境中这个库的表现到底如何，是这本书的一个精华，期望将来还可以看到越来越多这样的图书，祝此书大卖。
——清风，SAY CEO，前豆瓣技术总监。
伟明将自身在 Web 领域所有方面的经验提炼后整理成书，本质上是将几十个关联产品的官方文档，结合具体工程经验进行了梳理，给出了领域问题最佳方案的关键思考点和自己的答案，而更加可贵的是，给出了这些思考点的来源，以及形成过程，即给出了解决各种 Web 领域问题的思维模式。
——Zoom.Quiet（大妈），优视眼动科技 CTO，Python 中文社区创始人之一和管理员
阅读本书，我最大的感受就是：全和新。本书的内容涉及了Web框架、Ajax的前后端交互、测试、数据库、数据分析、服务化、部署、系统管理、常用工具等内容，有点百科全书的意味。另外，书中讲的许多东西都是现在正在流行的技术或工具，像Flask、Celery、Jupyter、Supervisor、SaltStack、Pandas等。
——李迎辉，Python开源资深行者，Python-CN邮件列表创建人，UliPad和Uliweb作者
本书由Python开发开始，循序渐进，把网站工程的全貌展现在读者的眼前，是了解Web工程从开发到上线完整流程的绝佳参考书籍。
——邢犇（CNBorn）, 前豆瓣东西技术负责人
很多刚进入Python世界的人，伟明的这本书提供了一个非常好的“知识地图”，书中涉及了Python Web开发的方方面面。
——胡阳（the5fire），手机搜狐网，任资深开发工程师
这本书从开发环境的搭建，Web 框架的使用，到最后的持续集成和 Python 的进阶用法，无一不是他多年的实际工程经验总结，十分宝贵。
——姚钢强（acmerfight），知乎工程师
这本书非常全面地介绍了使用 Python 进行 Web 开发的方方面面，既有 Web 框架、缓存、消息队列、并发处理的场景介绍和技术选型，又有开发流程、质量保证的丰富实战经验。
——蔡斌（VeryCB），DeepDevelop工程师，前豆瓣条目组技术负责人
整本书都是作者对实际Web项目中大量实战经验的总结，绝非纸上谈兵。相信通过阅读该书可以帮助开发者规避掉大量项目中的“坑”，构建出更高性能、更稳定的Web项目。
——Spawnris, 腾讯工程师|,电子工业出版社,105
Python Cookbook 中文版，第 3 版,|David M. Beazley,Brian K. Jones|,|《Python Cookbook（第3版）中文版》介绍了Python应用在各个领域中的一些使用技巧和方法，其主题涵盖了数据结构和算法，字符串和文本，数字、日期和时间，迭代器和生成器，文件和I\/O，数据编码与处理，函数，类与对象，元编程，模块和包，网络和Web编程，并发，实用脚本和系统管理，测试、调试以及异常，C语言扩展等。
本书覆盖了Python应用中的很多常见问题，并提出了通用的解决方案。书中包含了大量实用的编程技巧和示例代码，并在Python 3.3环境下进行了测试，可以很方便地应用到实际项目中去。此外，《Python Cookbook（第3版）中文版》还详细讲解了解决方案是如何工作的，以及为什么能够工作。
《Python Cookbook（第3版）中文版》非常适合具有一定编程基础的Python程序员阅读参考。|,人民邮电出版社,108.00元
Hacking Secret Ciphers with Python,Al Sweigart,,CreateSpace Independent Publishing Platform,USD 25.01
用Python写网络爬虫,[澳]理查德 劳森,|作为一种便捷地收集网上信息并从中抽取出可用信息的方式，网络爬虫技术变得越来越有用。使用Python这样的简单编程语言，你可以使用少量编程技能就可以爬取复杂的网站。
《用Python写网络爬虫》作为使用Python来爬取网络数据的杰出指南，讲解了从静态页面爬取数据的方法以及使用缓存来管理服务器负载的方法。此外，本书还介绍了如何使用AJAX URL和Firebug扩展来爬取数据，以及有关爬取技术的更多真相，比如使用浏览器渲染、管理cookie、通过提交表单从受验证码保护的复杂网站中抽取数据等。本书使用Scrapy创建了一个高级网络爬虫，并对一些真实的网站进行了爬取。
《用Python写网络爬虫》介绍了如下内容：
通过跟踪链接来爬取网站；
使用lxml从页面中抽取数据；
构建线程爬虫来并行爬取页面；
将下载的内容进行缓存，以降低带宽消耗；
解析依赖于JavaScript的网站；
与表单和会话进行交互；
解决受保护页面的验证码问题；
对AJAX调用进行逆向工程；
使用Scrapy创建高级爬虫。
本书读者对象
本书是为想要构建可靠的数据爬取解决方案的开发人员写作的，本书假定读者具有一定的Python编程经验。当然，具备其他编程语言开发经验的读者也可以阅读本书，并理解书中涉及的概念和原理。|,人民邮电出版社,CNY 45.00
