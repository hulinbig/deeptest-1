# -.- coding:utf-8 -.-# author = 'vivi'#iterator指迭代器，iterable能否被迭代,任何使用yield的函数都称之为生成器,isinstance 判断实例是否是这个类或者是object是变量from collections import Iterable, Iterator'''def g():    yield 1    yield 2    yield 3print('Iterable？ [1, 2, 3]:', isinstance([1, 2, 3], Iterable))print('Iterable？ \'abc\':', isinstance('abc', Iterable))print('Iterable？ 123:', isinstance(123, Iterable))print('Iterable？ g():', isinstance(g(), Iterable))print('Iterator? [1, 2, 3]:', isinstance([1, 2, 3], Iterator))print('Iterator? iter([1, 2, 3]):', isinstance(iter([1, 2, 3]), Iterator))    #iter创建了一个迭代器对象print('Iterator? \'abc\':', isinstance('abc', Iterator))print('Iterator? 123:', isinstance(123, Iterator))print('Iterator? g():', isinstance(g(), Iterator))''''''执行结果：Iterable？ [1, 2, 3]: TrueIterable？ 'abc': TrueIterable？ 123: FalseIterable？ g(): TrueIterator? [1, 2, 3]: FalseIterator? iter([1, 2, 3]): TrueIterator? 'abc': FalseIterator? 123: FalseIterator? g(): True''''''print('for x in [1,2,3,4,5]:')for x in [1, 2, 3, 4, 5]:    print(x)print('for x in iter([1,2,3,4,5]):')for x in iter([1, 2, 3, 4, 5]):    print(x)# Python 3 的内置函数 next() 通过迭代器调用 __next__() 方法返回下一项。 在循环中，next()方法会在每次循环中调用，该方法返回文件的下一行，如果到达结尾(EOF),则触发 StopIterationprint('next():')it = iter([1, 2, 3, 4, 5])print(next(it))print(next(it))print(next(it))print(next(it))print(next(it))'''d = {'a': 1, 'b': 2, 'c': 3}#iter each key:print('iter key:', d)for k in d.keys():    print('key:', k)'''执行结果：iter key: {'c': 3, 'a': 1, 'b': 2}key: ckey: akey: b'''#iter each value:print('iter value:', d)for v in d.values():    print('value:', v)'''执行结果：iter value: {'c': 3, 'a': 1, 'b': 2}value: 3value: 1value: 2'''#iter both key and value:print('iter item:', d)for k, v in d.items():    print('item:', k, v)'''执行结果iter item: {'c': 3, 'a': 1, 'b': 2}item: c 3item: a 1item: b 2'''#iter list with index:--python的内置函数enumerate可以把一个list变成索引-元素对，这样就可以在for循环中同时迭代索引和元素本身print('iter enumerate([\'A\', \'B\', \'C\']')for i, value in enumerate(['A', 'B', 'C']):    print(i, value)'''    执行结果：iter enumerate(['A', 'B', 'C']0 A1 B2 C'''#iter complex list:print('iter[(1,2), (2,4), (3,9)]:')for x, y in [(1, 2), (2, 4), (3, 9)]:    print(x, y)'''执行结果：iter[(1,2), (2,4), (3,9)]:1 22 43 9'''