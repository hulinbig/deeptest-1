# -.- coding:utf-8 -.-# __author__= 'vivi''''try:    print('try')    r = 10 / int('a')    print('result:', r)except ValueError as e:        #try语句出现错误时执行该句，如果不出错不执行    print('ValueError:', e)except ZeroDivisionError as e:    print('ZeroDivisionError:', e)finally:    print('finally...')       #无论有没有错都会执行······print('END')'''#err.py#根据错误一层一层的向上找，直到找到源头'''def foo(s):    return 10 / int(s)def bar(s):    return foo(s) * 2def main():    bar('0')main()'''#用python内置的模块logging记录日志，同时程序打印完错误日志后会继续执行并正常退出'''import loggingdef foo(s):    return 10 / int(s)def bar(s):    return foo(s) * 2def main():    try:        bar('0')    except Exception as e:        logging.exception(e)main()print('END')'''#抛出错误'''class FooError(ValueError):    passdef foo(s):    n = int(s)    if n == 0:        raise FooError('invalid value: %s' %s)    return 10 / nfoo('0')'''def foo(s):    n = int(s)    if n==0:        raise ValueError('invalid value:%s' % s)    return 10 / 0def bar(s):    try:        foo('0')    except ValueError as e:        print('ValueError')        raisebar('0')