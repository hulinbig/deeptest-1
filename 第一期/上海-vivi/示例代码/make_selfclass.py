# -.- coding:utf-8 -.-# __author__= 'vivi''''class Fib(object):    def __init__(self):        self.a, self.b = 0, 1    def __iter__(self):  # 实例本身就是一个迭代对象，故返回自己        return self    def __next__(self):        self.a, self.b = self.b, self.a + self.b        if self.a > 1000:  # 退出循环的条件            raise StopIteration()        return self.afor n in Fib():    print(n)''''''class Fib2(object):    def __getitem__(self, n):        a, b = 1, 1        for x in range(n):            a, b = b, a + b        return af = Fib2()print(f[0])print(f[9])''''''class Fib3(object):    def __getitem__(self, n):        if isinstance(n, int):            a, b = 1, 1            for x in range(n):                a, b = b, a + b            return a        if isinstance(n, slice):            start = n.start            stop = n.stop            if start is None:                start = 0            a, b = 1, 1            L = []            for x in range(stop):                if x >= start:                    L.append(a)                a, b = b, a + b            return Lf = Fib3()print(f[1: 5])print(f[:10])print(f[:10:2])'''#使用枚举类'''from enum import EnumMonth = Enum('Month', ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'))for name, member in Month.__members__.items():    print(name, '==>', member, ',', member.value)'''#自定义时用unique装饰器来帮我们检查保证没有重复值from enum import Enum, unique@uniqueclass Weekday(Enum):         #枚举定义用class关键字，继承Enum类    Sun = 0    Mon = 1    Tue = 2    Wed = 3    Thu = 4    Fri = 5    Sat = 6day1 = Weekday.Mon.valueprint(day1)